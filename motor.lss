
motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000c38  00000ccc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800104  00800104  00000cd0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001bf  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079a  00000000  00000000  00000eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000024a  00000000  00000000  00001649  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000078b  00000000  00000000  00001893  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00002020  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000243  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ba  00000000  00000000  000023f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000360  00000000  00000000  000026ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_12>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e3       	ldi	r30, 0x38	; 56
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 22 02 	call	0x444	; 0x444 <main>
  c6:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <dely_ns>:
dely_ns(250);
CLEARBIT(PORTUSED,BIT(2));
}

void dely_ns(unsigned char tim)
{
  ce:	20 91 04 01 	lds	r18, 0x0104
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <dely_ns+0xc>
	for(j=0;j<tim;j++)
  d6:	9f 5f       	subi	r25, 0xFF	; 255
  d8:	2a e0       	ldi	r18, 0x0A	; 10
  da:	98 17       	cp	r25, r24
  dc:	e0 f3       	brcs	.-8      	; 0xd6 <dely_ns+0x8>
  de:	20 93 04 01 	sts	0x0104, r18
  e2:	90 93 05 01 	sts	0x0105, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
  e6:	08 95       	ret

000000e8 <toggleE>:
		
}

void toggleE(void)
{
SETBIT(PORTUSED,BIT(2));
  e8:	da 9a       	sbi	0x1b, 2	; 27
dely_ns(250);
  ea:	8a ef       	ldi	r24, 0xFA	; 250
  ec:	0e 94 67 00 	call	0xce	; 0xce <dely_ns>
CLEARBIT(PORTUSED,BIT(2));
  f0:	da 98       	cbi	0x1b, 2	; 27
}
  f2:	08 95       	ret

000000f4 <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	08 2f       	mov	r16, r24
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	84 70       	andi	r24, 0x04	; 4
  fe:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=((cmd&0xF0));			
 100:	80 2f       	mov	r24, r16
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	8b bb       	out	0x1b, r24	; 27
	toggleE();
 106:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
	PORTUSED=(((cmd&(0x0F))*16));	
 10a:	10 e0       	ldi	r17, 0x00	; 0
 10c:	0f 70       	andi	r16, 0x0F	; 15
 10e:	10 70       	andi	r17, 0x00	; 0
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	00 0f       	add	r16, r16
 114:	11 1f       	adc	r17, r17
 116:	8a 95       	dec	r24
 118:	e1 f7       	brne	.-8      	; 0x112 <lcd_cmd+0x1e>
 11a:	0b bb       	out	0x1b, r16	; 27
	toggleE();
 11c:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
}
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	08 95       	ret

00000126 <lcd_putchar>:

void lcd_putchar(unsigned char sig)
{
 126:	1f 93       	push	r17
 128:	18 2f       	mov	r17, r24
		PORTUSED=0x01;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	8b bb       	out	0x1b, r24	; 27
		CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 12e:	8b b3       	in	r24, 0x1b	; 27
 130:	82 70       	andi	r24, 0x02	; 2
 132:	8b bb       	out	0x1b, r24	; 27
		PORTUSED=(sig&0xF0)|0x01;						
 134:	81 2f       	mov	r24, r17
 136:	80 7f       	andi	r24, 0xF0	; 240
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	8b bb       	out	0x1b, r24	; 27
		toggleE();
 13c:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
		PORTUSED=((sig&(0x0F))*16)|0x01;
 140:	12 95       	swap	r17
 142:	10 7f       	andi	r17, 0xF0	; 240
 144:	11 60       	ori	r17, 0x01	; 1
 146:	1b bb       	out	0x1b, r17	; 27
		toggleE();
 148:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
}
 14c:	1f 91       	pop	r17
 14e:	08 95       	ret

00000150 <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[32])
{
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTUSED=0x01;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	8b bb       	out	0x1b, r24	; 27
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 160:	8b b3       	in	r24, 0x1b	; 27
 162:	82 70       	andi	r24, 0x02	; 2
 164:	8b bb       	out	0x1b, r24	; 27
 166:	10 e0       	ldi	r17, 0x00	; 0
 168:	13 c0       	rjmp	.+38     	; 0x190 <lcd_string+0x40>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 16a:	10 31       	cpi	r17, 0x10	; 16
 16c:	19 f4       	brne	.+6      	; 0x174 <lcd_string+0x24>
				lcd_cmd(LINE2);
 16e:	80 ec       	ldi	r24, 0xC0	; 192
 170:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
			PORTUSED=((str[k])&0xF0)|0x01;
 174:	88 81       	ld	r24, Y
 176:	80 7f       	andi	r24, 0xF0	; 240
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 17c:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
 180:	88 81       	ld	r24, Y
 182:	82 95       	swap	r24
 184:	80 7f       	andi	r24, 0xF0	; 240
 186:	81 60       	ori	r24, 0x01	; 1
 188:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 18a:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
			k++;
 18e:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	PORTUSED=0x01;
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
 190:	e7 01       	movw	r28, r14
 192:	c1 0f       	add	r28, r17
 194:	d1 1d       	adc	r29, r1
 196:	88 81       	ld	r24, Y
 198:	88 23       	and	r24, r24
 19a:	39 f7       	brne	.-50     	; 0x16a <lcd_string+0x1a>
			toggleE();
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
		}
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	ff 90       	pop	r15
 1a4:	ef 90       	pop	r14
 1a6:	08 95       	ret

000001a8 <lcd_gotoxy1>:
	lcd_char(O+48);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 1a8:	80 58       	subi	r24, 0x80	; 128
 1aa:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
}
 1ae:	08 95       	ret

000001b0 <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 1b0:	80 54       	subi	r24, 0x40	; 64
 1b2:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
}
 1b6:	08 95       	ret

000001b8 <lcd_char>:
}

void lcd_char(unsigned char single)
{
	int i;
	if(single =='\t')
 1b8:	89 30       	cpi	r24, 0x09	; 9
 1ba:	21 f4       	brne	.+8      	; 0x1c4 <lcd_char+0xc>
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(single);
 1bc:	0e 94 93 00 	call	0x126	; 0x126 <lcd_putchar>
 1c0:	89 e0       	ldi	r24, 0x09	; 9
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <lcd_char+0x18>
		}
	}
	else if(single=='\n')
 1c4:	8a 30       	cpi	r24, 0x0A	; 10
 1c6:	21 f4       	brne	.+8      	; 0x1d0 <lcd_char+0x18>
	{
		lcd_gotoxy2(0);	
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
 1ce:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 1d0:	0e 94 93 00 	call	0x126	; 0x126 <lcd_putchar>
 1d4:	08 95       	ret

000001d6 <lcd_showvalue>:


}

void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 1d6:	df 92       	push	r13
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	08 2f       	mov	r16, r24
	unsigned char TH=0,H=0,T=0,O=0;
	TH=num/1000;
 1e2:	e8 2f       	mov	r30, r24
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
	H=(num-(TH*1000))/100;
 1e6:	cf 01       	movw	r24, r30
 1e8:	64 e6       	ldi	r22, 0x64	; 100
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	0e 94 07 03 	call	0x60e	; 0x60e <__divmodhi4>
 1f0:	d6 2e       	mov	r13, r22
	T=(num - (H*100))/10;
 1f2:	26 2f       	mov	r18, r22
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	8c e9       	ldi	r24, 0x9C	; 156
 1f8:	9f ef       	ldi	r25, 0xFF	; 255
 1fa:	28 9f       	mul	r18, r24
 1fc:	70 01       	movw	r14, r0
 1fe:	29 9f       	mul	r18, r25
 200:	f0 0c       	add	r15, r0
 202:	38 9f       	mul	r19, r24
 204:	f0 0c       	add	r15, r0
 206:	11 24       	eor	r1, r1
 208:	c7 01       	movw	r24, r14
 20a:	8e 0f       	add	r24, r30
 20c:	9f 1f       	adc	r25, r31
 20e:	6a e0       	ldi	r22, 0x0A	; 10
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	0e 94 07 03 	call	0x60e	; 0x60e <__divmodhi4>
 216:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(TH+48);
 218:	80 e3       	ldi	r24, 0x30	; 48
 21a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_char>
	lcd_char(H+48);
 21e:	8d 2d       	mov	r24, r13
 220:	80 5d       	subi	r24, 0xD0	; 208
 222:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_char>
	lcd_char(T+48);
 226:	81 2f       	mov	r24, r17
 228:	80 5d       	subi	r24, 0xD0	; 208
 22a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_char>
	lcd_char(O+48);
 22e:	00 5d       	subi	r16, 0xD0	; 208
 230:	0e 0d       	add	r16, r14
 232:	86 ef       	ldi	r24, 0xF6	; 246
 234:	9f ef       	ldi	r25, 0xFF	; 255
 236:	18 9f       	mul	r17, r24
 238:	10 2d       	mov	r17, r0
 23a:	11 24       	eor	r1, r1
 23c:	81 2f       	mov	r24, r17
 23e:	80 0f       	add	r24, r16
 240:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_char>
}
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	08 95       	ret

00000250 <lcd_exit>:
}
		

void lcd_exit(void)
{
	PORTUSED=save;
 250:	80 91 06 01 	lds	r24, 0x0106
 254:	8b bb       	out	0x1b, r24	; 27
}
 256:	08 95       	ret

00000258 <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 258:	0a c0       	rjmp	.+20     	; 0x26e <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 25e:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 260:	2f 5f       	subi	r18, 0xFF	; 255
 262:	3f 4f       	sbci	r19, 0xFF	; 255
 264:	4c e0       	ldi	r20, 0x0C	; 12
 266:	2c 3c       	cpi	r18, 0xCC	; 204
 268:	34 07       	cpc	r19, r20
 26a:	c9 f7       	brne	.-14     	; 0x25e <WaitMs+0x6>
 26c:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	a1 f7       	brne	.-24     	; 0x25a <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 272:	08 95       	ret

00000274 <lcd_init>:
void WaitMs(unsigned int ms);


void lcd_init(void)	//init the lcd
{	
	save=PORTUSED;
 274:	8b b3       	in	r24, 0x1b	; 27
 276:	80 93 06 01 	sts	0x0106, r24
	DDRUSED=0xFF;
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	8a bb       	out	0x1a, r24	; 26
	//DDRB=0xFF;
	WaitMs(15);
 27e:	8f e0       	ldi	r24, 0x0F	; 15
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 2c 01 	call	0x258	; 0x258 <WaitMs>
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
 286:	8b b3       	in	r24, 0x1b	; 27
 288:	84 70       	andi	r24, 0x04	; 4
 28a:	8b bb       	out	0x1b, r24	; 27
	//PORTUSED=0x20;
	lcd_cmd(0x01);
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
	lcd_cmd(0x0F);
 292:	8f e0       	ldi	r24, 0x0F	; 15
 294:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
	lcd_cmd(0x02);
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
	lcd_cmd(LINE1);
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
	WaitMs(15);
 2a4:	8f e0       	ldi	r24, 0x0F	; 15
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 2c 01 	call	0x258	; 0x258 <WaitMs>
		
}
 2ac:	08 95       	ret

000002ae <uart_init>:


void uart_init()
{
UBRR1L=103;
 2ae:	87 e6       	ldi	r24, 0x67	; 103
 2b0:	80 93 99 00 	sts	0x0099, r24
UCSR1A=(1<<3)|(1<<4);
 2b4:	88 e1       	ldi	r24, 0x18	; 24
 2b6:	80 93 9b 00 	sts	0x009B, r24
}
 2ba:	08 95       	ret

000002bc <uart_tx>:

void uart_tx(unsigned char data)
{
 2bc:	98 2f       	mov	r25, r24
while(!(UCSR1B&(1<<UDRE1)));
 2be:	80 91 9a 00 	lds	r24, 0x009A
 2c2:	85 ff       	sbrs	r24, 5
 2c4:	fc cf       	rjmp	.-8      	; 0x2be <uart_tx+0x2>
UDR1=data;
 2c6:	90 93 9c 00 	sts	0x009C, r25
}
 2ca:	08 95       	ret

000002cc <uart_rx>:

unsigned char uart_rx(void)
{
while(!(UCSR1B&(1<<RXC1)));
 2cc:	80 91 9a 00 	lds	r24, 0x009A
 2d0:	87 ff       	sbrs	r24, 7
 2d2:	fc cf       	rjmp	.-8      	; 0x2cc <uart_rx>
return UDR1;
 2d4:	80 91 9c 00 	lds	r24, 0x009C
}
 2d8:	08 95       	ret

000002da <uart_str>:


uart_str(unsigned char *data)
{
 2da:	fc 01       	movw	r30, r24
 2dc:	07 c0       	rjmp	.+14     	; 0x2ec <uart_str+0x12>
UCSR1A=(1<<3)|(1<<4);
}

void uart_tx(unsigned char data)
{
while(!(UCSR1B&(1<<UDRE1)));
 2de:	80 91 9a 00 	lds	r24, 0x009A
 2e2:	85 ff       	sbrs	r24, 5
 2e4:	fc cf       	rjmp	.-8      	; 0x2de <uart_str+0x4>


uart_str(unsigned char *data)
{
while((*data) != '\0')	/* print char from str pointer and point to next location */
				uart_tx((*data++));
 2e6:	31 96       	adiw	r30, 0x01	; 1
}

void uart_tx(unsigned char data)
{
while(!(UCSR1B&(1<<UDRE1)));
UDR1=data;
 2e8:	90 93 9c 00 	sts	0x009C, r25
}


uart_str(unsigned char *data)
{
while((*data) != '\0')	/* print char from str pointer and point to next location */
 2ec:	90 81       	ld	r25, Z
 2ee:	99 23       	and	r25, r25
 2f0:	b1 f7       	brne	.-20     	; 0x2de <uart_str+0x4>
				uart_tx((*data++));


}
 2f2:	08 95       	ret

000002f4 <__vector_12>:
volatile unsigned char seconds=1;
volatile unsigned char iteration_ccw;
volatile unsigned char iteration_cw;

ISR(TIMER1_COMPA_vect)
{
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	4f 93       	push	r20
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
sei();
 308:	78 94       	sei
unsigned char deg_cw;
unsigned char deg_ccw;
unsigned char read_val;
unsigned char variance;
PORTC^=0xff;
 30a:	85 b3       	in	r24, 0x15	; 21
 30c:	80 95       	com	r24
 30e:	85 bb       	out	0x15, r24	; 21
/*degree_set_new=eeprom_read_byte(25);
read_val=degree_set_new;
lcd_gotoxy2(0);
lcd_num(degree_set_new);*/
PORTG|=(1<<0);
 310:	80 91 65 00 	lds	r24, 0x0065
 314:	81 60       	ori	r24, 0x01	; 1
 316:	80 93 65 00 	sts	0x0065, r24
if(seconds==1)     // Put seconds=240 for 4 minute delay.
 31a:	80 91 03 01 	lds	r24, 0x0103
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	f9 f4       	brne	.+62     	; 0x360 <__vector_12+0x6c>
{
for(degree=0;degree<200;degree++)
 322:	10 92 0a 01 	sts	0x010A, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 326:	2c ea       	ldi	r18, 0xAC	; 172
 328:	38 e0       	ldi	r19, 0x08	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 32a:	4a e1       	ldi	r20, 0x1A	; 26
 32c:	15 c0       	rjmp	.+42     	; 0x358 <__vector_12+0x64>
{
PORTG|=(1<<4);
 32e:	80 91 65 00 	lds	r24, 0x0065
 332:	80 61       	ori	r24, 0x10	; 16
 334:	80 93 65 00 	sts	0x0065, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 338:	c9 01       	movw	r24, r18
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <__vector_12+0x46>
_delay_us(555);
PORTG&=~(1<<4);
 33e:	80 91 65 00 	lds	r24, 0x0065
 342:	8f 7e       	andi	r24, 0xEF	; 239
 344:	80 93 65 00 	sts	0x0065, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 348:	84 2f       	mov	r24, r20
 34a:	8a 95       	dec	r24
 34c:	f1 f7       	brne	.-4      	; 0x34a <__vector_12+0x56>
lcd_gotoxy2(0);
lcd_num(degree_set_new);*/
PORTG|=(1<<0);
if(seconds==1)     // Put seconds=240 for 4 minute delay.
{
for(degree=0;degree<200;degree++)
 34e:	80 91 0a 01 	lds	r24, 0x010A
 352:	8f 5f       	subi	r24, 0xFF	; 255
 354:	80 93 0a 01 	sts	0x010A, r24
 358:	80 91 0a 01 	lds	r24, 0x010A
 35c:	88 3c       	cpi	r24, 0xC8	; 200
 35e:	38 f3       	brcs	.-50     	; 0x32e <__vector_12+0x3a>

}



}
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	4f 91       	pop	r20
 366:	3f 91       	pop	r19
 368:	2f 91       	pop	r18
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <timer_init>:
eeprom_write_byte(25,degree_set_new);
}

void timer_init()
{
TCCR1B|=(1<<WGM12)|(1<<CS10)|(1<<CS12);
 374:	8e b5       	in	r24, 0x2e	; 46
 376:	8d 60       	ori	r24, 0x0D	; 13
 378:	8e bd       	out	0x2e, r24	; 46
OCR1A=15625;
 37a:	89 e0       	ldi	r24, 0x09	; 9
 37c:	9d e3       	ldi	r25, 0x3D	; 61
 37e:	9b bd       	out	0x2b, r25	; 43
 380:	8a bd       	out	0x2a, r24	; 42
TIMSK|=(1<<OCIE1A);
 382:	87 b7       	in	r24, 0x37	; 55
 384:	80 61       	ori	r24, 0x10	; 16
 386:	87 bf       	out	0x37, r24	; 55
sei();
 388:	78 94       	sei
}
 38a:	08 95       	ret

0000038c <align_cw>:
}

void align_cw(void)
{

PORTG=0x00;
 38c:	10 92 65 00 	sts	0x0065, r1
PORTG|=(1<<0);
 390:	80 91 65 00 	lds	r24, 0x0065
 394:	81 60       	ori	r24, 0x01	; 1
 396:	80 93 65 00 	sts	0x0065, r24
unsigned char degree_cw;
PORTC=0x02;
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	85 bb       	out	0x15, r24	; 21
 39e:	20 e0       	ldi	r18, 0x00	; 0
for(degree_cw=0;degree_cw<50;degree_cw++)
{
PORTC=0xff;
 3a0:	6f ef       	ldi	r22, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3a2:	4c ea       	ldi	r20, 0xAC	; 172
 3a4:	58 e0       	ldi	r21, 0x08	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3a6:	3a e1       	ldi	r19, 0x1A	; 26
 3a8:	65 bb       	out	0x15, r22	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3aa:	ca 01       	movw	r24, r20
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <align_cw+0x20>
_delay_us(555);
PORTG|=(1<<4);
 3b0:	80 91 65 00 	lds	r24, 0x0065
 3b4:	80 61       	ori	r24, 0x10	; 16
 3b6:	80 93 65 00 	sts	0x0065, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3ba:	83 2f       	mov	r24, r19
 3bc:	8a 95       	dec	r24
 3be:	f1 f7       	brne	.-4      	; 0x3bc <align_cw+0x30>
_delay_us(5);
PORTG&=~(1<<4);
 3c0:	80 91 65 00 	lds	r24, 0x0065
 3c4:	8f 7e       	andi	r24, 0xEF	; 239
 3c6:	80 93 65 00 	sts	0x0065, r24

PORTG=0x00;
PORTG|=(1<<0);
unsigned char degree_cw;
PORTC=0x02;
for(degree_cw=0;degree_cw<50;degree_cw++)
 3ca:	2f 5f       	subi	r18, 0xFF	; 255
 3cc:	22 33       	cpi	r18, 0x32	; 50
 3ce:	61 f7       	brne	.-40     	; 0x3a8 <align_cw+0x1c>
_delay_us(555);
PORTG|=(1<<4);
_delay_us(5);
PORTG&=~(1<<4);
}
degree_set_new++;
 3d0:	80 91 07 01 	lds	r24, 0x0107
 3d4:	8f 5f       	subi	r24, 0xFF	; 255
 3d6:	80 93 07 01 	sts	0x0107, r24
eeprom_write_byte(25,degree_set_new);
 3da:	60 91 07 01 	lds	r22, 0x0107
 3de:	89 e1       	ldi	r24, 0x19	; 25
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 6d 05 	call	0xada	; 0xada <__eewr_byte_m128>
}
 3e6:	08 95       	ret

000003e8 <align_ccw>:



void align_ccw(void)
{
PORTG=0x00;
 3e8:	10 92 65 00 	sts	0x0065, r1
PORTG&=~(1<<0);
 3ec:	80 91 65 00 	lds	r24, 0x0065
 3f0:	8e 7f       	andi	r24, 0xFE	; 254
 3f2:	80 93 65 00 	sts	0x0065, r24
PORTC=0x01;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	85 bb       	out	0x15, r24	; 21
 3fa:	20 e0       	ldi	r18, 0x00	; 0
unsigned char degree_ccw;
for(degree_ccw=0;degree_ccw<50;degree_ccw++)
{
PORTC=0xff;
 3fc:	6f ef       	ldi	r22, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3fe:	4c ea       	ldi	r20, 0xAC	; 172
 400:	58 e0       	ldi	r21, 0x08	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 402:	3a e1       	ldi	r19, 0x1A	; 26
 404:	65 bb       	out	0x15, r22	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 406:	ca 01       	movw	r24, r20
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <align_ccw+0x20>
_delay_us(555);
PORTG|=(1<<4);
 40c:	80 91 65 00 	lds	r24, 0x0065
 410:	80 61       	ori	r24, 0x10	; 16
 412:	80 93 65 00 	sts	0x0065, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 416:	83 2f       	mov	r24, r19
 418:	8a 95       	dec	r24
 41a:	f1 f7       	brne	.-4      	; 0x418 <align_ccw+0x30>
_delay_us(5);
PORTG&=~(1<<4);
 41c:	80 91 65 00 	lds	r24, 0x0065
 420:	8f 7e       	andi	r24, 0xEF	; 239
 422:	80 93 65 00 	sts	0x0065, r24
{
PORTG=0x00;
PORTG&=~(1<<0);
PORTC=0x01;
unsigned char degree_ccw;
for(degree_ccw=0;degree_ccw<50;degree_ccw++)
 426:	2f 5f       	subi	r18, 0xFF	; 255
 428:	22 33       	cpi	r18, 0x32	; 50
 42a:	61 f7       	brne	.-40     	; 0x404 <align_ccw+0x1c>
_delay_us(555);
PORTG|=(1<<4);
_delay_us(5);
PORTG&=~(1<<4);
}
degree_set_new--;
 42c:	80 91 07 01 	lds	r24, 0x0107
 430:	81 50       	subi	r24, 0x01	; 1
 432:	80 93 07 01 	sts	0x0107, r24
eeprom_write_byte(25,degree_set_new);
 436:	60 91 07 01 	lds	r22, 0x0107
 43a:	89 e1       	ldi	r24, 0x19	; 25
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 6d 05 	call	0xada	; 0xada <__eewr_byte_m128>
}
 442:	08 95       	ret

00000444 <main>:
sei();
}


void main()
{
 444:	1f 93       	push	r17
DDRG|=(1<<3)|(1<<4)|(1<<2)|(1<<0);
 446:	80 91 64 00 	lds	r24, 0x0064
 44a:	8d 61       	ori	r24, 0x1D	; 29
 44c:	80 93 64 00 	sts	0x0064, r24
PORTG|=(1<<2);
 450:	80 91 65 00 	lds	r24, 0x0065
 454:	84 60       	ori	r24, 0x04	; 4
 456:	80 93 65 00 	sts	0x0065, r24
PORTG&=~(1<<0);
 45a:	80 91 65 00 	lds	r24, 0x0065
 45e:	8e 7f       	andi	r24, 0xFE	; 254
 460:	80 93 65 00 	sts	0x0065, r24
DDRC=0xff;
 464:	1f ef       	ldi	r17, 0xFF	; 255
 466:	14 bb       	out	0x14, r17	; 20


void uart_init()
{
UBRR1L=103;
 468:	87 e6       	ldi	r24, 0x67	; 103
 46a:	80 93 99 00 	sts	0x0099, r24
UCSR1A=(1<<3)|(1<<4);
 46e:	88 e1       	ldi	r24, 0x18	; 24
 470:	80 93 9b 00 	sts	0x009B, r24
//TCCR1A=0x00;
uart_init();
lcd_init();
 474:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_init>
//lcd_char('a');
DDRD&=~((1<<6)|(1<<7));
 478:	81 b3       	in	r24, 0x11	; 17
 47a:	8f 73       	andi	r24, 0x3F	; 63
 47c:	81 bb       	out	0x11, r24	; 17
DDRE&=~((1<<6)|(1<<7));
 47e:	82 b1       	in	r24, 0x02	; 2
 480:	8f 73       	andi	r24, 0x3F	; 63
 482:	82 b9       	out	0x02, r24	; 2
PORTD|=(1<<6)|(1<<7);
 484:	82 b3       	in	r24, 0x12	; 18
 486:	80 6c       	ori	r24, 0xC0	; 192
 488:	82 bb       	out	0x12, r24	; 18
PORTE|=(1<<6)|(1<<7);
 48a:	83 b1       	in	r24, 0x03	; 3
 48c:	80 6c       	ori	r24, 0xC0	; 192
 48e:	83 b9       	out	0x03, r24	; 3
DDRC=0xff;
 490:	14 bb       	out	0x14, r17	; 20
DDRG|=(1<<0)|(1<<4);
 492:	80 91 64 00 	lds	r24, 0x0064
 496:	81 61       	ori	r24, 0x11	; 17
 498:	80 93 64 00 	sts	0x0064, r24
PORTG&=~(1<<0);
 49c:	80 91 65 00 	lds	r24, 0x0065
 4a0:	8e 7f       	andi	r24, 0xFE	; 254
 4a2:	80 93 65 00 	sts	0x0065, r24

while(1)
{
if(s1)
 4a6:	86 99       	sbic	0x10, 6	; 16
 4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <main+0x6c>
{
cli();
 4aa:	f8 94       	cli
align_cw();
 4ac:	0e 94 c6 01 	call	0x38c	; 0x38c <align_cw>

}
if(s2)
 4b0:	87 99       	sbic	0x10, 7	; 16
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <main+0x76>
{
cli();
 4b4:	f8 94       	cli
align_ccw();
 4b6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <align_ccw>
}
if(s4)
 4ba:	0f 99       	sbic	0x01, 7	; 1
 4bc:	f4 cf       	rjmp	.-24     	; 0x4a6 <main+0x62>
{
timer_init();
 4be:	0e 94 ba 01 	call	0x374	; 0x374 <timer_init>
 4c2:	f1 cf       	rjmp	.-30     	; 0x4a6 <main+0x62>

000004c4 <motor_execute>:


void motor_execute(void)
{
	unsigned char degree_exec;
	degree_exec=eeprom_read_byte(25);
 4c4:	89 e1       	ldi	r24, 0x19	; 25
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 65 05 	call	0xaca	; 0xaca <__eerd_byte_m128>
 4cc:	28 2f       	mov	r18, r24
	
	for(degree=0;degree<200;degree++)
 4ce:	10 92 0a 01 	sts	0x010A, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4d2:	4c ea       	ldi	r20, 0xAC	; 172
 4d4:	58 e0       	ldi	r21, 0x08	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4d6:	3a e1       	ldi	r19, 0x1A	; 26
 4d8:	15 c0       	rjmp	.+42     	; 0x504 <motor_execute+0x40>
	{
	PORTG|=(1<<4);
 4da:	80 91 65 00 	lds	r24, 0x0065
 4de:	80 61       	ori	r24, 0x10	; 16
 4e0:	80 93 65 00 	sts	0x0065, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4e4:	ca 01       	movw	r24, r20
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <motor_execute+0x22>
	_delay_us(555);
	PORTG&=~(1<<4);
 4ea:	80 91 65 00 	lds	r24, 0x0065
 4ee:	8f 7e       	andi	r24, 0xEF	; 239
 4f0:	80 93 65 00 	sts	0x0065, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4f4:	83 2f       	mov	r24, r19
 4f6:	8a 95       	dec	r24
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <motor_execute+0x32>
void motor_execute(void)
{
	unsigned char degree_exec;
	degree_exec=eeprom_read_byte(25);
	
	for(degree=0;degree<200;degree++)
 4fa:	80 91 0a 01 	lds	r24, 0x010A
 4fe:	8f 5f       	subi	r24, 0xFF	; 255
 500:	80 93 0a 01 	sts	0x010A, r24
 504:	80 91 0a 01 	lds	r24, 0x010A
 508:	88 3c       	cpi	r24, 0xC8	; 200
 50a:	38 f3       	brcs	.-50     	; 0x4da <motor_execute+0x16>
 50c:	09 c0       	rjmp	.+18     	; 0x520 <motor_execute+0x5c>
 50e:	8f ef       	ldi	r24, 0xFF	; 255
 510:	9f ef       	ldi	r25, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 512:	fa 01       	movw	r30, r20
 514:	31 97       	sbiw	r30, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <motor_execute+0x50>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 518:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 51a:	d9 f7       	brne	.-10     	; 0x512 <motor_execute+0x4e>
	_delay_us(5);
	}
	while(degree_exec<=120)
	{
	_delay_ms(24000);
	degree_exec++;
 51c:	2f 5f       	subi	r18, 0xFF	; 255
 51e:	02 c0       	rjmp	.+4      	; 0x524 <motor_execute+0x60>
 520:	40 e9       	ldi	r20, 0x90	; 144
 522:	51 e0       	ldi	r21, 0x01	; 1
	PORTG|=(1<<4);
	_delay_us(555);
	PORTG&=~(1<<4);
	_delay_us(5);
	}
	while(degree_exec<=120)
 524:	29 37       	cpi	r18, 0x79	; 121
 526:	98 f3       	brcs	.-26     	; 0x50e <motor_execute+0x4a>
		//chage motor_dir
		//degree_set=0;
		}
	}

}
 528:	08 95       	ret

0000052a <uart_tx_num>:
				uart_tx((*data++));


}
void uart_tx_num(int num)
{
 52a:	0f 93       	push	r16
 52c:	1f 93       	push	r17
 52e:	df 93       	push	r29
 530:	cf 93       	push	r28
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	2a 97       	sbiw	r28, 0x0a	; 10
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
unsigned char data[10];
sprintf(data,"%d",num);
 542:	00 d0       	rcall	.+0      	; 0x544 <uart_tx_num+0x1a>
 544:	00 d0       	rcall	.+0      	; 0x546 <uart_tx_num+0x1c>
 546:	00 d0       	rcall	.+0      	; 0x548 <uart_tx_num+0x1e>
 548:	ed b7       	in	r30, 0x3d	; 61
 54a:	fe b7       	in	r31, 0x3e	; 62
 54c:	31 96       	adiw	r30, 0x01	; 1
 54e:	8e 01       	movw	r16, r28
 550:	0f 5f       	subi	r16, 0xFF	; 255
 552:	1f 4f       	sbci	r17, 0xFF	; 255
 554:	ad b7       	in	r26, 0x3d	; 61
 556:	be b7       	in	r27, 0x3e	; 62
 558:	12 96       	adiw	r26, 0x02	; 2
 55a:	1c 93       	st	X, r17
 55c:	0e 93       	st	-X, r16
 55e:	11 97       	sbiw	r26, 0x01	; 1
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	31 e0       	ldi	r19, 0x01	; 1
 564:	33 83       	std	Z+3, r19	; 0x03
 566:	22 83       	std	Z+2, r18	; 0x02
 568:	95 83       	std	Z+5, r25	; 0x05
 56a:	84 83       	std	Z+4, r24	; 0x04
 56c:	0e 94 2e 03 	call	0x65c	; 0x65c <sprintf>
uart_str(data);
 570:	8d b7       	in	r24, 0x3d	; 61
 572:	9e b7       	in	r25, 0x3e	; 62
 574:	06 96       	adiw	r24, 0x06	; 6
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	9e bf       	out	0x3e, r25	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	8d bf       	out	0x3d, r24	; 61
 580:	c8 01       	movw	r24, r16
 582:	0e 94 6d 01 	call	0x2da	; 0x2da <uart_str>
}
 586:	2a 96       	adiw	r28, 0x0a	; 10
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	f8 94       	cli
 58c:	de bf       	out	0x3e, r29	; 62
 58e:	0f be       	out	0x3f, r0	; 63
 590:	cd bf       	out	0x3d, r28	; 61
 592:	cf 91       	pop	r28
 594:	df 91       	pop	r29
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	08 95       	ret

0000059c <lcd_num>:
			k++;
		}
}
void lcd_num(int num);
void lcd_num(int num)
{
 59c:	0f 93       	push	r16
 59e:	1f 93       	push	r17
 5a0:	df 93       	push	r29
 5a2:	cf 93       	push	r28
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
 5a8:	2a 97       	sbiw	r28, 0x0a	; 10
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	de bf       	out	0x3e, r29	; 62
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	cd bf       	out	0x3d, r28	; 61
unsigned char a[10];
sprintf(a,"%d",num);
 5b4:	00 d0       	rcall	.+0      	; 0x5b6 <lcd_num+0x1a>
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <lcd_num+0x1c>
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <lcd_num+0x1e>
 5ba:	ed b7       	in	r30, 0x3d	; 61
 5bc:	fe b7       	in	r31, 0x3e	; 62
 5be:	31 96       	adiw	r30, 0x01	; 1
 5c0:	8e 01       	movw	r16, r28
 5c2:	0f 5f       	subi	r16, 0xFF	; 255
 5c4:	1f 4f       	sbci	r17, 0xFF	; 255
 5c6:	ad b7       	in	r26, 0x3d	; 61
 5c8:	be b7       	in	r27, 0x3e	; 62
 5ca:	12 96       	adiw	r26, 0x02	; 2
 5cc:	1c 93       	st	X, r17
 5ce:	0e 93       	st	-X, r16
 5d0:	11 97       	sbiw	r26, 0x01	; 1
 5d2:	20 e0       	ldi	r18, 0x00	; 0
 5d4:	31 e0       	ldi	r19, 0x01	; 1
 5d6:	33 83       	std	Z+3, r19	; 0x03
 5d8:	22 83       	std	Z+2, r18	; 0x02
 5da:	95 83       	std	Z+5, r25	; 0x05
 5dc:	84 83       	std	Z+4, r24	; 0x04
 5de:	0e 94 2e 03 	call	0x65c	; 0x65c <sprintf>
lcd_string(a);
 5e2:	8d b7       	in	r24, 0x3d	; 61
 5e4:	9e b7       	in	r25, 0x3e	; 62
 5e6:	06 96       	adiw	r24, 0x06	; 6
 5e8:	0f b6       	in	r0, 0x3f	; 63
 5ea:	f8 94       	cli
 5ec:	9e bf       	out	0x3e, r25	; 62
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	8d bf       	out	0x3d, r24	; 61
 5f2:	c8 01       	movw	r24, r16
 5f4:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>


}
 5f8:	2a 96       	adiw	r28, 0x0a	; 10
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	f8 94       	cli
 5fe:	de bf       	out	0x3e, r29	; 62
 600:	0f be       	out	0x3f, r0	; 63
 602:	cd bf       	out	0x3d, r28	; 61
 604:	cf 91       	pop	r28
 606:	df 91       	pop	r29
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	08 95       	ret

0000060e <__divmodhi4>:
 60e:	97 fb       	bst	r25, 7
 610:	09 2e       	mov	r0, r25
 612:	07 26       	eor	r0, r23
 614:	0a d0       	rcall	.+20     	; 0x62a <__divmodhi4_neg1>
 616:	77 fd       	sbrc	r23, 7
 618:	04 d0       	rcall	.+8      	; 0x622 <__divmodhi4_neg2>
 61a:	0c d0       	rcall	.+24     	; 0x634 <__udivmodhi4>
 61c:	06 d0       	rcall	.+12     	; 0x62a <__divmodhi4_neg1>
 61e:	00 20       	and	r0, r0
 620:	1a f4       	brpl	.+6      	; 0x628 <__divmodhi4_exit>

00000622 <__divmodhi4_neg2>:
 622:	70 95       	com	r23
 624:	61 95       	neg	r22
 626:	7f 4f       	sbci	r23, 0xFF	; 255

00000628 <__divmodhi4_exit>:
 628:	08 95       	ret

0000062a <__divmodhi4_neg1>:
 62a:	f6 f7       	brtc	.-4      	; 0x628 <__divmodhi4_exit>
 62c:	90 95       	com	r25
 62e:	81 95       	neg	r24
 630:	9f 4f       	sbci	r25, 0xFF	; 255
 632:	08 95       	ret

00000634 <__udivmodhi4>:
 634:	aa 1b       	sub	r26, r26
 636:	bb 1b       	sub	r27, r27
 638:	51 e1       	ldi	r21, 0x11	; 17
 63a:	07 c0       	rjmp	.+14     	; 0x64a <__udivmodhi4_ep>

0000063c <__udivmodhi4_loop>:
 63c:	aa 1f       	adc	r26, r26
 63e:	bb 1f       	adc	r27, r27
 640:	a6 17       	cp	r26, r22
 642:	b7 07       	cpc	r27, r23
 644:	10 f0       	brcs	.+4      	; 0x64a <__udivmodhi4_ep>
 646:	a6 1b       	sub	r26, r22
 648:	b7 0b       	sbc	r27, r23

0000064a <__udivmodhi4_ep>:
 64a:	88 1f       	adc	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	5a 95       	dec	r21
 650:	a9 f7       	brne	.-22     	; 0x63c <__udivmodhi4_loop>
 652:	80 95       	com	r24
 654:	90 95       	com	r25
 656:	bc 01       	movw	r22, r24
 658:	cd 01       	movw	r24, r26
 65a:	08 95       	ret

0000065c <sprintf>:
 65c:	0f 93       	push	r16
 65e:	1f 93       	push	r17
 660:	df 93       	push	r29
 662:	cf 93       	push	r28
 664:	cd b7       	in	r28, 0x3d	; 61
 666:	de b7       	in	r29, 0x3e	; 62
 668:	2e 97       	sbiw	r28, 0x0e	; 14
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	f8 94       	cli
 66e:	de bf       	out	0x3e, r29	; 62
 670:	0f be       	out	0x3f, r0	; 63
 672:	cd bf       	out	0x3d, r28	; 61
 674:	0d 89       	ldd	r16, Y+21	; 0x15
 676:	1e 89       	ldd	r17, Y+22	; 0x16
 678:	86 e0       	ldi	r24, 0x06	; 6
 67a:	8c 83       	std	Y+4, r24	; 0x04
 67c:	1a 83       	std	Y+2, r17	; 0x02
 67e:	09 83       	std	Y+1, r16	; 0x01
 680:	8f ef       	ldi	r24, 0xFF	; 255
 682:	9f e7       	ldi	r25, 0x7F	; 127
 684:	9e 83       	std	Y+6, r25	; 0x06
 686:	8d 83       	std	Y+5, r24	; 0x05
 688:	9e 01       	movw	r18, r28
 68a:	27 5e       	subi	r18, 0xE7	; 231
 68c:	3f 4f       	sbci	r19, 0xFF	; 255
 68e:	ce 01       	movw	r24, r28
 690:	01 96       	adiw	r24, 0x01	; 1
 692:	6f 89       	ldd	r22, Y+23	; 0x17
 694:	78 8d       	ldd	r23, Y+24	; 0x18
 696:	a9 01       	movw	r20, r18
 698:	0e 94 5f 03 	call	0x6be	; 0x6be <vfprintf>
 69c:	2f 81       	ldd	r18, Y+7	; 0x07
 69e:	38 85       	ldd	r19, Y+8	; 0x08
 6a0:	02 0f       	add	r16, r18
 6a2:	13 1f       	adc	r17, r19
 6a4:	f8 01       	movw	r30, r16
 6a6:	10 82       	st	Z, r1
 6a8:	2e 96       	adiw	r28, 0x0e	; 14
 6aa:	0f b6       	in	r0, 0x3f	; 63
 6ac:	f8 94       	cli
 6ae:	de bf       	out	0x3e, r29	; 62
 6b0:	0f be       	out	0x3f, r0	; 63
 6b2:	cd bf       	out	0x3d, r28	; 61
 6b4:	cf 91       	pop	r28
 6b6:	df 91       	pop	r29
 6b8:	1f 91       	pop	r17
 6ba:	0f 91       	pop	r16
 6bc:	08 95       	ret

000006be <vfprintf>:
 6be:	2f 92       	push	r2
 6c0:	3f 92       	push	r3
 6c2:	4f 92       	push	r4
 6c4:	5f 92       	push	r5
 6c6:	6f 92       	push	r6
 6c8:	7f 92       	push	r7
 6ca:	8f 92       	push	r8
 6cc:	9f 92       	push	r9
 6ce:	af 92       	push	r10
 6d0:	bf 92       	push	r11
 6d2:	cf 92       	push	r12
 6d4:	df 92       	push	r13
 6d6:	ef 92       	push	r14
 6d8:	ff 92       	push	r15
 6da:	0f 93       	push	r16
 6dc:	1f 93       	push	r17
 6de:	df 93       	push	r29
 6e0:	cf 93       	push	r28
 6e2:	cd b7       	in	r28, 0x3d	; 61
 6e4:	de b7       	in	r29, 0x3e	; 62
 6e6:	2b 97       	sbiw	r28, 0x0b	; 11
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	f8 94       	cli
 6ec:	de bf       	out	0x3e, r29	; 62
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	cd bf       	out	0x3d, r28	; 61
 6f2:	3c 01       	movw	r6, r24
 6f4:	2b 01       	movw	r4, r22
 6f6:	5a 01       	movw	r10, r20
 6f8:	fc 01       	movw	r30, r24
 6fa:	17 82       	std	Z+7, r1	; 0x07
 6fc:	16 82       	std	Z+6, r1	; 0x06
 6fe:	83 81       	ldd	r24, Z+3	; 0x03
 700:	81 fd       	sbrc	r24, 1
 702:	03 c0       	rjmp	.+6      	; 0x70a <vfprintf+0x4c>
 704:	6f ef       	ldi	r22, 0xFF	; 255
 706:	7f ef       	ldi	r23, 0xFF	; 255
 708:	c6 c1       	rjmp	.+908    	; 0xa96 <vfprintf+0x3d8>
 70a:	9a e0       	ldi	r25, 0x0A	; 10
 70c:	89 2e       	mov	r8, r25
 70e:	1e 01       	movw	r2, r28
 710:	08 94       	sec
 712:	21 1c       	adc	r2, r1
 714:	31 1c       	adc	r3, r1
 716:	f3 01       	movw	r30, r6
 718:	23 81       	ldd	r18, Z+3	; 0x03
 71a:	f2 01       	movw	r30, r4
 71c:	23 fd       	sbrc	r18, 3
 71e:	85 91       	lpm	r24, Z+
 720:	23 ff       	sbrs	r18, 3
 722:	81 91       	ld	r24, Z+
 724:	2f 01       	movw	r4, r30
 726:	88 23       	and	r24, r24
 728:	09 f4       	brne	.+2      	; 0x72c <vfprintf+0x6e>
 72a:	b2 c1       	rjmp	.+868    	; 0xa90 <vfprintf+0x3d2>
 72c:	85 32       	cpi	r24, 0x25	; 37
 72e:	39 f4       	brne	.+14     	; 0x73e <vfprintf+0x80>
 730:	23 fd       	sbrc	r18, 3
 732:	85 91       	lpm	r24, Z+
 734:	23 ff       	sbrs	r18, 3
 736:	81 91       	ld	r24, Z+
 738:	2f 01       	movw	r4, r30
 73a:	85 32       	cpi	r24, 0x25	; 37
 73c:	29 f4       	brne	.+10     	; 0x748 <vfprintf+0x8a>
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	b3 01       	movw	r22, r6
 742:	0e 94 90 05 	call	0xb20	; 0xb20 <fputc>
 746:	e7 cf       	rjmp	.-50     	; 0x716 <vfprintf+0x58>
 748:	98 2f       	mov	r25, r24
 74a:	ff 24       	eor	r15, r15
 74c:	ee 24       	eor	r14, r14
 74e:	99 24       	eor	r9, r9
 750:	ff e1       	ldi	r31, 0x1F	; 31
 752:	ff 15       	cp	r31, r15
 754:	d0 f0       	brcs	.+52     	; 0x78a <vfprintf+0xcc>
 756:	9b 32       	cpi	r25, 0x2B	; 43
 758:	69 f0       	breq	.+26     	; 0x774 <vfprintf+0xb6>
 75a:	9c 32       	cpi	r25, 0x2C	; 44
 75c:	28 f4       	brcc	.+10     	; 0x768 <vfprintf+0xaa>
 75e:	90 32       	cpi	r25, 0x20	; 32
 760:	59 f0       	breq	.+22     	; 0x778 <vfprintf+0xba>
 762:	93 32       	cpi	r25, 0x23	; 35
 764:	91 f4       	brne	.+36     	; 0x78a <vfprintf+0xcc>
 766:	0e c0       	rjmp	.+28     	; 0x784 <vfprintf+0xc6>
 768:	9d 32       	cpi	r25, 0x2D	; 45
 76a:	49 f0       	breq	.+18     	; 0x77e <vfprintf+0xc0>
 76c:	90 33       	cpi	r25, 0x30	; 48
 76e:	69 f4       	brne	.+26     	; 0x78a <vfprintf+0xcc>
 770:	41 e0       	ldi	r20, 0x01	; 1
 772:	24 c0       	rjmp	.+72     	; 0x7bc <vfprintf+0xfe>
 774:	52 e0       	ldi	r21, 0x02	; 2
 776:	f5 2a       	or	r15, r21
 778:	84 e0       	ldi	r24, 0x04	; 4
 77a:	f8 2a       	or	r15, r24
 77c:	28 c0       	rjmp	.+80     	; 0x7ce <vfprintf+0x110>
 77e:	98 e0       	ldi	r25, 0x08	; 8
 780:	f9 2a       	or	r15, r25
 782:	25 c0       	rjmp	.+74     	; 0x7ce <vfprintf+0x110>
 784:	e0 e1       	ldi	r30, 0x10	; 16
 786:	fe 2a       	or	r15, r30
 788:	22 c0       	rjmp	.+68     	; 0x7ce <vfprintf+0x110>
 78a:	f7 fc       	sbrc	r15, 7
 78c:	29 c0       	rjmp	.+82     	; 0x7e0 <vfprintf+0x122>
 78e:	89 2f       	mov	r24, r25
 790:	80 53       	subi	r24, 0x30	; 48
 792:	8a 30       	cpi	r24, 0x0A	; 10
 794:	70 f4       	brcc	.+28     	; 0x7b2 <vfprintf+0xf4>
 796:	f6 fe       	sbrs	r15, 6
 798:	05 c0       	rjmp	.+10     	; 0x7a4 <vfprintf+0xe6>
 79a:	98 9c       	mul	r9, r8
 79c:	90 2c       	mov	r9, r0
 79e:	11 24       	eor	r1, r1
 7a0:	98 0e       	add	r9, r24
 7a2:	15 c0       	rjmp	.+42     	; 0x7ce <vfprintf+0x110>
 7a4:	e8 9c       	mul	r14, r8
 7a6:	e0 2c       	mov	r14, r0
 7a8:	11 24       	eor	r1, r1
 7aa:	e8 0e       	add	r14, r24
 7ac:	f0 e2       	ldi	r31, 0x20	; 32
 7ae:	ff 2a       	or	r15, r31
 7b0:	0e c0       	rjmp	.+28     	; 0x7ce <vfprintf+0x110>
 7b2:	9e 32       	cpi	r25, 0x2E	; 46
 7b4:	29 f4       	brne	.+10     	; 0x7c0 <vfprintf+0x102>
 7b6:	f6 fc       	sbrc	r15, 6
 7b8:	6b c1       	rjmp	.+726    	; 0xa90 <vfprintf+0x3d2>
 7ba:	40 e4       	ldi	r20, 0x40	; 64
 7bc:	f4 2a       	or	r15, r20
 7be:	07 c0       	rjmp	.+14     	; 0x7ce <vfprintf+0x110>
 7c0:	9c 36       	cpi	r25, 0x6C	; 108
 7c2:	19 f4       	brne	.+6      	; 0x7ca <vfprintf+0x10c>
 7c4:	50 e8       	ldi	r21, 0x80	; 128
 7c6:	f5 2a       	or	r15, r21
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <vfprintf+0x110>
 7ca:	98 36       	cpi	r25, 0x68	; 104
 7cc:	49 f4       	brne	.+18     	; 0x7e0 <vfprintf+0x122>
 7ce:	f2 01       	movw	r30, r4
 7d0:	23 fd       	sbrc	r18, 3
 7d2:	95 91       	lpm	r25, Z+
 7d4:	23 ff       	sbrs	r18, 3
 7d6:	91 91       	ld	r25, Z+
 7d8:	2f 01       	movw	r4, r30
 7da:	99 23       	and	r25, r25
 7dc:	09 f0       	breq	.+2      	; 0x7e0 <vfprintf+0x122>
 7de:	b8 cf       	rjmp	.-144    	; 0x750 <vfprintf+0x92>
 7e0:	89 2f       	mov	r24, r25
 7e2:	85 54       	subi	r24, 0x45	; 69
 7e4:	83 30       	cpi	r24, 0x03	; 3
 7e6:	18 f0       	brcs	.+6      	; 0x7ee <vfprintf+0x130>
 7e8:	80 52       	subi	r24, 0x20	; 32
 7ea:	83 30       	cpi	r24, 0x03	; 3
 7ec:	38 f4       	brcc	.+14     	; 0x7fc <vfprintf+0x13e>
 7ee:	44 e0       	ldi	r20, 0x04	; 4
 7f0:	50 e0       	ldi	r21, 0x00	; 0
 7f2:	a4 0e       	add	r10, r20
 7f4:	b5 1e       	adc	r11, r21
 7f6:	5f e3       	ldi	r21, 0x3F	; 63
 7f8:	59 83       	std	Y+1, r21	; 0x01
 7fa:	0f c0       	rjmp	.+30     	; 0x81a <vfprintf+0x15c>
 7fc:	93 36       	cpi	r25, 0x63	; 99
 7fe:	31 f0       	breq	.+12     	; 0x80c <vfprintf+0x14e>
 800:	93 37       	cpi	r25, 0x73	; 115
 802:	79 f0       	breq	.+30     	; 0x822 <vfprintf+0x164>
 804:	93 35       	cpi	r25, 0x53	; 83
 806:	09 f0       	breq	.+2      	; 0x80a <vfprintf+0x14c>
 808:	56 c0       	rjmp	.+172    	; 0x8b6 <vfprintf+0x1f8>
 80a:	20 c0       	rjmp	.+64     	; 0x84c <vfprintf+0x18e>
 80c:	f5 01       	movw	r30, r10
 80e:	80 81       	ld	r24, Z
 810:	89 83       	std	Y+1, r24	; 0x01
 812:	42 e0       	ldi	r20, 0x02	; 2
 814:	50 e0       	ldi	r21, 0x00	; 0
 816:	a4 0e       	add	r10, r20
 818:	b5 1e       	adc	r11, r21
 81a:	61 01       	movw	r12, r2
 81c:	01 e0       	ldi	r16, 0x01	; 1
 81e:	10 e0       	ldi	r17, 0x00	; 0
 820:	12 c0       	rjmp	.+36     	; 0x846 <vfprintf+0x188>
 822:	f5 01       	movw	r30, r10
 824:	c0 80       	ld	r12, Z
 826:	d1 80       	ldd	r13, Z+1	; 0x01
 828:	f6 fc       	sbrc	r15, 6
 82a:	03 c0       	rjmp	.+6      	; 0x832 <vfprintf+0x174>
 82c:	6f ef       	ldi	r22, 0xFF	; 255
 82e:	7f ef       	ldi	r23, 0xFF	; 255
 830:	02 c0       	rjmp	.+4      	; 0x836 <vfprintf+0x178>
 832:	69 2d       	mov	r22, r9
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	42 e0       	ldi	r20, 0x02	; 2
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	a4 0e       	add	r10, r20
 83c:	b5 1e       	adc	r11, r21
 83e:	c6 01       	movw	r24, r12
 840:	0e 94 85 05 	call	0xb0a	; 0xb0a <strnlen>
 844:	8c 01       	movw	r16, r24
 846:	5f e7       	ldi	r21, 0x7F	; 127
 848:	f5 22       	and	r15, r21
 84a:	14 c0       	rjmp	.+40     	; 0x874 <vfprintf+0x1b6>
 84c:	f5 01       	movw	r30, r10
 84e:	c0 80       	ld	r12, Z
 850:	d1 80       	ldd	r13, Z+1	; 0x01
 852:	f6 fc       	sbrc	r15, 6
 854:	03 c0       	rjmp	.+6      	; 0x85c <vfprintf+0x19e>
 856:	6f ef       	ldi	r22, 0xFF	; 255
 858:	7f ef       	ldi	r23, 0xFF	; 255
 85a:	02 c0       	rjmp	.+4      	; 0x860 <vfprintf+0x1a2>
 85c:	69 2d       	mov	r22, r9
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	42 e0       	ldi	r20, 0x02	; 2
 862:	50 e0       	ldi	r21, 0x00	; 0
 864:	a4 0e       	add	r10, r20
 866:	b5 1e       	adc	r11, r21
 868:	c6 01       	movw	r24, r12
 86a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <strnlen_P>
 86e:	8c 01       	movw	r16, r24
 870:	50 e8       	ldi	r21, 0x80	; 128
 872:	f5 2a       	or	r15, r21
 874:	f3 fe       	sbrs	r15, 3
 876:	07 c0       	rjmp	.+14     	; 0x886 <vfprintf+0x1c8>
 878:	1a c0       	rjmp	.+52     	; 0x8ae <vfprintf+0x1f0>
 87a:	80 e2       	ldi	r24, 0x20	; 32
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	b3 01       	movw	r22, r6
 880:	0e 94 90 05 	call	0xb20	; 0xb20 <fputc>
 884:	ea 94       	dec	r14
 886:	8e 2d       	mov	r24, r14
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	08 17       	cp	r16, r24
 88c:	19 07       	cpc	r17, r25
 88e:	a8 f3       	brcs	.-22     	; 0x87a <vfprintf+0x1bc>
 890:	0e c0       	rjmp	.+28     	; 0x8ae <vfprintf+0x1f0>
 892:	f6 01       	movw	r30, r12
 894:	f7 fc       	sbrc	r15, 7
 896:	85 91       	lpm	r24, Z+
 898:	f7 fe       	sbrs	r15, 7
 89a:	81 91       	ld	r24, Z+
 89c:	6f 01       	movw	r12, r30
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	b3 01       	movw	r22, r6
 8a2:	0e 94 90 05 	call	0xb20	; 0xb20 <fputc>
 8a6:	e1 10       	cpse	r14, r1
 8a8:	ea 94       	dec	r14
 8aa:	01 50       	subi	r16, 0x01	; 1
 8ac:	10 40       	sbci	r17, 0x00	; 0
 8ae:	01 15       	cp	r16, r1
 8b0:	11 05       	cpc	r17, r1
 8b2:	79 f7       	brne	.-34     	; 0x892 <vfprintf+0x1d4>
 8b4:	ea c0       	rjmp	.+468    	; 0xa8a <vfprintf+0x3cc>
 8b6:	94 36       	cpi	r25, 0x64	; 100
 8b8:	11 f0       	breq	.+4      	; 0x8be <vfprintf+0x200>
 8ba:	99 36       	cpi	r25, 0x69	; 105
 8bc:	69 f5       	brne	.+90     	; 0x918 <vfprintf+0x25a>
 8be:	f7 fe       	sbrs	r15, 7
 8c0:	08 c0       	rjmp	.+16     	; 0x8d2 <vfprintf+0x214>
 8c2:	f5 01       	movw	r30, r10
 8c4:	20 81       	ld	r18, Z
 8c6:	31 81       	ldd	r19, Z+1	; 0x01
 8c8:	42 81       	ldd	r20, Z+2	; 0x02
 8ca:	53 81       	ldd	r21, Z+3	; 0x03
 8cc:	84 e0       	ldi	r24, 0x04	; 4
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	0a c0       	rjmp	.+20     	; 0x8e6 <vfprintf+0x228>
 8d2:	f5 01       	movw	r30, r10
 8d4:	80 81       	ld	r24, Z
 8d6:	91 81       	ldd	r25, Z+1	; 0x01
 8d8:	9c 01       	movw	r18, r24
 8da:	44 27       	eor	r20, r20
 8dc:	37 fd       	sbrc	r19, 7
 8de:	40 95       	com	r20
 8e0:	54 2f       	mov	r21, r20
 8e2:	82 e0       	ldi	r24, 0x02	; 2
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	a8 0e       	add	r10, r24
 8e8:	b9 1e       	adc	r11, r25
 8ea:	9f e6       	ldi	r25, 0x6F	; 111
 8ec:	f9 22       	and	r15, r25
 8ee:	57 ff       	sbrs	r21, 7
 8f0:	09 c0       	rjmp	.+18     	; 0x904 <vfprintf+0x246>
 8f2:	50 95       	com	r21
 8f4:	40 95       	com	r20
 8f6:	30 95       	com	r19
 8f8:	21 95       	neg	r18
 8fa:	3f 4f       	sbci	r19, 0xFF	; 255
 8fc:	4f 4f       	sbci	r20, 0xFF	; 255
 8fe:	5f 4f       	sbci	r21, 0xFF	; 255
 900:	e0 e8       	ldi	r30, 0x80	; 128
 902:	fe 2a       	or	r15, r30
 904:	ca 01       	movw	r24, r20
 906:	b9 01       	movw	r22, r18
 908:	a1 01       	movw	r20, r2
 90a:	2a e0       	ldi	r18, 0x0A	; 10
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	0e 94 bc 05 	call	0xb78	; 0xb78 <__ultoa_invert>
 912:	d8 2e       	mov	r13, r24
 914:	d2 18       	sub	r13, r2
 916:	40 c0       	rjmp	.+128    	; 0x998 <vfprintf+0x2da>
 918:	95 37       	cpi	r25, 0x75	; 117
 91a:	29 f4       	brne	.+10     	; 0x926 <vfprintf+0x268>
 91c:	1f 2d       	mov	r17, r15
 91e:	1f 7e       	andi	r17, 0xEF	; 239
 920:	2a e0       	ldi	r18, 0x0A	; 10
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	1d c0       	rjmp	.+58     	; 0x960 <vfprintf+0x2a2>
 926:	1f 2d       	mov	r17, r15
 928:	19 7f       	andi	r17, 0xF9	; 249
 92a:	9f 36       	cpi	r25, 0x6F	; 111
 92c:	61 f0       	breq	.+24     	; 0x946 <vfprintf+0x288>
 92e:	90 37       	cpi	r25, 0x70	; 112
 930:	20 f4       	brcc	.+8      	; 0x93a <vfprintf+0x27c>
 932:	98 35       	cpi	r25, 0x58	; 88
 934:	09 f0       	breq	.+2      	; 0x938 <vfprintf+0x27a>
 936:	ac c0       	rjmp	.+344    	; 0xa90 <vfprintf+0x3d2>
 938:	0f c0       	rjmp	.+30     	; 0x958 <vfprintf+0x29a>
 93a:	90 37       	cpi	r25, 0x70	; 112
 93c:	39 f0       	breq	.+14     	; 0x94c <vfprintf+0x28e>
 93e:	98 37       	cpi	r25, 0x78	; 120
 940:	09 f0       	breq	.+2      	; 0x944 <vfprintf+0x286>
 942:	a6 c0       	rjmp	.+332    	; 0xa90 <vfprintf+0x3d2>
 944:	04 c0       	rjmp	.+8      	; 0x94e <vfprintf+0x290>
 946:	28 e0       	ldi	r18, 0x08	; 8
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	0a c0       	rjmp	.+20     	; 0x960 <vfprintf+0x2a2>
 94c:	10 61       	ori	r17, 0x10	; 16
 94e:	14 fd       	sbrc	r17, 4
 950:	14 60       	ori	r17, 0x04	; 4
 952:	20 e1       	ldi	r18, 0x10	; 16
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	04 c0       	rjmp	.+8      	; 0x960 <vfprintf+0x2a2>
 958:	14 fd       	sbrc	r17, 4
 95a:	16 60       	ori	r17, 0x06	; 6
 95c:	20 e1       	ldi	r18, 0x10	; 16
 95e:	32 e0       	ldi	r19, 0x02	; 2
 960:	17 ff       	sbrs	r17, 7
 962:	08 c0       	rjmp	.+16     	; 0x974 <vfprintf+0x2b6>
 964:	f5 01       	movw	r30, r10
 966:	60 81       	ld	r22, Z
 968:	71 81       	ldd	r23, Z+1	; 0x01
 96a:	82 81       	ldd	r24, Z+2	; 0x02
 96c:	93 81       	ldd	r25, Z+3	; 0x03
 96e:	44 e0       	ldi	r20, 0x04	; 4
 970:	50 e0       	ldi	r21, 0x00	; 0
 972:	08 c0       	rjmp	.+16     	; 0x984 <vfprintf+0x2c6>
 974:	f5 01       	movw	r30, r10
 976:	80 81       	ld	r24, Z
 978:	91 81       	ldd	r25, Z+1	; 0x01
 97a:	bc 01       	movw	r22, r24
 97c:	80 e0       	ldi	r24, 0x00	; 0
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	42 e0       	ldi	r20, 0x02	; 2
 982:	50 e0       	ldi	r21, 0x00	; 0
 984:	a4 0e       	add	r10, r20
 986:	b5 1e       	adc	r11, r21
 988:	a1 01       	movw	r20, r2
 98a:	0e 94 bc 05 	call	0xb78	; 0xb78 <__ultoa_invert>
 98e:	d8 2e       	mov	r13, r24
 990:	d2 18       	sub	r13, r2
 992:	8f e7       	ldi	r24, 0x7F	; 127
 994:	f8 2e       	mov	r15, r24
 996:	f1 22       	and	r15, r17
 998:	f6 fe       	sbrs	r15, 6
 99a:	0b c0       	rjmp	.+22     	; 0x9b2 <vfprintf+0x2f4>
 99c:	5e ef       	ldi	r21, 0xFE	; 254
 99e:	f5 22       	and	r15, r21
 9a0:	d9 14       	cp	r13, r9
 9a2:	38 f4       	brcc	.+14     	; 0x9b2 <vfprintf+0x2f4>
 9a4:	f4 fe       	sbrs	r15, 4
 9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <vfprintf+0x2f8>
 9a8:	f2 fc       	sbrc	r15, 2
 9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <vfprintf+0x2f8>
 9ac:	8f ee       	ldi	r24, 0xEF	; 239
 9ae:	f8 22       	and	r15, r24
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <vfprintf+0x2f8>
 9b2:	1d 2d       	mov	r17, r13
 9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <vfprintf+0x2fa>
 9b6:	19 2d       	mov	r17, r9
 9b8:	f4 fe       	sbrs	r15, 4
 9ba:	0d c0       	rjmp	.+26     	; 0x9d6 <vfprintf+0x318>
 9bc:	fe 01       	movw	r30, r28
 9be:	ed 0d       	add	r30, r13
 9c0:	f1 1d       	adc	r31, r1
 9c2:	80 81       	ld	r24, Z
 9c4:	80 33       	cpi	r24, 0x30	; 48
 9c6:	19 f4       	brne	.+6      	; 0x9ce <vfprintf+0x310>
 9c8:	99 ee       	ldi	r25, 0xE9	; 233
 9ca:	f9 22       	and	r15, r25
 9cc:	08 c0       	rjmp	.+16     	; 0x9de <vfprintf+0x320>
 9ce:	1f 5f       	subi	r17, 0xFF	; 255
 9d0:	f2 fe       	sbrs	r15, 2
 9d2:	05 c0       	rjmp	.+10     	; 0x9de <vfprintf+0x320>
 9d4:	03 c0       	rjmp	.+6      	; 0x9dc <vfprintf+0x31e>
 9d6:	8f 2d       	mov	r24, r15
 9d8:	86 78       	andi	r24, 0x86	; 134
 9da:	09 f0       	breq	.+2      	; 0x9de <vfprintf+0x320>
 9dc:	1f 5f       	subi	r17, 0xFF	; 255
 9de:	0f 2d       	mov	r16, r15
 9e0:	f3 fc       	sbrc	r15, 3
 9e2:	14 c0       	rjmp	.+40     	; 0xa0c <vfprintf+0x34e>
 9e4:	f0 fe       	sbrs	r15, 0
 9e6:	0f c0       	rjmp	.+30     	; 0xa06 <vfprintf+0x348>
 9e8:	1e 15       	cp	r17, r14
 9ea:	10 f0       	brcs	.+4      	; 0x9f0 <vfprintf+0x332>
 9ec:	9d 2c       	mov	r9, r13
 9ee:	0b c0       	rjmp	.+22     	; 0xa06 <vfprintf+0x348>
 9f0:	9d 2c       	mov	r9, r13
 9f2:	9e 0c       	add	r9, r14
 9f4:	91 1a       	sub	r9, r17
 9f6:	1e 2d       	mov	r17, r14
 9f8:	06 c0       	rjmp	.+12     	; 0xa06 <vfprintf+0x348>
 9fa:	80 e2       	ldi	r24, 0x20	; 32
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	b3 01       	movw	r22, r6
 a00:	0e 94 90 05 	call	0xb20	; 0xb20 <fputc>
 a04:	1f 5f       	subi	r17, 0xFF	; 255
 a06:	1e 15       	cp	r17, r14
 a08:	c0 f3       	brcs	.-16     	; 0x9fa <vfprintf+0x33c>
 a0a:	04 c0       	rjmp	.+8      	; 0xa14 <vfprintf+0x356>
 a0c:	1e 15       	cp	r17, r14
 a0e:	10 f4       	brcc	.+4      	; 0xa14 <vfprintf+0x356>
 a10:	e1 1a       	sub	r14, r17
 a12:	01 c0       	rjmp	.+2      	; 0xa16 <vfprintf+0x358>
 a14:	ee 24       	eor	r14, r14
 a16:	04 ff       	sbrs	r16, 4
 a18:	0f c0       	rjmp	.+30     	; 0xa38 <vfprintf+0x37a>
 a1a:	80 e3       	ldi	r24, 0x30	; 48
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	b3 01       	movw	r22, r6
 a20:	0e 94 90 05 	call	0xb20	; 0xb20 <fputc>
 a24:	02 ff       	sbrs	r16, 2
 a26:	1d c0       	rjmp	.+58     	; 0xa62 <vfprintf+0x3a4>
 a28:	01 fd       	sbrc	r16, 1
 a2a:	03 c0       	rjmp	.+6      	; 0xa32 <vfprintf+0x374>
 a2c:	88 e7       	ldi	r24, 0x78	; 120
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e c0       	rjmp	.+28     	; 0xa4e <vfprintf+0x390>
 a32:	88 e5       	ldi	r24, 0x58	; 88
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	0b c0       	rjmp	.+22     	; 0xa4e <vfprintf+0x390>
 a38:	80 2f       	mov	r24, r16
 a3a:	86 78       	andi	r24, 0x86	; 134
 a3c:	91 f0       	breq	.+36     	; 0xa62 <vfprintf+0x3a4>
 a3e:	01 ff       	sbrs	r16, 1
 a40:	02 c0       	rjmp	.+4      	; 0xa46 <vfprintf+0x388>
 a42:	8b e2       	ldi	r24, 0x2B	; 43
 a44:	01 c0       	rjmp	.+2      	; 0xa48 <vfprintf+0x38a>
 a46:	80 e2       	ldi	r24, 0x20	; 32
 a48:	f7 fc       	sbrc	r15, 7
 a4a:	8d e2       	ldi	r24, 0x2D	; 45
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	b3 01       	movw	r22, r6
 a50:	0e 94 90 05 	call	0xb20	; 0xb20 <fputc>
 a54:	06 c0       	rjmp	.+12     	; 0xa62 <vfprintf+0x3a4>
 a56:	80 e3       	ldi	r24, 0x30	; 48
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	b3 01       	movw	r22, r6
 a5c:	0e 94 90 05 	call	0xb20	; 0xb20 <fputc>
 a60:	9a 94       	dec	r9
 a62:	d9 14       	cp	r13, r9
 a64:	c0 f3       	brcs	.-16     	; 0xa56 <vfprintf+0x398>
 a66:	da 94       	dec	r13
 a68:	f1 01       	movw	r30, r2
 a6a:	ed 0d       	add	r30, r13
 a6c:	f1 1d       	adc	r31, r1
 a6e:	80 81       	ld	r24, Z
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	b3 01       	movw	r22, r6
 a74:	0e 94 90 05 	call	0xb20	; 0xb20 <fputc>
 a78:	dd 20       	and	r13, r13
 a7a:	a9 f7       	brne	.-22     	; 0xa66 <vfprintf+0x3a8>
 a7c:	06 c0       	rjmp	.+12     	; 0xa8a <vfprintf+0x3cc>
 a7e:	80 e2       	ldi	r24, 0x20	; 32
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	b3 01       	movw	r22, r6
 a84:	0e 94 90 05 	call	0xb20	; 0xb20 <fputc>
 a88:	ea 94       	dec	r14
 a8a:	ee 20       	and	r14, r14
 a8c:	c1 f7       	brne	.-16     	; 0xa7e <vfprintf+0x3c0>
 a8e:	43 ce       	rjmp	.-890    	; 0x716 <vfprintf+0x58>
 a90:	f3 01       	movw	r30, r6
 a92:	66 81       	ldd	r22, Z+6	; 0x06
 a94:	77 81       	ldd	r23, Z+7	; 0x07
 a96:	cb 01       	movw	r24, r22
 a98:	2b 96       	adiw	r28, 0x0b	; 11
 a9a:	0f b6       	in	r0, 0x3f	; 63
 a9c:	f8 94       	cli
 a9e:	de bf       	out	0x3e, r29	; 62
 aa0:	0f be       	out	0x3f, r0	; 63
 aa2:	cd bf       	out	0x3d, r28	; 61
 aa4:	cf 91       	pop	r28
 aa6:	df 91       	pop	r29
 aa8:	1f 91       	pop	r17
 aaa:	0f 91       	pop	r16
 aac:	ff 90       	pop	r15
 aae:	ef 90       	pop	r14
 ab0:	df 90       	pop	r13
 ab2:	cf 90       	pop	r12
 ab4:	bf 90       	pop	r11
 ab6:	af 90       	pop	r10
 ab8:	9f 90       	pop	r9
 aba:	8f 90       	pop	r8
 abc:	7f 90       	pop	r7
 abe:	6f 90       	pop	r6
 ac0:	5f 90       	pop	r5
 ac2:	4f 90       	pop	r4
 ac4:	3f 90       	pop	r3
 ac6:	2f 90       	pop	r2
 ac8:	08 95       	ret

00000aca <__eerd_byte_m128>:
 aca:	e1 99       	sbic	0x1c, 1	; 28
 acc:	fe cf       	rjmp	.-4      	; 0xaca <__eerd_byte_m128>
 ace:	9f bb       	out	0x1f, r25	; 31
 ad0:	8e bb       	out	0x1e, r24	; 30
 ad2:	e0 9a       	sbi	0x1c, 0	; 28
 ad4:	99 27       	eor	r25, r25
 ad6:	8d b3       	in	r24, 0x1d	; 29
 ad8:	08 95       	ret

00000ada <__eewr_byte_m128>:
 ada:	26 2f       	mov	r18, r22

00000adc <__eewr_r18_m128>:
 adc:	e1 99       	sbic	0x1c, 1	; 28
 ade:	fe cf       	rjmp	.-4      	; 0xadc <__eewr_r18_m128>
 ae0:	9f bb       	out	0x1f, r25	; 31
 ae2:	8e bb       	out	0x1e, r24	; 30
 ae4:	2d bb       	out	0x1d, r18	; 29
 ae6:	0f b6       	in	r0, 0x3f	; 63
 ae8:	f8 94       	cli
 aea:	e2 9a       	sbi	0x1c, 2	; 28
 aec:	e1 9a       	sbi	0x1c, 1	; 28
 aee:	0f be       	out	0x3f, r0	; 63
 af0:	01 96       	adiw	r24, 0x01	; 1
 af2:	08 95       	ret

00000af4 <strnlen_P>:
 af4:	fc 01       	movw	r30, r24
 af6:	05 90       	lpm	r0, Z+
 af8:	61 50       	subi	r22, 0x01	; 1
 afa:	70 40       	sbci	r23, 0x00	; 0
 afc:	01 10       	cpse	r0, r1
 afe:	d8 f7       	brcc	.-10     	; 0xaf6 <strnlen_P+0x2>
 b00:	80 95       	com	r24
 b02:	90 95       	com	r25
 b04:	8e 0f       	add	r24, r30
 b06:	9f 1f       	adc	r25, r31
 b08:	08 95       	ret

00000b0a <strnlen>:
 b0a:	fc 01       	movw	r30, r24
 b0c:	61 50       	subi	r22, 0x01	; 1
 b0e:	70 40       	sbci	r23, 0x00	; 0
 b10:	01 90       	ld	r0, Z+
 b12:	01 10       	cpse	r0, r1
 b14:	d8 f7       	brcc	.-10     	; 0xb0c <strnlen+0x2>
 b16:	80 95       	com	r24
 b18:	90 95       	com	r25
 b1a:	8e 0f       	add	r24, r30
 b1c:	9f 1f       	adc	r25, r31
 b1e:	08 95       	ret

00000b20 <fputc>:
 b20:	0f 93       	push	r16
 b22:	1f 93       	push	r17
 b24:	cf 93       	push	r28
 b26:	df 93       	push	r29
 b28:	8c 01       	movw	r16, r24
 b2a:	eb 01       	movw	r28, r22
 b2c:	8b 81       	ldd	r24, Y+3	; 0x03
 b2e:	81 ff       	sbrs	r24, 1
 b30:	1b c0       	rjmp	.+54     	; 0xb68 <fputc+0x48>
 b32:	82 ff       	sbrs	r24, 2
 b34:	0d c0       	rjmp	.+26     	; 0xb50 <fputc+0x30>
 b36:	2e 81       	ldd	r18, Y+6	; 0x06
 b38:	3f 81       	ldd	r19, Y+7	; 0x07
 b3a:	8c 81       	ldd	r24, Y+4	; 0x04
 b3c:	9d 81       	ldd	r25, Y+5	; 0x05
 b3e:	28 17       	cp	r18, r24
 b40:	39 07       	cpc	r19, r25
 b42:	64 f4       	brge	.+24     	; 0xb5c <fputc+0x3c>
 b44:	e8 81       	ld	r30, Y
 b46:	f9 81       	ldd	r31, Y+1	; 0x01
 b48:	01 93       	st	Z+, r16
 b4a:	f9 83       	std	Y+1, r31	; 0x01
 b4c:	e8 83       	st	Y, r30
 b4e:	06 c0       	rjmp	.+12     	; 0xb5c <fputc+0x3c>
 b50:	e8 85       	ldd	r30, Y+8	; 0x08
 b52:	f9 85       	ldd	r31, Y+9	; 0x09
 b54:	80 2f       	mov	r24, r16
 b56:	09 95       	icall
 b58:	89 2b       	or	r24, r25
 b5a:	31 f4       	brne	.+12     	; 0xb68 <fputc+0x48>
 b5c:	8e 81       	ldd	r24, Y+6	; 0x06
 b5e:	9f 81       	ldd	r25, Y+7	; 0x07
 b60:	01 96       	adiw	r24, 0x01	; 1
 b62:	9f 83       	std	Y+7, r25	; 0x07
 b64:	8e 83       	std	Y+6, r24	; 0x06
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <fputc+0x4c>
 b68:	0f ef       	ldi	r16, 0xFF	; 255
 b6a:	1f ef       	ldi	r17, 0xFF	; 255
 b6c:	c8 01       	movw	r24, r16
 b6e:	df 91       	pop	r29
 b70:	cf 91       	pop	r28
 b72:	1f 91       	pop	r17
 b74:	0f 91       	pop	r16
 b76:	08 95       	ret

00000b78 <__ultoa_invert>:
 b78:	fa 01       	movw	r30, r20
 b7a:	aa 27       	eor	r26, r26
 b7c:	28 30       	cpi	r18, 0x08	; 8
 b7e:	51 f1       	breq	.+84     	; 0xbd4 <__ultoa_invert+0x5c>
 b80:	20 31       	cpi	r18, 0x10	; 16
 b82:	81 f1       	breq	.+96     	; 0xbe4 <__ultoa_invert+0x6c>
 b84:	e8 94       	clt
 b86:	6f 93       	push	r22
 b88:	6e 7f       	andi	r22, 0xFE	; 254
 b8a:	6e 5f       	subi	r22, 0xFE	; 254
 b8c:	7f 4f       	sbci	r23, 0xFF	; 255
 b8e:	8f 4f       	sbci	r24, 0xFF	; 255
 b90:	9f 4f       	sbci	r25, 0xFF	; 255
 b92:	af 4f       	sbci	r26, 0xFF	; 255
 b94:	b1 e0       	ldi	r27, 0x01	; 1
 b96:	3e d0       	rcall	.+124    	; 0xc14 <__ultoa_invert+0x9c>
 b98:	b4 e0       	ldi	r27, 0x04	; 4
 b9a:	3c d0       	rcall	.+120    	; 0xc14 <__ultoa_invert+0x9c>
 b9c:	67 0f       	add	r22, r23
 b9e:	78 1f       	adc	r23, r24
 ba0:	89 1f       	adc	r24, r25
 ba2:	9a 1f       	adc	r25, r26
 ba4:	a1 1d       	adc	r26, r1
 ba6:	68 0f       	add	r22, r24
 ba8:	79 1f       	adc	r23, r25
 baa:	8a 1f       	adc	r24, r26
 bac:	91 1d       	adc	r25, r1
 bae:	a1 1d       	adc	r26, r1
 bb0:	6a 0f       	add	r22, r26
 bb2:	71 1d       	adc	r23, r1
 bb4:	81 1d       	adc	r24, r1
 bb6:	91 1d       	adc	r25, r1
 bb8:	a1 1d       	adc	r26, r1
 bba:	20 d0       	rcall	.+64     	; 0xbfc <__ultoa_invert+0x84>
 bbc:	09 f4       	brne	.+2      	; 0xbc0 <__ultoa_invert+0x48>
 bbe:	68 94       	set
 bc0:	3f 91       	pop	r19
 bc2:	2a e0       	ldi	r18, 0x0A	; 10
 bc4:	26 9f       	mul	r18, r22
 bc6:	11 24       	eor	r1, r1
 bc8:	30 19       	sub	r19, r0
 bca:	30 5d       	subi	r19, 0xD0	; 208
 bcc:	31 93       	st	Z+, r19
 bce:	de f6       	brtc	.-74     	; 0xb86 <__ultoa_invert+0xe>
 bd0:	cf 01       	movw	r24, r30
 bd2:	08 95       	ret
 bd4:	46 2f       	mov	r20, r22
 bd6:	47 70       	andi	r20, 0x07	; 7
 bd8:	40 5d       	subi	r20, 0xD0	; 208
 bda:	41 93       	st	Z+, r20
 bdc:	b3 e0       	ldi	r27, 0x03	; 3
 bde:	0f d0       	rcall	.+30     	; 0xbfe <__ultoa_invert+0x86>
 be0:	c9 f7       	brne	.-14     	; 0xbd4 <__ultoa_invert+0x5c>
 be2:	f6 cf       	rjmp	.-20     	; 0xbd0 <__ultoa_invert+0x58>
 be4:	46 2f       	mov	r20, r22
 be6:	4f 70       	andi	r20, 0x0F	; 15
 be8:	40 5d       	subi	r20, 0xD0	; 208
 bea:	4a 33       	cpi	r20, 0x3A	; 58
 bec:	18 f0       	brcs	.+6      	; 0xbf4 <__ultoa_invert+0x7c>
 bee:	49 5d       	subi	r20, 0xD9	; 217
 bf0:	31 fd       	sbrc	r19, 1
 bf2:	40 52       	subi	r20, 0x20	; 32
 bf4:	41 93       	st	Z+, r20
 bf6:	02 d0       	rcall	.+4      	; 0xbfc <__ultoa_invert+0x84>
 bf8:	a9 f7       	brne	.-22     	; 0xbe4 <__ultoa_invert+0x6c>
 bfa:	ea cf       	rjmp	.-44     	; 0xbd0 <__ultoa_invert+0x58>
 bfc:	b4 e0       	ldi	r27, 0x04	; 4
 bfe:	a6 95       	lsr	r26
 c00:	97 95       	ror	r25
 c02:	87 95       	ror	r24
 c04:	77 95       	ror	r23
 c06:	67 95       	ror	r22
 c08:	ba 95       	dec	r27
 c0a:	c9 f7       	brne	.-14     	; 0xbfe <__ultoa_invert+0x86>
 c0c:	00 97       	sbiw	r24, 0x00	; 0
 c0e:	61 05       	cpc	r22, r1
 c10:	71 05       	cpc	r23, r1
 c12:	08 95       	ret
 c14:	9b 01       	movw	r18, r22
 c16:	ac 01       	movw	r20, r24
 c18:	0a 2e       	mov	r0, r26
 c1a:	06 94       	lsr	r0
 c1c:	57 95       	ror	r21
 c1e:	47 95       	ror	r20
 c20:	37 95       	ror	r19
 c22:	27 95       	ror	r18
 c24:	ba 95       	dec	r27
 c26:	c9 f7       	brne	.-14     	; 0xc1a <__ultoa_invert+0xa2>
 c28:	62 0f       	add	r22, r18
 c2a:	73 1f       	adc	r23, r19
 c2c:	84 1f       	adc	r24, r20
 c2e:	95 1f       	adc	r25, r21
 c30:	a0 1d       	adc	r26, r0
 c32:	08 95       	ret

00000c34 <_exit>:
 c34:	f8 94       	cli

00000c36 <__stop_program>:
 c36:	ff cf       	rjmp	.-2      	; 0xc36 <__stop_program>
