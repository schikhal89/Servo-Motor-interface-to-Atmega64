
solution2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000f5c  00000ff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080011a  0080011a  0000100a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000235  00000000  00000000  0000102a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aff  00000000  00000000  0000125f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000027c  00000000  00000000  00001d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ad9  00000000  00000000  00001fda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  00002ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000293  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000410  00000000  00000000  00002f47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000420  00000000  00000000  00003357  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_5>
  18:	0c 94 15 03 	jmp	0x62a	; 0x62a <__vector_6>
  1c:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__vector_7>
  20:	0c 94 1b 04 	jmp	0x836	; 0x836 <__vector_8>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e5       	ldi	r30, 0x5C	; 92
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	aa e1       	ldi	r26, 0x1A	; 26
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 32       	cpi	r26, 0x21	; 33
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 f7 03 	call	0x7ee	; 0x7ee <main>
  c6:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <dely_ns>:
dely_ns(250);
CLEARBIT(PORTUSED,BIT(2));
}

void dely_ns(unsigned char tim)
{
  ce:	20 91 1a 01 	lds	r18, 0x011A
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <dely_ns+0xc>
	for(j=0;j<tim;j++)
  d6:	9f 5f       	subi	r25, 0xFF	; 255
  d8:	2a e0       	ldi	r18, 0x0A	; 10
  da:	98 17       	cp	r25, r24
  dc:	e0 f3       	brcs	.-8      	; 0xd6 <dely_ns+0x8>
  de:	20 93 1a 01 	sts	0x011A, r18
  e2:	90 93 1b 01 	sts	0x011B, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
  e6:	08 95       	ret

000000e8 <toggleE>:
		
}

void toggleE(void)
{
SETBIT(PORTUSED,BIT(2));
  e8:	da 9a       	sbi	0x1b, 2	; 27
dely_ns(250);
  ea:	8a ef       	ldi	r24, 0xFA	; 250
  ec:	0e 94 67 00 	call	0xce	; 0xce <dely_ns>
CLEARBIT(PORTUSED,BIT(2));
  f0:	da 98       	cbi	0x1b, 2	; 27
}
  f2:	08 95       	ret

000000f4 <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	08 2f       	mov	r16, r24
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	84 70       	andi	r24, 0x04	; 4
  fe:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=((cmd&0xF0));			
 100:	80 2f       	mov	r24, r16
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	8b bb       	out	0x1b, r24	; 27
	toggleE();
 106:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
	PORTUSED=(((cmd&(0x0F))*16));	
 10a:	10 e0       	ldi	r17, 0x00	; 0
 10c:	0f 70       	andi	r16, 0x0F	; 15
 10e:	10 70       	andi	r17, 0x00	; 0
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	00 0f       	add	r16, r16
 114:	11 1f       	adc	r17, r17
 116:	8a 95       	dec	r24
 118:	e1 f7       	brne	.-8      	; 0x112 <lcd_cmd+0x1e>
 11a:	0b bb       	out	0x1b, r16	; 27
	toggleE();
 11c:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
}
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	08 95       	ret

00000126 <lcd_putchar>:

void lcd_putchar(unsigned char sig)
{
 126:	1f 93       	push	r17
 128:	18 2f       	mov	r17, r24
		PORTUSED=0x01;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	8b bb       	out	0x1b, r24	; 27
		CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 12e:	8b b3       	in	r24, 0x1b	; 27
 130:	82 70       	andi	r24, 0x02	; 2
 132:	8b bb       	out	0x1b, r24	; 27
		PORTUSED=(sig&0xF0)|0x01;						
 134:	81 2f       	mov	r24, r17
 136:	80 7f       	andi	r24, 0xF0	; 240
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	8b bb       	out	0x1b, r24	; 27
		toggleE();
 13c:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
		PORTUSED=((sig&(0x0F))*16)|0x01;
 140:	12 95       	swap	r17
 142:	10 7f       	andi	r17, 0xF0	; 240
 144:	11 60       	ori	r17, 0x01	; 1
 146:	1b bb       	out	0x1b, r17	; 27
		toggleE();
 148:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
}
 14c:	1f 91       	pop	r17
 14e:	08 95       	ret

00000150 <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[32])
{
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTUSED=0x01;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	8b bb       	out	0x1b, r24	; 27
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 160:	8b b3       	in	r24, 0x1b	; 27
 162:	82 70       	andi	r24, 0x02	; 2
 164:	8b bb       	out	0x1b, r24	; 27
 166:	10 e0       	ldi	r17, 0x00	; 0
 168:	13 c0       	rjmp	.+38     	; 0x190 <lcd_string+0x40>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 16a:	10 31       	cpi	r17, 0x10	; 16
 16c:	19 f4       	brne	.+6      	; 0x174 <lcd_string+0x24>
				lcd_cmd(LINE2);
 16e:	80 ec       	ldi	r24, 0xC0	; 192
 170:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
			PORTUSED=((str[k])&0xF0)|0x01;
 174:	88 81       	ld	r24, Y
 176:	80 7f       	andi	r24, 0xF0	; 240
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 17c:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
 180:	88 81       	ld	r24, Y
 182:	82 95       	swap	r24
 184:	80 7f       	andi	r24, 0xF0	; 240
 186:	81 60       	ori	r24, 0x01	; 1
 188:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 18a:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
			k++;
 18e:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	PORTUSED=0x01;
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
 190:	e7 01       	movw	r28, r14
 192:	c1 0f       	add	r28, r17
 194:	d1 1d       	adc	r29, r1
 196:	88 81       	ld	r24, Y
 198:	88 23       	and	r24, r24
 19a:	39 f7       	brne	.-50     	; 0x16a <lcd_string+0x1a>
			toggleE();
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
		}
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	ff 90       	pop	r15
 1a4:	ef 90       	pop	r14
 1a6:	08 95       	ret

000001a8 <lcd_gotoxy1>:
	lcd_char(O+48);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 1a8:	80 58       	subi	r24, 0x80	; 128
 1aa:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
}
 1ae:	08 95       	ret

000001b0 <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 1b0:	80 54       	subi	r24, 0x40	; 64
 1b2:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
}
 1b6:	08 95       	ret

000001b8 <lcd_char>:
}

void lcd_char(unsigned char single)
{
	int i;
	if(single =='\t')
 1b8:	89 30       	cpi	r24, 0x09	; 9
 1ba:	21 f4       	brne	.+8      	; 0x1c4 <lcd_char+0xc>
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(single);
 1bc:	0e 94 93 00 	call	0x126	; 0x126 <lcd_putchar>
 1c0:	89 e0       	ldi	r24, 0x09	; 9
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <lcd_char+0x18>
		}
	}
	else if(single=='\n')
 1c4:	8a 30       	cpi	r24, 0x0A	; 10
 1c6:	21 f4       	brne	.+8      	; 0x1d0 <lcd_char+0x18>
	{
		lcd_gotoxy2(0);	
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
 1ce:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 1d0:	0e 94 93 00 	call	0x126	; 0x126 <lcd_putchar>
 1d4:	08 95       	ret

000001d6 <lcd_showvalue>:


}

void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 1d6:	df 92       	push	r13
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	08 2f       	mov	r16, r24
	unsigned char TH=0,H=0,T=0,O=0;
	TH=num/1000;
 1e2:	e8 2f       	mov	r30, r24
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
	H=(num-(TH*1000))/100;
 1e6:	cf 01       	movw	r24, r30
 1e8:	64 e6       	ldi	r22, 0x64	; 100
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	0e 94 99 04 	call	0x932	; 0x932 <__divmodhi4>
 1f0:	d6 2e       	mov	r13, r22
	T=(num - (H*100))/10;
 1f2:	26 2f       	mov	r18, r22
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	8c e9       	ldi	r24, 0x9C	; 156
 1f8:	9f ef       	ldi	r25, 0xFF	; 255
 1fa:	28 9f       	mul	r18, r24
 1fc:	70 01       	movw	r14, r0
 1fe:	29 9f       	mul	r18, r25
 200:	f0 0c       	add	r15, r0
 202:	38 9f       	mul	r19, r24
 204:	f0 0c       	add	r15, r0
 206:	11 24       	eor	r1, r1
 208:	c7 01       	movw	r24, r14
 20a:	8e 0f       	add	r24, r30
 20c:	9f 1f       	adc	r25, r31
 20e:	6a e0       	ldi	r22, 0x0A	; 10
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	0e 94 99 04 	call	0x932	; 0x932 <__divmodhi4>
 216:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(TH+48);
 218:	80 e3       	ldi	r24, 0x30	; 48
 21a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_char>
	lcd_char(H+48);
 21e:	8d 2d       	mov	r24, r13
 220:	80 5d       	subi	r24, 0xD0	; 208
 222:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_char>
	lcd_char(T+48);
 226:	81 2f       	mov	r24, r17
 228:	80 5d       	subi	r24, 0xD0	; 208
 22a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_char>
	lcd_char(O+48);
 22e:	00 5d       	subi	r16, 0xD0	; 208
 230:	0e 0d       	add	r16, r14
 232:	86 ef       	ldi	r24, 0xF6	; 246
 234:	9f ef       	ldi	r25, 0xFF	; 255
 236:	18 9f       	mul	r17, r24
 238:	10 2d       	mov	r17, r0
 23a:	11 24       	eor	r1, r1
 23c:	81 2f       	mov	r24, r17
 23e:	80 0f       	add	r24, r16
 240:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_char>
}
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	08 95       	ret

00000250 <lcd_exit>:
}
		

void lcd_exit(void)
{
	PORTUSED=save;
 250:	80 91 1c 01 	lds	r24, 0x011C
 254:	8b bb       	out	0x1b, r24	; 27
}
 256:	08 95       	ret

00000258 <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 258:	0a c0       	rjmp	.+20     	; 0x26e <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 25e:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 260:	2f 5f       	subi	r18, 0xFF	; 255
 262:	3f 4f       	sbci	r19, 0xFF	; 255
 264:	4c e0       	ldi	r20, 0x0C	; 12
 266:	2c 3c       	cpi	r18, 0xCC	; 204
 268:	34 07       	cpc	r19, r20
 26a:	c9 f7       	brne	.-14     	; 0x25e <WaitMs+0x6>
 26c:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	a1 f7       	brne	.-24     	; 0x25a <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 272:	08 95       	ret

00000274 <lcd_init>:
void WaitMs(unsigned int ms);


void lcd_init(void)	//init the lcd
{	
	save=PORTUSED;
 274:	8b b3       	in	r24, 0x1b	; 27
 276:	80 93 1c 01 	sts	0x011C, r24
	DDRUSED=0xFF;
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	8a bb       	out	0x1a, r24	; 26
	//DDRB=0xFF;
	WaitMs(15);
 27e:	8f e0       	ldi	r24, 0x0F	; 15
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 2c 01 	call	0x258	; 0x258 <WaitMs>
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
 286:	8b b3       	in	r24, 0x1b	; 27
 288:	84 70       	andi	r24, 0x04	; 4
 28a:	8b bb       	out	0x1b, r24	; 27
	//PORTUSED=0x20;
	lcd_cmd(0x01);
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
	lcd_cmd(0x0F);
 292:	8f e0       	ldi	r24, 0x0F	; 15
 294:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
	lcd_cmd(0x02);
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
	lcd_cmd(LINE1);
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
	WaitMs(15);
 2a4:	8f e0       	ldi	r24, 0x0F	; 15
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 2c 01 	call	0x258	; 0x258 <WaitMs>
		
}
 2ac:	08 95       	ret

000002ae <uart_init>:


void uart_init()
{
UBRR1L=103;
 2ae:	87 e6       	ldi	r24, 0x67	; 103
 2b0:	80 93 99 00 	sts	0x0099, r24
UCSR1A=(1<<3)|(1<<4);
 2b4:	88 e1       	ldi	r24, 0x18	; 24
 2b6:	80 93 9b 00 	sts	0x009B, r24
}
 2ba:	08 95       	ret

000002bc <uart_tx>:

void uart_tx(unsigned char data)
{
 2bc:	98 2f       	mov	r25, r24
while(!(UCSR1B&(1<<UDRE1)));
 2be:	80 91 9a 00 	lds	r24, 0x009A
 2c2:	85 ff       	sbrs	r24, 5
 2c4:	fc cf       	rjmp	.-8      	; 0x2be <uart_tx+0x2>
UDR1=data;
 2c6:	90 93 9c 00 	sts	0x009C, r25
}
 2ca:	08 95       	ret

000002cc <uart_rx>:

unsigned char uart_rx(void)
{
while(!(UCSR1B&(1<<RXC1)));
 2cc:	80 91 9a 00 	lds	r24, 0x009A
 2d0:	87 ff       	sbrs	r24, 7
 2d2:	fc cf       	rjmp	.-8      	; 0x2cc <uart_rx>
return UDR1;
 2d4:	80 91 9c 00 	lds	r24, 0x009C
}
 2d8:	08 95       	ret

000002da <uart_str>:


uart_str(unsigned char *data)
{
 2da:	fc 01       	movw	r30, r24
 2dc:	07 c0       	rjmp	.+14     	; 0x2ec <uart_str+0x12>
UCSR1A=(1<<3)|(1<<4);
}

void uart_tx(unsigned char data)
{
while(!(UCSR1B&(1<<UDRE1)));
 2de:	80 91 9a 00 	lds	r24, 0x009A
 2e2:	85 ff       	sbrs	r24, 5
 2e4:	fc cf       	rjmp	.-8      	; 0x2de <uart_str+0x4>


uart_str(unsigned char *data)
{
while((*data) != '\0')	/* print char from str pointer and point to next location */
				uart_tx((*data++));
 2e6:	31 96       	adiw	r30, 0x01	; 1
}

void uart_tx(unsigned char data)
{
while(!(UCSR1B&(1<<UDRE1)));
UDR1=data;
 2e8:	90 93 9c 00 	sts	0x009C, r25
}


uart_str(unsigned char *data)
{
while((*data) != '\0')	/* print char from str pointer and point to next location */
 2ec:	90 81       	ld	r25, Z
 2ee:	99 23       	and	r25, r25
 2f0:	b1 f7       	brne	.-20     	; 0x2de <uart_str+0x4>
				uart_tx((*data++));


}
 2f2:	08 95       	ret

000002f4 <motor_execute_test>:
}

void motor_execute_test(void)
{
	
	for(degree=0;degree<200;degree++)
 2f4:	10 92 20 01 	sts	0x0120, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2f8:	2c ea       	ldi	r18, 0xAC	; 172
 2fa:	38 e0       	ldi	r19, 0x08	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2fc:	4a e1       	ldi	r20, 0x1A	; 26
 2fe:	15 c0       	rjmp	.+42     	; 0x32a <motor_execute_test+0x36>
	{
	PORTG|=(1<<4);
 300:	80 91 65 00 	lds	r24, 0x0065
 304:	80 61       	ori	r24, 0x10	; 16
 306:	80 93 65 00 	sts	0x0065, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 30a:	c9 01       	movw	r24, r18
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <motor_execute_test+0x18>
	_delay_us(555);
	PORTG&=~(1<<4);
 310:	80 91 65 00 	lds	r24, 0x0065
 314:	8f 7e       	andi	r24, 0xEF	; 239
 316:	80 93 65 00 	sts	0x0065, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 31a:	84 2f       	mov	r24, r20
 31c:	8a 95       	dec	r24
 31e:	f1 f7       	brne	.-4      	; 0x31c <motor_execute_test+0x28>
}

void motor_execute_test(void)
{
	
	for(degree=0;degree<200;degree++)
 320:	80 91 20 01 	lds	r24, 0x0120
 324:	8f 5f       	subi	r24, 0xFF	; 255
 326:	80 93 20 01 	sts	0x0120, r24
 32a:	80 91 20 01 	lds	r24, 0x0120
 32e:	88 3c       	cpi	r24, 0xC8	; 200
 330:	38 f3       	brcs	.-50     	; 0x300 <motor_execute_test+0xc>
	_delay_us(555);
	PORTG&=~(1<<4);
	_delay_us(5);
	}
	
}
 332:	08 95       	ret

00000334 <motor_dir_cw>:


void motor_dir_cw(void)
{
 334:	88 e8       	ldi	r24, 0x88	; 136
 336:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 338:	20 e9       	ldi	r18, 0x90	; 144
 33a:	31 e0       	ldi	r19, 0x01	; 1
 33c:	f9 01       	movw	r30, r18
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <motor_dir_cw+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 342:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 344:	d9 f7       	brne	.-10     	; 0x33c <motor_dir_cw+0x8>
	//PORTG=0x00;
	_delay_ms(500);
	PORTG&=~(1<<0);
 346:	80 91 65 00 	lds	r24, 0x0065
 34a:	8e 7f       	andi	r24, 0xFE	; 254
 34c:	80 93 65 00 	sts	0x0065, r24
}
 350:	08 95       	ret

00000352 <motor_dir_ccw>:
void motor_dir_ccw(void)
{
 352:	88 e8       	ldi	r24, 0x88	; 136
 354:	93 e1       	ldi	r25, 0x13	; 19
 356:	20 e9       	ldi	r18, 0x90	; 144
 358:	31 e0       	ldi	r19, 0x01	; 1
 35a:	f9 01       	movw	r30, r18
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <motor_dir_ccw+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 360:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 362:	d9 f7       	brne	.-10     	; 0x35a <motor_dir_ccw+0x8>
	//PORTG=0x00;
	_delay_ms(500);
	PORTG|=(1<<0);
 364:	80 91 65 00 	lds	r24, 0x0065
 368:	81 60       	ori	r24, 0x01	; 1
 36a:	80 93 65 00 	sts	0x0065, r24
}
 36e:	08 95       	ret

00000370 <ext_timer_init>:
	}


void ext_timer_init()
{
EICRB=0x00;
 370:	1a be       	out	0x3a, r1	; 58
EIMSK|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 372:	89 b7       	in	r24, 0x39	; 57
 374:	80 6f       	ori	r24, 0xF0	; 240
 376:	89 bf       	out	0x39, r24	; 57
}
 378:	08 95       	ret

0000037a <intr_disable>:
void intr_disable()
{
EIMSK=0x00;
 37a:	19 be       	out	0x39, r1	; 57
}
 37c:	08 95       	ret

0000037e <uart_tx_num>:
void uart_tx_num(int num)
{
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	df 93       	push	r29
 384:	cf 93       	push	r28
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	2a 97       	sbiw	r28, 0x0a	; 10
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	f8 94       	cli
 390:	de bf       	out	0x3e, r29	; 62
 392:	0f be       	out	0x3f, r0	; 63
 394:	cd bf       	out	0x3d, r28	; 61
unsigned char data[10];
sprintf(data,"%d",num);
 396:	00 d0       	rcall	.+0      	; 0x398 <uart_tx_num+0x1a>
 398:	00 d0       	rcall	.+0      	; 0x39a <uart_tx_num+0x1c>
 39a:	00 d0       	rcall	.+0      	; 0x39c <uart_tx_num+0x1e>
 39c:	ed b7       	in	r30, 0x3d	; 61
 39e:	fe b7       	in	r31, 0x3e	; 62
 3a0:	31 96       	adiw	r30, 0x01	; 1
 3a2:	8e 01       	movw	r16, r28
 3a4:	0f 5f       	subi	r16, 0xFF	; 255
 3a6:	1f 4f       	sbci	r17, 0xFF	; 255
 3a8:	ad b7       	in	r26, 0x3d	; 61
 3aa:	be b7       	in	r27, 0x3e	; 62
 3ac:	12 96       	adiw	r26, 0x02	; 2
 3ae:	1c 93       	st	X, r17
 3b0:	0e 93       	st	-X, r16
 3b2:	11 97       	sbiw	r26, 0x01	; 1
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	31 e0       	ldi	r19, 0x01	; 1
 3b8:	33 83       	std	Z+3, r19	; 0x03
 3ba:	22 83       	std	Z+2, r18	; 0x02
 3bc:	95 83       	std	Z+5, r25	; 0x05
 3be:	84 83       	std	Z+4, r24	; 0x04
 3c0:	0e 94 c0 04 	call	0x980	; 0x980 <sprintf>
uart_str(data);
 3c4:	8d b7       	in	r24, 0x3d	; 61
 3c6:	9e b7       	in	r25, 0x3e	; 62
 3c8:	06 96       	adiw	r24, 0x06	; 6
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	f8 94       	cli
 3ce:	9e bf       	out	0x3e, r25	; 62
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	8d bf       	out	0x3d, r24	; 61
 3d4:	c8 01       	movw	r24, r16
 3d6:	0e 94 6d 01 	call	0x2da	; 0x2da <uart_str>
}
 3da:	2a 96       	adiw	r28, 0x0a	; 10
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
 3e6:	cf 91       	pop	r28
 3e8:	df 91       	pop	r29
 3ea:	1f 91       	pop	r17
 3ec:	0f 91       	pop	r16
 3ee:	08 95       	ret

000003f0 <lcd_num>:
			k++;
		}
}
void lcd_num(int num);
void lcd_num(int num)
{
 3f0:	0f 93       	push	r16
 3f2:	1f 93       	push	r17
 3f4:	df 93       	push	r29
 3f6:	cf 93       	push	r28
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
 3fc:	2a 97       	sbiw	r28, 0x0a	; 10
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	f8 94       	cli
 402:	de bf       	out	0x3e, r29	; 62
 404:	0f be       	out	0x3f, r0	; 63
 406:	cd bf       	out	0x3d, r28	; 61
unsigned char a[10];
sprintf(a,"%d",num);
 408:	00 d0       	rcall	.+0      	; 0x40a <lcd_num+0x1a>
 40a:	00 d0       	rcall	.+0      	; 0x40c <lcd_num+0x1c>
 40c:	00 d0       	rcall	.+0      	; 0x40e <lcd_num+0x1e>
 40e:	ed b7       	in	r30, 0x3d	; 61
 410:	fe b7       	in	r31, 0x3e	; 62
 412:	31 96       	adiw	r30, 0x01	; 1
 414:	8e 01       	movw	r16, r28
 416:	0f 5f       	subi	r16, 0xFF	; 255
 418:	1f 4f       	sbci	r17, 0xFF	; 255
 41a:	ad b7       	in	r26, 0x3d	; 61
 41c:	be b7       	in	r27, 0x3e	; 62
 41e:	12 96       	adiw	r26, 0x02	; 2
 420:	1c 93       	st	X, r17
 422:	0e 93       	st	-X, r16
 424:	11 97       	sbiw	r26, 0x01	; 1
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	31 e0       	ldi	r19, 0x01	; 1
 42a:	33 83       	std	Z+3, r19	; 0x03
 42c:	22 83       	std	Z+2, r18	; 0x02
 42e:	95 83       	std	Z+5, r25	; 0x05
 430:	84 83       	std	Z+4, r24	; 0x04
 432:	0e 94 c0 04 	call	0x980	; 0x980 <sprintf>
lcd_string(a);
 436:	8d b7       	in	r24, 0x3d	; 61
 438:	9e b7       	in	r25, 0x3e	; 62
 43a:	06 96       	adiw	r24, 0x06	; 6
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	9e bf       	out	0x3e, r25	; 62
 442:	0f be       	out	0x3f, r0	; 63
 444:	8d bf       	out	0x3d, r24	; 61
 446:	c8 01       	movw	r24, r16
 448:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>


}
 44c:	2a 96       	adiw	r28, 0x0a	; 10
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	f8 94       	cli
 452:	de bf       	out	0x3e, r29	; 62
 454:	0f be       	out	0x3f, r0	; 63
 456:	cd bf       	out	0x3d, r28	; 61
 458:	cf 91       	pop	r28
 45a:	df 91       	pop	r29
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	08 95       	ret

00000462 <align_ccw>:

}

void align_ccw(void)
	{
		clockwise=0;
 462:	10 92 1e 01 	sts	0x011E, r1
	counterwise=1;
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	80 93 1f 01 	sts	0x011F, r24
	PORTG=0x00;
 46c:	10 92 65 00 	sts	0x0065, r1
	PORTG|=(1<<0);
 470:	80 91 65 00 	lds	r24, 0x0065
 474:	81 60       	ori	r24, 0x01	; 1
 476:	80 93 65 00 	sts	0x0065, r24

	unsigned char degree;
	PORTC=0x02;
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	85 bb       	out	0x15, r24	; 21
	degree_set_new=eeprom_read_byte(25);
 47e:	89 e1       	ldi	r24, 0x19	; 25
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 f7 06 	call	0xdee	; 0xdee <__eerd_byte_m128>
 486:	80 93 1d 01 	sts	0x011D, r24
    if(degree_set_new>1)     
 48a:	80 91 1d 01 	lds	r24, 0x011D
 48e:	82 30       	cpi	r24, 0x02	; 2
 490:	68 f1       	brcs	.+90     	; 0x4ec <align_ccw+0x8a>
 492:	20 e0       	ldi	r18, 0x00	; 0
	{	

		for(degree=0;degree<50;degree++)
		{
		PORTC=0xff;
 494:	6f ef       	ldi	r22, 0xFF	; 255
 496:	4c ea       	ldi	r20, 0xAC	; 172
 498:	58 e0       	ldi	r21, 0x08	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 49a:	3a e1       	ldi	r19, 0x1A	; 26
 49c:	65 bb       	out	0x15, r22	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 49e:	ca 01       	movw	r24, r20
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <align_ccw+0x3e>
		_delay_us(555);
		PORTG|=(1<<4);
 4a4:	80 91 65 00 	lds	r24, 0x0065
 4a8:	80 61       	ori	r24, 0x10	; 16
 4aa:	80 93 65 00 	sts	0x0065, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4ae:	83 2f       	mov	r24, r19
 4b0:	8a 95       	dec	r24
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <align_ccw+0x4e>
		_delay_us(5);
		PORTG&=~(1<<4);
 4b4:	80 91 65 00 	lds	r24, 0x0065
 4b8:	8f 7e       	andi	r24, 0xEF	; 239
 4ba:	80 93 65 00 	sts	0x0065, r24
	PORTC=0x02;
	degree_set_new=eeprom_read_byte(25);
    if(degree_set_new>1)     
	{	

		for(degree=0;degree<50;degree++)
 4be:	2f 5f       	subi	r18, 0xFF	; 255
 4c0:	22 33       	cpi	r18, 0x32	; 50
 4c2:	61 f7       	brne	.-40     	; 0x49c <align_ccw+0x3a>
		_delay_us(555);
		PORTG|=(1<<4);
		_delay_us(5);
		PORTG&=~(1<<4);
		}
	degree_set_new--;
 4c4:	80 91 1d 01 	lds	r24, 0x011D
 4c8:	81 50       	subi	r24, 0x01	; 1
 4ca:	80 93 1d 01 	sts	0x011D, r24
	eeprom_write_byte(25,degree_set_new);
 4ce:	60 91 1d 01 	lds	r22, 0x011D
 4d2:	89 e1       	ldi	r24, 0x19	; 25
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__eewr_byte_m128>
 4da:	88 eb       	ldi	r24, 0xB8	; 184
 4dc:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4de:	20 e9       	ldi	r18, 0x90	; 144
 4e0:	31 e0       	ldi	r19, 0x01	; 1
 4e2:	f9 01       	movw	r30, r18
 4e4:	31 97       	sbiw	r30, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <align_ccw+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4ea:	d9 f7       	brne	.-10     	; 0x4e2 <align_ccw+0x80>
	_delay_ms(300);
	}
	lcd_gotoxy1(5);
 4ec:	85 e0       	ldi	r24, 0x05	; 5
 4ee:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy1>
	lcd_string("    ");
 4f2:	83 e0       	ldi	r24, 0x03	; 3
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
	lcd_gotoxy1(0);
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy1>
	lcd_string("CCW=");
 500:	88 e0       	ldi	r24, 0x08	; 8
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
	lcd_num(degree_set_new);
 508:	80 91 1d 01 	lds	r24, 0x011D
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_num>
//main();
	}
 512:	08 95       	ret

00000514 <__vector_5>:
volatile unsigned char seconds=1;

unsigned char clockwise;
	unsigned char counterwise;
ISR(INT4_vect) //CCW
{  
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	0b b6       	in	r0, 0x3b	; 59
 51e:	0f 92       	push	r0
 520:	11 24       	eor	r1, r1
 522:	2f 93       	push	r18
 524:	3f 93       	push	r19
 526:	4f 93       	push	r20
 528:	5f 93       	push	r21
 52a:	6f 93       	push	r22
 52c:	7f 93       	push	r23
 52e:	8f 93       	push	r24
 530:	9f 93       	push	r25
 532:	af 93       	push	r26
 534:	bf 93       	push	r27
 536:	ef 93       	push	r30
 538:	ff 93       	push	r31
 53a:	88 e8       	ldi	r24, 0x88	; 136
 53c:	93 e1       	ldi	r25, 0x13	; 19
 53e:	20 e9       	ldi	r18, 0x90	; 144
 540:	31 e0       	ldi	r19, 0x01	; 1
 542:	f9 01       	movw	r30, r18
 544:	31 97       	sbiw	r30, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <__vector_5+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 548:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 54a:	d9 f7       	brne	.-10     	; 0x542 <__vector_5+0x2e>

	_delay_ms(500);
	align_ccw();
 54c:	0e 94 31 02 	call	0x462	; 0x462 <align_ccw>

}
 550:	ff 91       	pop	r31
 552:	ef 91       	pop	r30
 554:	bf 91       	pop	r27
 556:	af 91       	pop	r26
 558:	9f 91       	pop	r25
 55a:	8f 91       	pop	r24
 55c:	7f 91       	pop	r23
 55e:	6f 91       	pop	r22
 560:	5f 91       	pop	r21
 562:	4f 91       	pop	r20
 564:	3f 91       	pop	r19
 566:	2f 91       	pop	r18
 568:	0f 90       	pop	r0
 56a:	0b be       	out	0x3b, r0	; 59
 56c:	0f 90       	pop	r0
 56e:	0f be       	out	0x3f, r0	; 63
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <align_cw>:
	PORTG|=(1<<0);
}

void align_cw(void)
{
	PORTG=0x00;
 576:	10 92 65 00 	sts	0x0065, r1
	clockwise=1;
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	90 93 1e 01 	sts	0x011E, r25
	counterwise=0;
 580:	10 92 1f 01 	sts	0x011F, r1
	PORTG&=~(1<<0);
 584:	80 91 65 00 	lds	r24, 0x0065
 588:	8e 7f       	andi	r24, 0xFE	; 254
 58a:	80 93 65 00 	sts	0x0065, r24
	PORTC=0x01;
 58e:	95 bb       	out	0x15, r25	; 21

	unsigned char degree;
	degree_set_new=eeprom_read_byte(25);
 590:	89 e1       	ldi	r24, 0x19	; 25
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 f7 06 	call	0xdee	; 0xdee <__eerd_byte_m128>
 598:	80 93 1d 01 	sts	0x011D, r24
    if(degree_set_new<12)      // keeping 120 in mind
 59c:	80 91 1d 01 	lds	r24, 0x011D
 5a0:	8c 30       	cpi	r24, 0x0C	; 12
 5a2:	68 f5       	brcc	.+90     	; 0x5fe <align_cw+0x88>
 5a4:	20 e0       	ldi	r18, 0x00	; 0
	{
		for(degree=0;degree<50;degree++)
		{
		PORTC=0xff;
 5a6:	6f ef       	ldi	r22, 0xFF	; 255
 5a8:	4c ea       	ldi	r20, 0xAC	; 172
 5aa:	58 e0       	ldi	r21, 0x08	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5ac:	3a e1       	ldi	r19, 0x1A	; 26
 5ae:	65 bb       	out	0x15, r22	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5b0:	ca 01       	movw	r24, r20
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <align_cw+0x3c>
		_delay_us(555);
		PORTG|=(1<<4);
 5b6:	80 91 65 00 	lds	r24, 0x0065
 5ba:	80 61       	ori	r24, 0x10	; 16
 5bc:	80 93 65 00 	sts	0x0065, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5c0:	83 2f       	mov	r24, r19
 5c2:	8a 95       	dec	r24
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <align_cw+0x4c>
		_delay_us(5);
		PORTG&=~(1<<4);
 5c6:	80 91 65 00 	lds	r24, 0x0065
 5ca:	8f 7e       	andi	r24, 0xEF	; 239
 5cc:	80 93 65 00 	sts	0x0065, r24

	unsigned char degree;
	degree_set_new=eeprom_read_byte(25);
    if(degree_set_new<12)      // keeping 120 in mind
	{
		for(degree=0;degree<50;degree++)
 5d0:	2f 5f       	subi	r18, 0xFF	; 255
 5d2:	22 33       	cpi	r18, 0x32	; 50
 5d4:	61 f7       	brne	.-40     	; 0x5ae <align_cw+0x38>
		_delay_us(555);
		PORTG|=(1<<4);
		_delay_us(5);
		PORTG&=~(1<<4);
		}
	degree_set_new++;
 5d6:	80 91 1d 01 	lds	r24, 0x011D
 5da:	8f 5f       	subi	r24, 0xFF	; 255
 5dc:	80 93 1d 01 	sts	0x011D, r24
	eeprom_write_byte(25,degree_set_new);
 5e0:	60 91 1d 01 	lds	r22, 0x011D
 5e4:	89 e1       	ldi	r24, 0x19	; 25
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__eewr_byte_m128>
 5ec:	88 eb       	ldi	r24, 0xB8	; 184
 5ee:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5f0:	20 e9       	ldi	r18, 0x90	; 144
 5f2:	31 e0       	ldi	r19, 0x01	; 1
 5f4:	f9 01       	movw	r30, r18
 5f6:	31 97       	sbiw	r30, 0x01	; 1
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <align_cw+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5fc:	d9 f7       	brne	.-10     	; 0x5f4 <align_cw+0x7e>
	_delay_ms(300);
	}
	lcd_gotoxy2(5);
 5fe:	85 e0       	ldi	r24, 0x05	; 5
 600:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
	lcd_string("    ");
 604:	83 e0       	ldi	r24, 0x03	; 3
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
	lcd_gotoxy2(0);
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
	lcd_string("CW=");
 612:	8d e0       	ldi	r24, 0x0D	; 13
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
	lcd_num(eeprom_read_byte(25));
 61a:	89 e1       	ldi	r24, 0x19	; 25
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 f7 06 	call	0xdee	; 0xdee <__eerd_byte_m128>
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_num>

//main();

}
 628:	08 95       	ret

0000062a <__vector_6>:
	align_ccw();

}

ISR(INT5_vect) // CW
{	_delay_ms(500);
 62a:	1f 92       	push	r1
 62c:	0f 92       	push	r0
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	0f 92       	push	r0
 632:	0b b6       	in	r0, 0x3b	; 59
 634:	0f 92       	push	r0
 636:	11 24       	eor	r1, r1
 638:	2f 93       	push	r18
 63a:	3f 93       	push	r19
 63c:	4f 93       	push	r20
 63e:	5f 93       	push	r21
 640:	6f 93       	push	r22
 642:	7f 93       	push	r23
 644:	8f 93       	push	r24
 646:	9f 93       	push	r25
 648:	af 93       	push	r26
 64a:	bf 93       	push	r27
 64c:	ef 93       	push	r30
 64e:	ff 93       	push	r31
 650:	88 e8       	ldi	r24, 0x88	; 136
 652:	93 e1       	ldi	r25, 0x13	; 19
 654:	20 e9       	ldi	r18, 0x90	; 144
 656:	31 e0       	ldi	r19, 0x01	; 1
 658:	f9 01       	movw	r30, r18
 65a:	31 97       	sbiw	r30, 0x01	; 1
 65c:	f1 f7       	brne	.-4      	; 0x65a <__vector_6+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 65e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 660:	d9 f7       	brne	.-10     	; 0x658 <__vector_6+0x2e>
	align_cw();
 662:	0e 94 bb 02 	call	0x576	; 0x576 <align_cw>
 }
 666:	ff 91       	pop	r31
 668:	ef 91       	pop	r30
 66a:	bf 91       	pop	r27
 66c:	af 91       	pop	r26
 66e:	9f 91       	pop	r25
 670:	8f 91       	pop	r24
 672:	7f 91       	pop	r23
 674:	6f 91       	pop	r22
 676:	5f 91       	pop	r21
 678:	4f 91       	pop	r20
 67a:	3f 91       	pop	r19
 67c:	2f 91       	pop	r18
 67e:	0f 90       	pop	r0
 680:	0b be       	out	0x3b, r0	; 59
 682:	0f 90       	pop	r0
 684:	0f be       	out	0x3f, r0	; 63
 686:	0f 90       	pop	r0
 688:	1f 90       	pop	r1
 68a:	18 95       	reti

0000068c <motor_execute>:
	lcd_num(eeprom_read_byte(25));
	

	}
void motor_execute(void)
{//cli();
 68c:	ef 92       	push	r14
 68e:	ff 92       	push	r15
 690:	0f 93       	push	r16
 692:	1f 93       	push	r17
 694:	cf 93       	push	r28
 696:	df 93       	push	r29
	unsigned char degree_exec;
	unsigned char degree_exec_ccw;
	
	unsigned char variance;
	
	degree_set_new=eeprom_read_byte(25);
 698:	89 e1       	ldi	r24, 0x19	; 25
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 f7 06 	call	0xdee	; 0xdee <__eerd_byte_m128>
 6a0:	80 93 1d 01 	sts	0x011D, r24
	lcd_num(degree_set_new);
	degree_exec=10-degree_set_new;
	PORTC=0xaf;*/
    for(;degree_set_new<13;) // replace 12 for 120deg
    	{
        PORTC=0x33;
 6a4:	33 e3       	ldi	r19, 0x33	; 51
 6a6:	e3 2e       	mov	r14, r19
 6a8:	0c ea       	ldi	r16, 0xAC	; 172
 6aa:	18 e0       	ldi	r17, 0x08	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 6ac:	2a e1       	ldi	r18, 0x1A	; 26
 6ae:	f2 2e       	mov	r15, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6b0:	c0 e8       	ldi	r28, 0x80	; 128
 6b2:	de e3       	ldi	r29, 0x3E	; 62
 6b4:	40 c0       	rjmp	.+128    	; 0x736 <motor_execute+0xaa>
 6b6:	e5 ba       	out	0x15, r14	; 21
        motor_dir_cw();
 6b8:	0e 94 9a 01 	call	0x334	; 0x334 <motor_dir_cw>
		
        for(degree=0;degree<50;degree++)
 6bc:	10 92 20 01 	sts	0x0120, r1
 6c0:	16 c0       	rjmp	.+44     	; 0x6ee <motor_execute+0x62>
            {
			cli();
 6c2:	f8 94       	cli
            PORTG|=(1<<4);
 6c4:	80 91 65 00 	lds	r24, 0x0065
 6c8:	80 61       	ori	r24, 0x10	; 16
 6ca:	80 93 65 00 	sts	0x0065, r24
 6ce:	c8 01       	movw	r24, r16
 6d0:	01 97       	sbiw	r24, 0x01	; 1
 6d2:	f1 f7       	brne	.-4      	; 0x6d0 <motor_execute+0x44>
            _delay_us(555);
            PORTG&=~(1<<4);
 6d4:	80 91 65 00 	lds	r24, 0x0065
 6d8:	8f 7e       	andi	r24, 0xEF	; 239
 6da:	80 93 65 00 	sts	0x0065, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 6de:	8f 2d       	mov	r24, r15
 6e0:	8a 95       	dec	r24
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <motor_execute+0x54>
    for(;degree_set_new<13;) // replace 12 for 120deg
    	{
        PORTC=0x33;
        motor_dir_cw();
		
        for(degree=0;degree<50;degree++)
 6e4:	80 91 20 01 	lds	r24, 0x0120
 6e8:	8f 5f       	subi	r24, 0xFF	; 255
 6ea:	80 93 20 01 	sts	0x0120, r24
 6ee:	80 91 20 01 	lds	r24, 0x0120
 6f2:	82 33       	cpi	r24, 0x32	; 50
 6f4:	30 f3       	brcs	.-52     	; 0x6c2 <motor_execute+0x36>
            _delay_us(555);
            PORTG&=~(1<<4);
            _delay_us(5);
			
            }
            degree_set_new++;
 6f6:	80 91 1d 01 	lds	r24, 0x011D
 6fa:	8f 5f       	subi	r24, 0xFF	; 255
 6fc:	80 93 1d 01 	sts	0x011D, r24
            eeprom_write_byte(25,degree_set_new);
 700:	60 91 1d 01 	lds	r22, 0x011D
 704:	89 e1       	ldi	r24, 0x19	; 25
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__eewr_byte_m128>
             
             sei();
 70c:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 70e:	ce 01       	movw	r24, r28
 710:	01 97       	sbiw	r24, 0x01	; 1
 712:	f1 f7       	brne	.-4      	; 0x710 <motor_execute+0x84>
            _delay_ms(4);
           
            
            
        //_delay_ms(240000);
        lcd_gotoxy1(10);
 714:	8a e0       	ldi	r24, 0x0A	; 10
 716:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy1>
        lcd_string("   ");
 71a:	81 e1       	ldi	r24, 0x11	; 17
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
        lcd_gotoxy1(10);
 722:	8a e0       	ldi	r24, 0x0A	; 10
 724:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy1>
        lcd_num(eeprom_read_byte(25));
 728:	89 e1       	ldi	r24, 0x19	; 25
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 f7 06 	call	0xdee	; 0xdee <__eerd_byte_m128>
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_num>
	lcd_gotoxy1(6);
	lcd_string("EX=");
	lcd_num(degree_set_new);
	degree_exec=10-degree_set_new;
	PORTC=0xaf;*/
    for(;degree_set_new<13;) // replace 12 for 120deg
 736:	80 91 1d 01 	lds	r24, 0x011D
 73a:	8d 30       	cpi	r24, 0x0D	; 13
 73c:	08 f4       	brcc	.+2      	; 0x740 <motor_execute+0xb4>
 73e:	bb cf       	rjmp	.-138    	; 0x6b6 <motor_execute+0x2a>
        lcd_gotoxy1(10);
        lcd_num(eeprom_read_byte(25));
        }
        
        
    PORTC=0x2f;
 740:	8f e2       	ldi	r24, 0x2F	; 47
 742:	85 bb       	out	0x15, r24	; 21
 744:	80 e1       	ldi	r24, 0x10	; 16
 746:	97 e2       	ldi	r25, 0x27	; 39
 748:	20 e9       	ldi	r18, 0x90	; 144
 74a:	31 e0       	ldi	r19, 0x01	; 1
 74c:	f9 01       	movw	r30, r18
 74e:	31 97       	sbiw	r30, 0x01	; 1
 750:	f1 f7       	brne	.-4      	; 0x74e <motor_execute+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 752:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 754:	d9 f7       	brne	.-10     	; 0x74c <motor_execute+0xc0>
 756:	1d e0       	ldi	r17, 0x0D	; 13
		_delay_ms(1000);

   
    for(degree_exec_ccw=13;degree_exec_ccw>1;)
    {   intr_disable();
		PORTC=0x77;
 758:	97 e7       	ldi	r25, 0x77	; 119
 75a:	f9 2e       	mov	r15, r25
 75c:	cc ea       	ldi	r28, 0xAC	; 172
 75e:	d8 e0       	ldi	r29, 0x08	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 760:	0a e1       	ldi	r16, 0x1A	; 26
EICRB=0x00;
EIMSK|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
}
void intr_disable()
{
EIMSK=0x00;
 762:	19 be       	out	0x39, r1	; 57
		_delay_ms(1000);

   
    for(degree_exec_ccw=13;degree_exec_ccw>1;)
    {   intr_disable();
		PORTC=0x77;
 764:	f5 ba       	out	0x15, r15	; 21
        cli();
 766:	f8 94       	cli
        motor_dir_ccw();
 768:	0e 94 a9 01 	call	0x352	; 0x352 <motor_dir_ccw>
        for(degree=0;degree<50;degree++)
 76c:	10 92 20 01 	sts	0x0120, r1
 770:	15 c0       	rjmp	.+42     	; 0x79c <motor_execute+0x110>
        {
            PORTG|=(1<<4);
 772:	80 91 65 00 	lds	r24, 0x0065
 776:	80 61       	ori	r24, 0x10	; 16
 778:	80 93 65 00 	sts	0x0065, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 77c:	ce 01       	movw	r24, r28
 77e:	01 97       	sbiw	r24, 0x01	; 1
 780:	f1 f7       	brne	.-4      	; 0x77e <motor_execute+0xf2>
            _delay_us(555);
            PORTG&=~(1<<4);
 782:	80 91 65 00 	lds	r24, 0x0065
 786:	8f 7e       	andi	r24, 0xEF	; 239
 788:	80 93 65 00 	sts	0x0065, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 78c:	80 2f       	mov	r24, r16
 78e:	8a 95       	dec	r24
 790:	f1 f7       	brne	.-4      	; 0x78e <motor_execute+0x102>
    for(degree_exec_ccw=13;degree_exec_ccw>1;)
    {   intr_disable();
		PORTC=0x77;
        cli();
        motor_dir_ccw();
        for(degree=0;degree<50;degree++)
 792:	80 91 20 01 	lds	r24, 0x0120
 796:	8f 5f       	subi	r24, 0xFF	; 255
 798:	80 93 20 01 	sts	0x0120, r24
 79c:	80 91 20 01 	lds	r24, 0x0120
 7a0:	82 33       	cpi	r24, 0x32	; 50
 7a2:	38 f3       	brcs	.-50     	; 0x772 <motor_execute+0xe6>
            PORTG|=(1<<4);
            _delay_us(555);
            PORTG&=~(1<<4);
            _delay_us(5);
        }
        degree_exec_ccw--;
 7a4:	11 50       	subi	r17, 0x01	; 1
        eeprom_write_byte(25,degree_exec_ccw);
 7a6:	89 e1       	ldi	r24, 0x19	; 25
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	61 2f       	mov	r22, r17
 7ac:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__eewr_byte_m128>
        lcd_gotoxy1(10);
 7b0:	8a e0       	ldi	r24, 0x0A	; 10
 7b2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy1>
        lcd_string("   ");
 7b6:	81 e1       	ldi	r24, 0x11	; 17
 7b8:	91 e0       	ldi	r25, 0x01	; 1
 7ba:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
        lcd_gotoxy1(10);
 7be:	8a e0       	ldi	r24, 0x0A	; 10
 7c0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy1>
        lcd_num(eeprom_read_byte(25));
 7c4:	89 e1       	ldi	r24, 0x19	; 25
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 f7 06 	call	0xdee	; 0xdee <__eerd_byte_m128>
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_num>
        
    PORTC=0x2f;
		_delay_ms(1000);

   
    for(degree_exec_ccw=13;degree_exec_ccw>1;)
 7d2:	11 30       	cpi	r17, 0x01	; 1
 7d4:	31 f6       	brne	.-116    	; 0x762 <motor_execute+0xd6>
        lcd_string("   ");
        lcd_gotoxy1(10);
        lcd_num(eeprom_read_byte(25));
        
    }
sei();
 7d6:	78 94       	sei
	}


void ext_timer_init()
{
EICRB=0x00;
 7d8:	1a be       	out	0x3a, r1	; 58
EIMSK|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 7da:	89 b7       	in	r24, 0x39	; 57
 7dc:	80 6f       	ori	r24, 0xF0	; 240
 7de:	89 bf       	out	0x39, r24	; 57
        
    }
sei();
ext_timer_init();
//sei();
}
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	1f 91       	pop	r17
 7e6:	0f 91       	pop	r16
 7e8:	ff 90       	pop	r15
 7ea:	ef 90       	pop	r14
 7ec:	08 95       	ret

000007ee <main>:
EIMSK=0x00;
}


void main()
{
 7ee:	1f 93       	push	r17

DDRC=0xff;
 7f0:	1f ef       	ldi	r17, 0xFF	; 255
 7f2:	14 bb       	out	0x14, r17	; 20
DDRE&=~((1<<4)|(1<<5)|(1<<6)); // External Interrupt Enable
 7f4:	82 b1       	in	r24, 0x02	; 2
 7f6:	8f 78       	andi	r24, 0x8F	; 143
 7f8:	82 b9       	out	0x02, r24	; 2
PORTE|=(1<<4)|(1<<5)|(1<<6);
 7fa:	83 b1       	in	r24, 0x03	; 3
 7fc:	80 67       	ori	r24, 0x70	; 112
 7fe:	83 b9       	out	0x03, r24	; 3
lcd_init();
 800:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_init>
DDRC=0xff;
 804:	14 bb       	out	0x14, r17	; 20
DDRG|=(1<<0)|(1<<4);
 806:	80 91 64 00 	lds	r24, 0x0064
 80a:	81 61       	ori	r24, 0x11	; 17
 80c:	80 93 64 00 	sts	0x0064, r24
DDRD&=~((1<<6)|(1<<7));
 810:	81 b3       	in	r24, 0x11	; 17
 812:	8f 73       	andi	r24, 0x3F	; 63
 814:	81 bb       	out	0x11, r24	; 17
PORTD|=(1<<6)|(1<<7);
 816:	82 b3       	in	r24, 0x12	; 18
 818:	80 6c       	ori	r24, 0xC0	; 192
 81a:	82 bb       	out	0x12, r24	; 18
PORTG&=~(1<<0);
 81c:	80 91 65 00 	lds	r24, 0x0065
 820:	8e 7f       	andi	r24, 0xFE	; 254
 822:	80 93 65 00 	sts	0x0065, r24
sei();
 826:	78 94       	sei
	}


void ext_timer_init()
{
EICRB=0x00;
 828:	1a be       	out	0x3a, r1	; 58
EIMSK|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 82a:	89 b7       	in	r24, 0x39	; 57
 82c:	80 6f       	ori	r24, 0xF0	; 240
 82e:	89 bf       	out	0x39, r24	; 57
PORTD|=(1<<6)|(1<<7);
PORTG&=~(1<<0);
sei();
ext_timer_init();
unsigned char data;
motor_execute();
 830:	0e 94 46 03 	call	0x68c	; 0x68c <motor_execute>
 834:	ff cf       	rjmp	.-2      	; 0x834 <main+0x46>

00000836 <__vector_8>:
	lcd_num(eeprom_read_byte(25));

	}

ISR(INT7_vect)
	{
 836:	1f 92       	push	r1
 838:	0f 92       	push	r0
 83a:	0f b6       	in	r0, 0x3f	; 63
 83c:	0f 92       	push	r0
 83e:	0b b6       	in	r0, 0x3b	; 59
 840:	0f 92       	push	r0
 842:	11 24       	eor	r1, r1
 844:	2f 93       	push	r18
 846:	3f 93       	push	r19
 848:	4f 93       	push	r20
 84a:	5f 93       	push	r21
 84c:	6f 93       	push	r22
 84e:	7f 93       	push	r23
 850:	8f 93       	push	r24
 852:	9f 93       	push	r25
 854:	af 93       	push	r26
 856:	bf 93       	push	r27
 858:	ef 93       	push	r30
 85a:	ff 93       	push	r31
	lcd_gotoxy2(10);
 85c:	8a e0       	ldi	r24, 0x0A	; 10
 85e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
	lcd_string("  ");
 862:	85 e1       	ldi	r24, 0x15	; 21
 864:	91 e0       	ldi	r25, 0x01	; 1
 866:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
	lcd_gotoxy2(10);
 86a:	8a e0       	ldi	r24, 0x0A	; 10
 86c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
	lcd_num(eeprom_read_byte(25));
 870:	89 e1       	ldi	r24, 0x19	; 25
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	0e 94 f7 06 	call	0xdee	; 0xdee <__eerd_byte_m128>
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_num>
	

	}
 87e:	ff 91       	pop	r31
 880:	ef 91       	pop	r30
 882:	bf 91       	pop	r27
 884:	af 91       	pop	r26
 886:	9f 91       	pop	r25
 888:	8f 91       	pop	r24
 88a:	7f 91       	pop	r23
 88c:	6f 91       	pop	r22
 88e:	5f 91       	pop	r21
 890:	4f 91       	pop	r20
 892:	3f 91       	pop	r19
 894:	2f 91       	pop	r18
 896:	0f 90       	pop	r0
 898:	0b be       	out	0x3b, r0	; 59
 89a:	0f 90       	pop	r0
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	0f 90       	pop	r0
 8a0:	1f 90       	pop	r1
 8a2:	18 95       	reti

000008a4 <__vector_7>:
ISR(INT5_vect) // CW
{	_delay_ms(500);
	align_cw();
 }
ISR(INT6_vect) // Setting degree_exec=0
{
 8a4:	1f 92       	push	r1
 8a6:	0f 92       	push	r0
 8a8:	0f b6       	in	r0, 0x3f	; 63
 8aa:	0f 92       	push	r0
 8ac:	0b b6       	in	r0, 0x3b	; 59
 8ae:	0f 92       	push	r0
 8b0:	11 24       	eor	r1, r1
 8b2:	2f 93       	push	r18
 8b4:	3f 93       	push	r19
 8b6:	4f 93       	push	r20
 8b8:	5f 93       	push	r21
 8ba:	6f 93       	push	r22
 8bc:	7f 93       	push	r23
 8be:	8f 93       	push	r24
 8c0:	9f 93       	push	r25
 8c2:	af 93       	push	r26
 8c4:	bf 93       	push	r27
 8c6:	ef 93       	push	r30
 8c8:	ff 93       	push	r31
 8ca:	88 e8       	ldi	r24, 0x88	; 136
 8cc:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 8ce:	20 e9       	ldi	r18, 0x90	; 144
 8d0:	31 e0       	ldi	r19, 0x01	; 1
 8d2:	f9 01       	movw	r30, r18
 8d4:	31 97       	sbiw	r30, 0x01	; 1
 8d6:	f1 f7       	brne	.-4      	; 0x8d4 <__vector_7+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8da:	d9 f7       	brne	.-10     	; 0x8d2 <__vector_7+0x2e>
	_delay_ms(500);
	PORTC=0xf2;
 8dc:	82 ef       	ldi	r24, 0xF2	; 242
 8de:	85 bb       	out	0x15, r24	; 21
	eeprom_write_byte(25,1);
 8e0:	89 e1       	ldi	r24, 0x19	; 25
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	61 e0       	ldi	r22, 0x01	; 1
 8e6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__eewr_byte_m128>
	lcd_gotoxy2(5);
 8ea:	85 e0       	ldi	r24, 0x05	; 5
 8ec:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
	lcd_string("  ");
 8f0:	85 e1       	ldi	r24, 0x15	; 21
 8f2:	91 e0       	ldi	r25, 0x01	; 1
 8f4:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
	lcd_gotoxy2(5);
 8f8:	85 e0       	ldi	r24, 0x05	; 5
 8fa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
	lcd_num(eeprom_read_byte(25));
 8fe:	89 e1       	ldi	r24, 0x19	; 25
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 f7 06 	call	0xdee	; 0xdee <__eerd_byte_m128>
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_num>

	}
 90c:	ff 91       	pop	r31
 90e:	ef 91       	pop	r30
 910:	bf 91       	pop	r27
 912:	af 91       	pop	r26
 914:	9f 91       	pop	r25
 916:	8f 91       	pop	r24
 918:	7f 91       	pop	r23
 91a:	6f 91       	pop	r22
 91c:	5f 91       	pop	r21
 91e:	4f 91       	pop	r20
 920:	3f 91       	pop	r19
 922:	2f 91       	pop	r18
 924:	0f 90       	pop	r0
 926:	0b be       	out	0x3b, r0	; 59
 928:	0f 90       	pop	r0
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	0f 90       	pop	r0
 92e:	1f 90       	pop	r1
 930:	18 95       	reti

00000932 <__divmodhi4>:
 932:	97 fb       	bst	r25, 7
 934:	09 2e       	mov	r0, r25
 936:	07 26       	eor	r0, r23
 938:	0a d0       	rcall	.+20     	; 0x94e <__divmodhi4_neg1>
 93a:	77 fd       	sbrc	r23, 7
 93c:	04 d0       	rcall	.+8      	; 0x946 <__divmodhi4_neg2>
 93e:	0c d0       	rcall	.+24     	; 0x958 <__udivmodhi4>
 940:	06 d0       	rcall	.+12     	; 0x94e <__divmodhi4_neg1>
 942:	00 20       	and	r0, r0
 944:	1a f4       	brpl	.+6      	; 0x94c <__divmodhi4_exit>

00000946 <__divmodhi4_neg2>:
 946:	70 95       	com	r23
 948:	61 95       	neg	r22
 94a:	7f 4f       	sbci	r23, 0xFF	; 255

0000094c <__divmodhi4_exit>:
 94c:	08 95       	ret

0000094e <__divmodhi4_neg1>:
 94e:	f6 f7       	brtc	.-4      	; 0x94c <__divmodhi4_exit>
 950:	90 95       	com	r25
 952:	81 95       	neg	r24
 954:	9f 4f       	sbci	r25, 0xFF	; 255
 956:	08 95       	ret

00000958 <__udivmodhi4>:
 958:	aa 1b       	sub	r26, r26
 95a:	bb 1b       	sub	r27, r27
 95c:	51 e1       	ldi	r21, 0x11	; 17
 95e:	07 c0       	rjmp	.+14     	; 0x96e <__udivmodhi4_ep>

00000960 <__udivmodhi4_loop>:
 960:	aa 1f       	adc	r26, r26
 962:	bb 1f       	adc	r27, r27
 964:	a6 17       	cp	r26, r22
 966:	b7 07       	cpc	r27, r23
 968:	10 f0       	brcs	.+4      	; 0x96e <__udivmodhi4_ep>
 96a:	a6 1b       	sub	r26, r22
 96c:	b7 0b       	sbc	r27, r23

0000096e <__udivmodhi4_ep>:
 96e:	88 1f       	adc	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	5a 95       	dec	r21
 974:	a9 f7       	brne	.-22     	; 0x960 <__udivmodhi4_loop>
 976:	80 95       	com	r24
 978:	90 95       	com	r25
 97a:	bc 01       	movw	r22, r24
 97c:	cd 01       	movw	r24, r26
 97e:	08 95       	ret

00000980 <sprintf>:
 980:	0f 93       	push	r16
 982:	1f 93       	push	r17
 984:	df 93       	push	r29
 986:	cf 93       	push	r28
 988:	cd b7       	in	r28, 0x3d	; 61
 98a:	de b7       	in	r29, 0x3e	; 62
 98c:	2e 97       	sbiw	r28, 0x0e	; 14
 98e:	0f b6       	in	r0, 0x3f	; 63
 990:	f8 94       	cli
 992:	de bf       	out	0x3e, r29	; 62
 994:	0f be       	out	0x3f, r0	; 63
 996:	cd bf       	out	0x3d, r28	; 61
 998:	0d 89       	ldd	r16, Y+21	; 0x15
 99a:	1e 89       	ldd	r17, Y+22	; 0x16
 99c:	86 e0       	ldi	r24, 0x06	; 6
 99e:	8c 83       	std	Y+4, r24	; 0x04
 9a0:	1a 83       	std	Y+2, r17	; 0x02
 9a2:	09 83       	std	Y+1, r16	; 0x01
 9a4:	8f ef       	ldi	r24, 0xFF	; 255
 9a6:	9f e7       	ldi	r25, 0x7F	; 127
 9a8:	9e 83       	std	Y+6, r25	; 0x06
 9aa:	8d 83       	std	Y+5, r24	; 0x05
 9ac:	9e 01       	movw	r18, r28
 9ae:	27 5e       	subi	r18, 0xE7	; 231
 9b0:	3f 4f       	sbci	r19, 0xFF	; 255
 9b2:	ce 01       	movw	r24, r28
 9b4:	01 96       	adiw	r24, 0x01	; 1
 9b6:	6f 89       	ldd	r22, Y+23	; 0x17
 9b8:	78 8d       	ldd	r23, Y+24	; 0x18
 9ba:	a9 01       	movw	r20, r18
 9bc:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <vfprintf>
 9c0:	2f 81       	ldd	r18, Y+7	; 0x07
 9c2:	38 85       	ldd	r19, Y+8	; 0x08
 9c4:	02 0f       	add	r16, r18
 9c6:	13 1f       	adc	r17, r19
 9c8:	f8 01       	movw	r30, r16
 9ca:	10 82       	st	Z, r1
 9cc:	2e 96       	adiw	r28, 0x0e	; 14
 9ce:	0f b6       	in	r0, 0x3f	; 63
 9d0:	f8 94       	cli
 9d2:	de bf       	out	0x3e, r29	; 62
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	cd bf       	out	0x3d, r28	; 61
 9d8:	cf 91       	pop	r28
 9da:	df 91       	pop	r29
 9dc:	1f 91       	pop	r17
 9de:	0f 91       	pop	r16
 9e0:	08 95       	ret

000009e2 <vfprintf>:
 9e2:	2f 92       	push	r2
 9e4:	3f 92       	push	r3
 9e6:	4f 92       	push	r4
 9e8:	5f 92       	push	r5
 9ea:	6f 92       	push	r6
 9ec:	7f 92       	push	r7
 9ee:	8f 92       	push	r8
 9f0:	9f 92       	push	r9
 9f2:	af 92       	push	r10
 9f4:	bf 92       	push	r11
 9f6:	cf 92       	push	r12
 9f8:	df 92       	push	r13
 9fa:	ef 92       	push	r14
 9fc:	ff 92       	push	r15
 9fe:	0f 93       	push	r16
 a00:	1f 93       	push	r17
 a02:	df 93       	push	r29
 a04:	cf 93       	push	r28
 a06:	cd b7       	in	r28, 0x3d	; 61
 a08:	de b7       	in	r29, 0x3e	; 62
 a0a:	2b 97       	sbiw	r28, 0x0b	; 11
 a0c:	0f b6       	in	r0, 0x3f	; 63
 a0e:	f8 94       	cli
 a10:	de bf       	out	0x3e, r29	; 62
 a12:	0f be       	out	0x3f, r0	; 63
 a14:	cd bf       	out	0x3d, r28	; 61
 a16:	3c 01       	movw	r6, r24
 a18:	2b 01       	movw	r4, r22
 a1a:	5a 01       	movw	r10, r20
 a1c:	fc 01       	movw	r30, r24
 a1e:	17 82       	std	Z+7, r1	; 0x07
 a20:	16 82       	std	Z+6, r1	; 0x06
 a22:	83 81       	ldd	r24, Z+3	; 0x03
 a24:	81 fd       	sbrc	r24, 1
 a26:	03 c0       	rjmp	.+6      	; 0xa2e <vfprintf+0x4c>
 a28:	6f ef       	ldi	r22, 0xFF	; 255
 a2a:	7f ef       	ldi	r23, 0xFF	; 255
 a2c:	c6 c1       	rjmp	.+908    	; 0xdba <vfprintf+0x3d8>
 a2e:	9a e0       	ldi	r25, 0x0A	; 10
 a30:	89 2e       	mov	r8, r25
 a32:	1e 01       	movw	r2, r28
 a34:	08 94       	sec
 a36:	21 1c       	adc	r2, r1
 a38:	31 1c       	adc	r3, r1
 a3a:	f3 01       	movw	r30, r6
 a3c:	23 81       	ldd	r18, Z+3	; 0x03
 a3e:	f2 01       	movw	r30, r4
 a40:	23 fd       	sbrc	r18, 3
 a42:	85 91       	lpm	r24, Z+
 a44:	23 ff       	sbrs	r18, 3
 a46:	81 91       	ld	r24, Z+
 a48:	2f 01       	movw	r4, r30
 a4a:	88 23       	and	r24, r24
 a4c:	09 f4       	brne	.+2      	; 0xa50 <vfprintf+0x6e>
 a4e:	b2 c1       	rjmp	.+868    	; 0xdb4 <vfprintf+0x3d2>
 a50:	85 32       	cpi	r24, 0x25	; 37
 a52:	39 f4       	brne	.+14     	; 0xa62 <vfprintf+0x80>
 a54:	23 fd       	sbrc	r18, 3
 a56:	85 91       	lpm	r24, Z+
 a58:	23 ff       	sbrs	r18, 3
 a5a:	81 91       	ld	r24, Z+
 a5c:	2f 01       	movw	r4, r30
 a5e:	85 32       	cpi	r24, 0x25	; 37
 a60:	29 f4       	brne	.+10     	; 0xa6c <vfprintf+0x8a>
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	b3 01       	movw	r22, r6
 a66:	0e 94 22 07 	call	0xe44	; 0xe44 <fputc>
 a6a:	e7 cf       	rjmp	.-50     	; 0xa3a <vfprintf+0x58>
 a6c:	98 2f       	mov	r25, r24
 a6e:	ff 24       	eor	r15, r15
 a70:	ee 24       	eor	r14, r14
 a72:	99 24       	eor	r9, r9
 a74:	ff e1       	ldi	r31, 0x1F	; 31
 a76:	ff 15       	cp	r31, r15
 a78:	d0 f0       	brcs	.+52     	; 0xaae <vfprintf+0xcc>
 a7a:	9b 32       	cpi	r25, 0x2B	; 43
 a7c:	69 f0       	breq	.+26     	; 0xa98 <vfprintf+0xb6>
 a7e:	9c 32       	cpi	r25, 0x2C	; 44
 a80:	28 f4       	brcc	.+10     	; 0xa8c <vfprintf+0xaa>
 a82:	90 32       	cpi	r25, 0x20	; 32
 a84:	59 f0       	breq	.+22     	; 0xa9c <vfprintf+0xba>
 a86:	93 32       	cpi	r25, 0x23	; 35
 a88:	91 f4       	brne	.+36     	; 0xaae <vfprintf+0xcc>
 a8a:	0e c0       	rjmp	.+28     	; 0xaa8 <vfprintf+0xc6>
 a8c:	9d 32       	cpi	r25, 0x2D	; 45
 a8e:	49 f0       	breq	.+18     	; 0xaa2 <vfprintf+0xc0>
 a90:	90 33       	cpi	r25, 0x30	; 48
 a92:	69 f4       	brne	.+26     	; 0xaae <vfprintf+0xcc>
 a94:	41 e0       	ldi	r20, 0x01	; 1
 a96:	24 c0       	rjmp	.+72     	; 0xae0 <vfprintf+0xfe>
 a98:	52 e0       	ldi	r21, 0x02	; 2
 a9a:	f5 2a       	or	r15, r21
 a9c:	84 e0       	ldi	r24, 0x04	; 4
 a9e:	f8 2a       	or	r15, r24
 aa0:	28 c0       	rjmp	.+80     	; 0xaf2 <vfprintf+0x110>
 aa2:	98 e0       	ldi	r25, 0x08	; 8
 aa4:	f9 2a       	or	r15, r25
 aa6:	25 c0       	rjmp	.+74     	; 0xaf2 <vfprintf+0x110>
 aa8:	e0 e1       	ldi	r30, 0x10	; 16
 aaa:	fe 2a       	or	r15, r30
 aac:	22 c0       	rjmp	.+68     	; 0xaf2 <vfprintf+0x110>
 aae:	f7 fc       	sbrc	r15, 7
 ab0:	29 c0       	rjmp	.+82     	; 0xb04 <vfprintf+0x122>
 ab2:	89 2f       	mov	r24, r25
 ab4:	80 53       	subi	r24, 0x30	; 48
 ab6:	8a 30       	cpi	r24, 0x0A	; 10
 ab8:	70 f4       	brcc	.+28     	; 0xad6 <vfprintf+0xf4>
 aba:	f6 fe       	sbrs	r15, 6
 abc:	05 c0       	rjmp	.+10     	; 0xac8 <vfprintf+0xe6>
 abe:	98 9c       	mul	r9, r8
 ac0:	90 2c       	mov	r9, r0
 ac2:	11 24       	eor	r1, r1
 ac4:	98 0e       	add	r9, r24
 ac6:	15 c0       	rjmp	.+42     	; 0xaf2 <vfprintf+0x110>
 ac8:	e8 9c       	mul	r14, r8
 aca:	e0 2c       	mov	r14, r0
 acc:	11 24       	eor	r1, r1
 ace:	e8 0e       	add	r14, r24
 ad0:	f0 e2       	ldi	r31, 0x20	; 32
 ad2:	ff 2a       	or	r15, r31
 ad4:	0e c0       	rjmp	.+28     	; 0xaf2 <vfprintf+0x110>
 ad6:	9e 32       	cpi	r25, 0x2E	; 46
 ad8:	29 f4       	brne	.+10     	; 0xae4 <vfprintf+0x102>
 ada:	f6 fc       	sbrc	r15, 6
 adc:	6b c1       	rjmp	.+726    	; 0xdb4 <vfprintf+0x3d2>
 ade:	40 e4       	ldi	r20, 0x40	; 64
 ae0:	f4 2a       	or	r15, r20
 ae2:	07 c0       	rjmp	.+14     	; 0xaf2 <vfprintf+0x110>
 ae4:	9c 36       	cpi	r25, 0x6C	; 108
 ae6:	19 f4       	brne	.+6      	; 0xaee <vfprintf+0x10c>
 ae8:	50 e8       	ldi	r21, 0x80	; 128
 aea:	f5 2a       	or	r15, r21
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <vfprintf+0x110>
 aee:	98 36       	cpi	r25, 0x68	; 104
 af0:	49 f4       	brne	.+18     	; 0xb04 <vfprintf+0x122>
 af2:	f2 01       	movw	r30, r4
 af4:	23 fd       	sbrc	r18, 3
 af6:	95 91       	lpm	r25, Z+
 af8:	23 ff       	sbrs	r18, 3
 afa:	91 91       	ld	r25, Z+
 afc:	2f 01       	movw	r4, r30
 afe:	99 23       	and	r25, r25
 b00:	09 f0       	breq	.+2      	; 0xb04 <vfprintf+0x122>
 b02:	b8 cf       	rjmp	.-144    	; 0xa74 <vfprintf+0x92>
 b04:	89 2f       	mov	r24, r25
 b06:	85 54       	subi	r24, 0x45	; 69
 b08:	83 30       	cpi	r24, 0x03	; 3
 b0a:	18 f0       	brcs	.+6      	; 0xb12 <vfprintf+0x130>
 b0c:	80 52       	subi	r24, 0x20	; 32
 b0e:	83 30       	cpi	r24, 0x03	; 3
 b10:	38 f4       	brcc	.+14     	; 0xb20 <vfprintf+0x13e>
 b12:	44 e0       	ldi	r20, 0x04	; 4
 b14:	50 e0       	ldi	r21, 0x00	; 0
 b16:	a4 0e       	add	r10, r20
 b18:	b5 1e       	adc	r11, r21
 b1a:	5f e3       	ldi	r21, 0x3F	; 63
 b1c:	59 83       	std	Y+1, r21	; 0x01
 b1e:	0f c0       	rjmp	.+30     	; 0xb3e <vfprintf+0x15c>
 b20:	93 36       	cpi	r25, 0x63	; 99
 b22:	31 f0       	breq	.+12     	; 0xb30 <vfprintf+0x14e>
 b24:	93 37       	cpi	r25, 0x73	; 115
 b26:	79 f0       	breq	.+30     	; 0xb46 <vfprintf+0x164>
 b28:	93 35       	cpi	r25, 0x53	; 83
 b2a:	09 f0       	breq	.+2      	; 0xb2e <vfprintf+0x14c>
 b2c:	56 c0       	rjmp	.+172    	; 0xbda <vfprintf+0x1f8>
 b2e:	20 c0       	rjmp	.+64     	; 0xb70 <vfprintf+0x18e>
 b30:	f5 01       	movw	r30, r10
 b32:	80 81       	ld	r24, Z
 b34:	89 83       	std	Y+1, r24	; 0x01
 b36:	42 e0       	ldi	r20, 0x02	; 2
 b38:	50 e0       	ldi	r21, 0x00	; 0
 b3a:	a4 0e       	add	r10, r20
 b3c:	b5 1e       	adc	r11, r21
 b3e:	61 01       	movw	r12, r2
 b40:	01 e0       	ldi	r16, 0x01	; 1
 b42:	10 e0       	ldi	r17, 0x00	; 0
 b44:	12 c0       	rjmp	.+36     	; 0xb6a <vfprintf+0x188>
 b46:	f5 01       	movw	r30, r10
 b48:	c0 80       	ld	r12, Z
 b4a:	d1 80       	ldd	r13, Z+1	; 0x01
 b4c:	f6 fc       	sbrc	r15, 6
 b4e:	03 c0       	rjmp	.+6      	; 0xb56 <vfprintf+0x174>
 b50:	6f ef       	ldi	r22, 0xFF	; 255
 b52:	7f ef       	ldi	r23, 0xFF	; 255
 b54:	02 c0       	rjmp	.+4      	; 0xb5a <vfprintf+0x178>
 b56:	69 2d       	mov	r22, r9
 b58:	70 e0       	ldi	r23, 0x00	; 0
 b5a:	42 e0       	ldi	r20, 0x02	; 2
 b5c:	50 e0       	ldi	r21, 0x00	; 0
 b5e:	a4 0e       	add	r10, r20
 b60:	b5 1e       	adc	r11, r21
 b62:	c6 01       	movw	r24, r12
 b64:	0e 94 17 07 	call	0xe2e	; 0xe2e <strnlen>
 b68:	8c 01       	movw	r16, r24
 b6a:	5f e7       	ldi	r21, 0x7F	; 127
 b6c:	f5 22       	and	r15, r21
 b6e:	14 c0       	rjmp	.+40     	; 0xb98 <vfprintf+0x1b6>
 b70:	f5 01       	movw	r30, r10
 b72:	c0 80       	ld	r12, Z
 b74:	d1 80       	ldd	r13, Z+1	; 0x01
 b76:	f6 fc       	sbrc	r15, 6
 b78:	03 c0       	rjmp	.+6      	; 0xb80 <vfprintf+0x19e>
 b7a:	6f ef       	ldi	r22, 0xFF	; 255
 b7c:	7f ef       	ldi	r23, 0xFF	; 255
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <vfprintf+0x1a2>
 b80:	69 2d       	mov	r22, r9
 b82:	70 e0       	ldi	r23, 0x00	; 0
 b84:	42 e0       	ldi	r20, 0x02	; 2
 b86:	50 e0       	ldi	r21, 0x00	; 0
 b88:	a4 0e       	add	r10, r20
 b8a:	b5 1e       	adc	r11, r21
 b8c:	c6 01       	movw	r24, r12
 b8e:	0e 94 0c 07 	call	0xe18	; 0xe18 <strnlen_P>
 b92:	8c 01       	movw	r16, r24
 b94:	50 e8       	ldi	r21, 0x80	; 128
 b96:	f5 2a       	or	r15, r21
 b98:	f3 fe       	sbrs	r15, 3
 b9a:	07 c0       	rjmp	.+14     	; 0xbaa <vfprintf+0x1c8>
 b9c:	1a c0       	rjmp	.+52     	; 0xbd2 <vfprintf+0x1f0>
 b9e:	80 e2       	ldi	r24, 0x20	; 32
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	b3 01       	movw	r22, r6
 ba4:	0e 94 22 07 	call	0xe44	; 0xe44 <fputc>
 ba8:	ea 94       	dec	r14
 baa:	8e 2d       	mov	r24, r14
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	08 17       	cp	r16, r24
 bb0:	19 07       	cpc	r17, r25
 bb2:	a8 f3       	brcs	.-22     	; 0xb9e <vfprintf+0x1bc>
 bb4:	0e c0       	rjmp	.+28     	; 0xbd2 <vfprintf+0x1f0>
 bb6:	f6 01       	movw	r30, r12
 bb8:	f7 fc       	sbrc	r15, 7
 bba:	85 91       	lpm	r24, Z+
 bbc:	f7 fe       	sbrs	r15, 7
 bbe:	81 91       	ld	r24, Z+
 bc0:	6f 01       	movw	r12, r30
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	b3 01       	movw	r22, r6
 bc6:	0e 94 22 07 	call	0xe44	; 0xe44 <fputc>
 bca:	e1 10       	cpse	r14, r1
 bcc:	ea 94       	dec	r14
 bce:	01 50       	subi	r16, 0x01	; 1
 bd0:	10 40       	sbci	r17, 0x00	; 0
 bd2:	01 15       	cp	r16, r1
 bd4:	11 05       	cpc	r17, r1
 bd6:	79 f7       	brne	.-34     	; 0xbb6 <vfprintf+0x1d4>
 bd8:	ea c0       	rjmp	.+468    	; 0xdae <vfprintf+0x3cc>
 bda:	94 36       	cpi	r25, 0x64	; 100
 bdc:	11 f0       	breq	.+4      	; 0xbe2 <vfprintf+0x200>
 bde:	99 36       	cpi	r25, 0x69	; 105
 be0:	69 f5       	brne	.+90     	; 0xc3c <vfprintf+0x25a>
 be2:	f7 fe       	sbrs	r15, 7
 be4:	08 c0       	rjmp	.+16     	; 0xbf6 <vfprintf+0x214>
 be6:	f5 01       	movw	r30, r10
 be8:	20 81       	ld	r18, Z
 bea:	31 81       	ldd	r19, Z+1	; 0x01
 bec:	42 81       	ldd	r20, Z+2	; 0x02
 bee:	53 81       	ldd	r21, Z+3	; 0x03
 bf0:	84 e0       	ldi	r24, 0x04	; 4
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	0a c0       	rjmp	.+20     	; 0xc0a <vfprintf+0x228>
 bf6:	f5 01       	movw	r30, r10
 bf8:	80 81       	ld	r24, Z
 bfa:	91 81       	ldd	r25, Z+1	; 0x01
 bfc:	9c 01       	movw	r18, r24
 bfe:	44 27       	eor	r20, r20
 c00:	37 fd       	sbrc	r19, 7
 c02:	40 95       	com	r20
 c04:	54 2f       	mov	r21, r20
 c06:	82 e0       	ldi	r24, 0x02	; 2
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	a8 0e       	add	r10, r24
 c0c:	b9 1e       	adc	r11, r25
 c0e:	9f e6       	ldi	r25, 0x6F	; 111
 c10:	f9 22       	and	r15, r25
 c12:	57 ff       	sbrs	r21, 7
 c14:	09 c0       	rjmp	.+18     	; 0xc28 <vfprintf+0x246>
 c16:	50 95       	com	r21
 c18:	40 95       	com	r20
 c1a:	30 95       	com	r19
 c1c:	21 95       	neg	r18
 c1e:	3f 4f       	sbci	r19, 0xFF	; 255
 c20:	4f 4f       	sbci	r20, 0xFF	; 255
 c22:	5f 4f       	sbci	r21, 0xFF	; 255
 c24:	e0 e8       	ldi	r30, 0x80	; 128
 c26:	fe 2a       	or	r15, r30
 c28:	ca 01       	movw	r24, r20
 c2a:	b9 01       	movw	r22, r18
 c2c:	a1 01       	movw	r20, r2
 c2e:	2a e0       	ldi	r18, 0x0A	; 10
 c30:	30 e0       	ldi	r19, 0x00	; 0
 c32:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__ultoa_invert>
 c36:	d8 2e       	mov	r13, r24
 c38:	d2 18       	sub	r13, r2
 c3a:	40 c0       	rjmp	.+128    	; 0xcbc <vfprintf+0x2da>
 c3c:	95 37       	cpi	r25, 0x75	; 117
 c3e:	29 f4       	brne	.+10     	; 0xc4a <vfprintf+0x268>
 c40:	1f 2d       	mov	r17, r15
 c42:	1f 7e       	andi	r17, 0xEF	; 239
 c44:	2a e0       	ldi	r18, 0x0A	; 10
 c46:	30 e0       	ldi	r19, 0x00	; 0
 c48:	1d c0       	rjmp	.+58     	; 0xc84 <vfprintf+0x2a2>
 c4a:	1f 2d       	mov	r17, r15
 c4c:	19 7f       	andi	r17, 0xF9	; 249
 c4e:	9f 36       	cpi	r25, 0x6F	; 111
 c50:	61 f0       	breq	.+24     	; 0xc6a <vfprintf+0x288>
 c52:	90 37       	cpi	r25, 0x70	; 112
 c54:	20 f4       	brcc	.+8      	; 0xc5e <vfprintf+0x27c>
 c56:	98 35       	cpi	r25, 0x58	; 88
 c58:	09 f0       	breq	.+2      	; 0xc5c <vfprintf+0x27a>
 c5a:	ac c0       	rjmp	.+344    	; 0xdb4 <vfprintf+0x3d2>
 c5c:	0f c0       	rjmp	.+30     	; 0xc7c <vfprintf+0x29a>
 c5e:	90 37       	cpi	r25, 0x70	; 112
 c60:	39 f0       	breq	.+14     	; 0xc70 <vfprintf+0x28e>
 c62:	98 37       	cpi	r25, 0x78	; 120
 c64:	09 f0       	breq	.+2      	; 0xc68 <vfprintf+0x286>
 c66:	a6 c0       	rjmp	.+332    	; 0xdb4 <vfprintf+0x3d2>
 c68:	04 c0       	rjmp	.+8      	; 0xc72 <vfprintf+0x290>
 c6a:	28 e0       	ldi	r18, 0x08	; 8
 c6c:	30 e0       	ldi	r19, 0x00	; 0
 c6e:	0a c0       	rjmp	.+20     	; 0xc84 <vfprintf+0x2a2>
 c70:	10 61       	ori	r17, 0x10	; 16
 c72:	14 fd       	sbrc	r17, 4
 c74:	14 60       	ori	r17, 0x04	; 4
 c76:	20 e1       	ldi	r18, 0x10	; 16
 c78:	30 e0       	ldi	r19, 0x00	; 0
 c7a:	04 c0       	rjmp	.+8      	; 0xc84 <vfprintf+0x2a2>
 c7c:	14 fd       	sbrc	r17, 4
 c7e:	16 60       	ori	r17, 0x06	; 6
 c80:	20 e1       	ldi	r18, 0x10	; 16
 c82:	32 e0       	ldi	r19, 0x02	; 2
 c84:	17 ff       	sbrs	r17, 7
 c86:	08 c0       	rjmp	.+16     	; 0xc98 <vfprintf+0x2b6>
 c88:	f5 01       	movw	r30, r10
 c8a:	60 81       	ld	r22, Z
 c8c:	71 81       	ldd	r23, Z+1	; 0x01
 c8e:	82 81       	ldd	r24, Z+2	; 0x02
 c90:	93 81       	ldd	r25, Z+3	; 0x03
 c92:	44 e0       	ldi	r20, 0x04	; 4
 c94:	50 e0       	ldi	r21, 0x00	; 0
 c96:	08 c0       	rjmp	.+16     	; 0xca8 <vfprintf+0x2c6>
 c98:	f5 01       	movw	r30, r10
 c9a:	80 81       	ld	r24, Z
 c9c:	91 81       	ldd	r25, Z+1	; 0x01
 c9e:	bc 01       	movw	r22, r24
 ca0:	80 e0       	ldi	r24, 0x00	; 0
 ca2:	90 e0       	ldi	r25, 0x00	; 0
 ca4:	42 e0       	ldi	r20, 0x02	; 2
 ca6:	50 e0       	ldi	r21, 0x00	; 0
 ca8:	a4 0e       	add	r10, r20
 caa:	b5 1e       	adc	r11, r21
 cac:	a1 01       	movw	r20, r2
 cae:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__ultoa_invert>
 cb2:	d8 2e       	mov	r13, r24
 cb4:	d2 18       	sub	r13, r2
 cb6:	8f e7       	ldi	r24, 0x7F	; 127
 cb8:	f8 2e       	mov	r15, r24
 cba:	f1 22       	and	r15, r17
 cbc:	f6 fe       	sbrs	r15, 6
 cbe:	0b c0       	rjmp	.+22     	; 0xcd6 <vfprintf+0x2f4>
 cc0:	5e ef       	ldi	r21, 0xFE	; 254
 cc2:	f5 22       	and	r15, r21
 cc4:	d9 14       	cp	r13, r9
 cc6:	38 f4       	brcc	.+14     	; 0xcd6 <vfprintf+0x2f4>
 cc8:	f4 fe       	sbrs	r15, 4
 cca:	07 c0       	rjmp	.+14     	; 0xcda <vfprintf+0x2f8>
 ccc:	f2 fc       	sbrc	r15, 2
 cce:	05 c0       	rjmp	.+10     	; 0xcda <vfprintf+0x2f8>
 cd0:	8f ee       	ldi	r24, 0xEF	; 239
 cd2:	f8 22       	and	r15, r24
 cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0x2f8>
 cd6:	1d 2d       	mov	r17, r13
 cd8:	01 c0       	rjmp	.+2      	; 0xcdc <vfprintf+0x2fa>
 cda:	19 2d       	mov	r17, r9
 cdc:	f4 fe       	sbrs	r15, 4
 cde:	0d c0       	rjmp	.+26     	; 0xcfa <vfprintf+0x318>
 ce0:	fe 01       	movw	r30, r28
 ce2:	ed 0d       	add	r30, r13
 ce4:	f1 1d       	adc	r31, r1
 ce6:	80 81       	ld	r24, Z
 ce8:	80 33       	cpi	r24, 0x30	; 48
 cea:	19 f4       	brne	.+6      	; 0xcf2 <vfprintf+0x310>
 cec:	99 ee       	ldi	r25, 0xE9	; 233
 cee:	f9 22       	and	r15, r25
 cf0:	08 c0       	rjmp	.+16     	; 0xd02 <vfprintf+0x320>
 cf2:	1f 5f       	subi	r17, 0xFF	; 255
 cf4:	f2 fe       	sbrs	r15, 2
 cf6:	05 c0       	rjmp	.+10     	; 0xd02 <vfprintf+0x320>
 cf8:	03 c0       	rjmp	.+6      	; 0xd00 <vfprintf+0x31e>
 cfa:	8f 2d       	mov	r24, r15
 cfc:	86 78       	andi	r24, 0x86	; 134
 cfe:	09 f0       	breq	.+2      	; 0xd02 <vfprintf+0x320>
 d00:	1f 5f       	subi	r17, 0xFF	; 255
 d02:	0f 2d       	mov	r16, r15
 d04:	f3 fc       	sbrc	r15, 3
 d06:	14 c0       	rjmp	.+40     	; 0xd30 <vfprintf+0x34e>
 d08:	f0 fe       	sbrs	r15, 0
 d0a:	0f c0       	rjmp	.+30     	; 0xd2a <vfprintf+0x348>
 d0c:	1e 15       	cp	r17, r14
 d0e:	10 f0       	brcs	.+4      	; 0xd14 <vfprintf+0x332>
 d10:	9d 2c       	mov	r9, r13
 d12:	0b c0       	rjmp	.+22     	; 0xd2a <vfprintf+0x348>
 d14:	9d 2c       	mov	r9, r13
 d16:	9e 0c       	add	r9, r14
 d18:	91 1a       	sub	r9, r17
 d1a:	1e 2d       	mov	r17, r14
 d1c:	06 c0       	rjmp	.+12     	; 0xd2a <vfprintf+0x348>
 d1e:	80 e2       	ldi	r24, 0x20	; 32
 d20:	90 e0       	ldi	r25, 0x00	; 0
 d22:	b3 01       	movw	r22, r6
 d24:	0e 94 22 07 	call	0xe44	; 0xe44 <fputc>
 d28:	1f 5f       	subi	r17, 0xFF	; 255
 d2a:	1e 15       	cp	r17, r14
 d2c:	c0 f3       	brcs	.-16     	; 0xd1e <vfprintf+0x33c>
 d2e:	04 c0       	rjmp	.+8      	; 0xd38 <vfprintf+0x356>
 d30:	1e 15       	cp	r17, r14
 d32:	10 f4       	brcc	.+4      	; 0xd38 <vfprintf+0x356>
 d34:	e1 1a       	sub	r14, r17
 d36:	01 c0       	rjmp	.+2      	; 0xd3a <vfprintf+0x358>
 d38:	ee 24       	eor	r14, r14
 d3a:	04 ff       	sbrs	r16, 4
 d3c:	0f c0       	rjmp	.+30     	; 0xd5c <vfprintf+0x37a>
 d3e:	80 e3       	ldi	r24, 0x30	; 48
 d40:	90 e0       	ldi	r25, 0x00	; 0
 d42:	b3 01       	movw	r22, r6
 d44:	0e 94 22 07 	call	0xe44	; 0xe44 <fputc>
 d48:	02 ff       	sbrs	r16, 2
 d4a:	1d c0       	rjmp	.+58     	; 0xd86 <vfprintf+0x3a4>
 d4c:	01 fd       	sbrc	r16, 1
 d4e:	03 c0       	rjmp	.+6      	; 0xd56 <vfprintf+0x374>
 d50:	88 e7       	ldi	r24, 0x78	; 120
 d52:	90 e0       	ldi	r25, 0x00	; 0
 d54:	0e c0       	rjmp	.+28     	; 0xd72 <vfprintf+0x390>
 d56:	88 e5       	ldi	r24, 0x58	; 88
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	0b c0       	rjmp	.+22     	; 0xd72 <vfprintf+0x390>
 d5c:	80 2f       	mov	r24, r16
 d5e:	86 78       	andi	r24, 0x86	; 134
 d60:	91 f0       	breq	.+36     	; 0xd86 <vfprintf+0x3a4>
 d62:	01 ff       	sbrs	r16, 1
 d64:	02 c0       	rjmp	.+4      	; 0xd6a <vfprintf+0x388>
 d66:	8b e2       	ldi	r24, 0x2B	; 43
 d68:	01 c0       	rjmp	.+2      	; 0xd6c <vfprintf+0x38a>
 d6a:	80 e2       	ldi	r24, 0x20	; 32
 d6c:	f7 fc       	sbrc	r15, 7
 d6e:	8d e2       	ldi	r24, 0x2D	; 45
 d70:	90 e0       	ldi	r25, 0x00	; 0
 d72:	b3 01       	movw	r22, r6
 d74:	0e 94 22 07 	call	0xe44	; 0xe44 <fputc>
 d78:	06 c0       	rjmp	.+12     	; 0xd86 <vfprintf+0x3a4>
 d7a:	80 e3       	ldi	r24, 0x30	; 48
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	b3 01       	movw	r22, r6
 d80:	0e 94 22 07 	call	0xe44	; 0xe44 <fputc>
 d84:	9a 94       	dec	r9
 d86:	d9 14       	cp	r13, r9
 d88:	c0 f3       	brcs	.-16     	; 0xd7a <vfprintf+0x398>
 d8a:	da 94       	dec	r13
 d8c:	f1 01       	movw	r30, r2
 d8e:	ed 0d       	add	r30, r13
 d90:	f1 1d       	adc	r31, r1
 d92:	80 81       	ld	r24, Z
 d94:	90 e0       	ldi	r25, 0x00	; 0
 d96:	b3 01       	movw	r22, r6
 d98:	0e 94 22 07 	call	0xe44	; 0xe44 <fputc>
 d9c:	dd 20       	and	r13, r13
 d9e:	a9 f7       	brne	.-22     	; 0xd8a <vfprintf+0x3a8>
 da0:	06 c0       	rjmp	.+12     	; 0xdae <vfprintf+0x3cc>
 da2:	80 e2       	ldi	r24, 0x20	; 32
 da4:	90 e0       	ldi	r25, 0x00	; 0
 da6:	b3 01       	movw	r22, r6
 da8:	0e 94 22 07 	call	0xe44	; 0xe44 <fputc>
 dac:	ea 94       	dec	r14
 dae:	ee 20       	and	r14, r14
 db0:	c1 f7       	brne	.-16     	; 0xda2 <vfprintf+0x3c0>
 db2:	43 ce       	rjmp	.-890    	; 0xa3a <vfprintf+0x58>
 db4:	f3 01       	movw	r30, r6
 db6:	66 81       	ldd	r22, Z+6	; 0x06
 db8:	77 81       	ldd	r23, Z+7	; 0x07
 dba:	cb 01       	movw	r24, r22
 dbc:	2b 96       	adiw	r28, 0x0b	; 11
 dbe:	0f b6       	in	r0, 0x3f	; 63
 dc0:	f8 94       	cli
 dc2:	de bf       	out	0x3e, r29	; 62
 dc4:	0f be       	out	0x3f, r0	; 63
 dc6:	cd bf       	out	0x3d, r28	; 61
 dc8:	cf 91       	pop	r28
 dca:	df 91       	pop	r29
 dcc:	1f 91       	pop	r17
 dce:	0f 91       	pop	r16
 dd0:	ff 90       	pop	r15
 dd2:	ef 90       	pop	r14
 dd4:	df 90       	pop	r13
 dd6:	cf 90       	pop	r12
 dd8:	bf 90       	pop	r11
 dda:	af 90       	pop	r10
 ddc:	9f 90       	pop	r9
 dde:	8f 90       	pop	r8
 de0:	7f 90       	pop	r7
 de2:	6f 90       	pop	r6
 de4:	5f 90       	pop	r5
 de6:	4f 90       	pop	r4
 de8:	3f 90       	pop	r3
 dea:	2f 90       	pop	r2
 dec:	08 95       	ret

00000dee <__eerd_byte_m128>:
 dee:	e1 99       	sbic	0x1c, 1	; 28
 df0:	fe cf       	rjmp	.-4      	; 0xdee <__eerd_byte_m128>
 df2:	9f bb       	out	0x1f, r25	; 31
 df4:	8e bb       	out	0x1e, r24	; 30
 df6:	e0 9a       	sbi	0x1c, 0	; 28
 df8:	99 27       	eor	r25, r25
 dfa:	8d b3       	in	r24, 0x1d	; 29
 dfc:	08 95       	ret

00000dfe <__eewr_byte_m128>:
 dfe:	26 2f       	mov	r18, r22

00000e00 <__eewr_r18_m128>:
 e00:	e1 99       	sbic	0x1c, 1	; 28
 e02:	fe cf       	rjmp	.-4      	; 0xe00 <__eewr_r18_m128>
 e04:	9f bb       	out	0x1f, r25	; 31
 e06:	8e bb       	out	0x1e, r24	; 30
 e08:	2d bb       	out	0x1d, r18	; 29
 e0a:	0f b6       	in	r0, 0x3f	; 63
 e0c:	f8 94       	cli
 e0e:	e2 9a       	sbi	0x1c, 2	; 28
 e10:	e1 9a       	sbi	0x1c, 1	; 28
 e12:	0f be       	out	0x3f, r0	; 63
 e14:	01 96       	adiw	r24, 0x01	; 1
 e16:	08 95       	ret

00000e18 <strnlen_P>:
 e18:	fc 01       	movw	r30, r24
 e1a:	05 90       	lpm	r0, Z+
 e1c:	61 50       	subi	r22, 0x01	; 1
 e1e:	70 40       	sbci	r23, 0x00	; 0
 e20:	01 10       	cpse	r0, r1
 e22:	d8 f7       	brcc	.-10     	; 0xe1a <strnlen_P+0x2>
 e24:	80 95       	com	r24
 e26:	90 95       	com	r25
 e28:	8e 0f       	add	r24, r30
 e2a:	9f 1f       	adc	r25, r31
 e2c:	08 95       	ret

00000e2e <strnlen>:
 e2e:	fc 01       	movw	r30, r24
 e30:	61 50       	subi	r22, 0x01	; 1
 e32:	70 40       	sbci	r23, 0x00	; 0
 e34:	01 90       	ld	r0, Z+
 e36:	01 10       	cpse	r0, r1
 e38:	d8 f7       	brcc	.-10     	; 0xe30 <strnlen+0x2>
 e3a:	80 95       	com	r24
 e3c:	90 95       	com	r25
 e3e:	8e 0f       	add	r24, r30
 e40:	9f 1f       	adc	r25, r31
 e42:	08 95       	ret

00000e44 <fputc>:
 e44:	0f 93       	push	r16
 e46:	1f 93       	push	r17
 e48:	cf 93       	push	r28
 e4a:	df 93       	push	r29
 e4c:	8c 01       	movw	r16, r24
 e4e:	eb 01       	movw	r28, r22
 e50:	8b 81       	ldd	r24, Y+3	; 0x03
 e52:	81 ff       	sbrs	r24, 1
 e54:	1b c0       	rjmp	.+54     	; 0xe8c <fputc+0x48>
 e56:	82 ff       	sbrs	r24, 2
 e58:	0d c0       	rjmp	.+26     	; 0xe74 <fputc+0x30>
 e5a:	2e 81       	ldd	r18, Y+6	; 0x06
 e5c:	3f 81       	ldd	r19, Y+7	; 0x07
 e5e:	8c 81       	ldd	r24, Y+4	; 0x04
 e60:	9d 81       	ldd	r25, Y+5	; 0x05
 e62:	28 17       	cp	r18, r24
 e64:	39 07       	cpc	r19, r25
 e66:	64 f4       	brge	.+24     	; 0xe80 <fputc+0x3c>
 e68:	e8 81       	ld	r30, Y
 e6a:	f9 81       	ldd	r31, Y+1	; 0x01
 e6c:	01 93       	st	Z+, r16
 e6e:	f9 83       	std	Y+1, r31	; 0x01
 e70:	e8 83       	st	Y, r30
 e72:	06 c0       	rjmp	.+12     	; 0xe80 <fputc+0x3c>
 e74:	e8 85       	ldd	r30, Y+8	; 0x08
 e76:	f9 85       	ldd	r31, Y+9	; 0x09
 e78:	80 2f       	mov	r24, r16
 e7a:	09 95       	icall
 e7c:	89 2b       	or	r24, r25
 e7e:	31 f4       	brne	.+12     	; 0xe8c <fputc+0x48>
 e80:	8e 81       	ldd	r24, Y+6	; 0x06
 e82:	9f 81       	ldd	r25, Y+7	; 0x07
 e84:	01 96       	adiw	r24, 0x01	; 1
 e86:	9f 83       	std	Y+7, r25	; 0x07
 e88:	8e 83       	std	Y+6, r24	; 0x06
 e8a:	02 c0       	rjmp	.+4      	; 0xe90 <fputc+0x4c>
 e8c:	0f ef       	ldi	r16, 0xFF	; 255
 e8e:	1f ef       	ldi	r17, 0xFF	; 255
 e90:	c8 01       	movw	r24, r16
 e92:	df 91       	pop	r29
 e94:	cf 91       	pop	r28
 e96:	1f 91       	pop	r17
 e98:	0f 91       	pop	r16
 e9a:	08 95       	ret

00000e9c <__ultoa_invert>:
 e9c:	fa 01       	movw	r30, r20
 e9e:	aa 27       	eor	r26, r26
 ea0:	28 30       	cpi	r18, 0x08	; 8
 ea2:	51 f1       	breq	.+84     	; 0xef8 <__ultoa_invert+0x5c>
 ea4:	20 31       	cpi	r18, 0x10	; 16
 ea6:	81 f1       	breq	.+96     	; 0xf08 <__ultoa_invert+0x6c>
 ea8:	e8 94       	clt
 eaa:	6f 93       	push	r22
 eac:	6e 7f       	andi	r22, 0xFE	; 254
 eae:	6e 5f       	subi	r22, 0xFE	; 254
 eb0:	7f 4f       	sbci	r23, 0xFF	; 255
 eb2:	8f 4f       	sbci	r24, 0xFF	; 255
 eb4:	9f 4f       	sbci	r25, 0xFF	; 255
 eb6:	af 4f       	sbci	r26, 0xFF	; 255
 eb8:	b1 e0       	ldi	r27, 0x01	; 1
 eba:	3e d0       	rcall	.+124    	; 0xf38 <__ultoa_invert+0x9c>
 ebc:	b4 e0       	ldi	r27, 0x04	; 4
 ebe:	3c d0       	rcall	.+120    	; 0xf38 <__ultoa_invert+0x9c>
 ec0:	67 0f       	add	r22, r23
 ec2:	78 1f       	adc	r23, r24
 ec4:	89 1f       	adc	r24, r25
 ec6:	9a 1f       	adc	r25, r26
 ec8:	a1 1d       	adc	r26, r1
 eca:	68 0f       	add	r22, r24
 ecc:	79 1f       	adc	r23, r25
 ece:	8a 1f       	adc	r24, r26
 ed0:	91 1d       	adc	r25, r1
 ed2:	a1 1d       	adc	r26, r1
 ed4:	6a 0f       	add	r22, r26
 ed6:	71 1d       	adc	r23, r1
 ed8:	81 1d       	adc	r24, r1
 eda:	91 1d       	adc	r25, r1
 edc:	a1 1d       	adc	r26, r1
 ede:	20 d0       	rcall	.+64     	; 0xf20 <__ultoa_invert+0x84>
 ee0:	09 f4       	brne	.+2      	; 0xee4 <__ultoa_invert+0x48>
 ee2:	68 94       	set
 ee4:	3f 91       	pop	r19
 ee6:	2a e0       	ldi	r18, 0x0A	; 10
 ee8:	26 9f       	mul	r18, r22
 eea:	11 24       	eor	r1, r1
 eec:	30 19       	sub	r19, r0
 eee:	30 5d       	subi	r19, 0xD0	; 208
 ef0:	31 93       	st	Z+, r19
 ef2:	de f6       	brtc	.-74     	; 0xeaa <__ultoa_invert+0xe>
 ef4:	cf 01       	movw	r24, r30
 ef6:	08 95       	ret
 ef8:	46 2f       	mov	r20, r22
 efa:	47 70       	andi	r20, 0x07	; 7
 efc:	40 5d       	subi	r20, 0xD0	; 208
 efe:	41 93       	st	Z+, r20
 f00:	b3 e0       	ldi	r27, 0x03	; 3
 f02:	0f d0       	rcall	.+30     	; 0xf22 <__ultoa_invert+0x86>
 f04:	c9 f7       	brne	.-14     	; 0xef8 <__ultoa_invert+0x5c>
 f06:	f6 cf       	rjmp	.-20     	; 0xef4 <__ultoa_invert+0x58>
 f08:	46 2f       	mov	r20, r22
 f0a:	4f 70       	andi	r20, 0x0F	; 15
 f0c:	40 5d       	subi	r20, 0xD0	; 208
 f0e:	4a 33       	cpi	r20, 0x3A	; 58
 f10:	18 f0       	brcs	.+6      	; 0xf18 <__ultoa_invert+0x7c>
 f12:	49 5d       	subi	r20, 0xD9	; 217
 f14:	31 fd       	sbrc	r19, 1
 f16:	40 52       	subi	r20, 0x20	; 32
 f18:	41 93       	st	Z+, r20
 f1a:	02 d0       	rcall	.+4      	; 0xf20 <__ultoa_invert+0x84>
 f1c:	a9 f7       	brne	.-22     	; 0xf08 <__ultoa_invert+0x6c>
 f1e:	ea cf       	rjmp	.-44     	; 0xef4 <__ultoa_invert+0x58>
 f20:	b4 e0       	ldi	r27, 0x04	; 4
 f22:	a6 95       	lsr	r26
 f24:	97 95       	ror	r25
 f26:	87 95       	ror	r24
 f28:	77 95       	ror	r23
 f2a:	67 95       	ror	r22
 f2c:	ba 95       	dec	r27
 f2e:	c9 f7       	brne	.-14     	; 0xf22 <__ultoa_invert+0x86>
 f30:	00 97       	sbiw	r24, 0x00	; 0
 f32:	61 05       	cpc	r22, r1
 f34:	71 05       	cpc	r23, r1
 f36:	08 95       	ret
 f38:	9b 01       	movw	r18, r22
 f3a:	ac 01       	movw	r20, r24
 f3c:	0a 2e       	mov	r0, r26
 f3e:	06 94       	lsr	r0
 f40:	57 95       	ror	r21
 f42:	47 95       	ror	r20
 f44:	37 95       	ror	r19
 f46:	27 95       	ror	r18
 f48:	ba 95       	dec	r27
 f4a:	c9 f7       	brne	.-14     	; 0xf3e <__ultoa_invert+0xa2>
 f4c:	62 0f       	add	r22, r18
 f4e:	73 1f       	adc	r23, r19
 f50:	84 1f       	adc	r24, r20
 f52:	95 1f       	adc	r25, r21
 f54:	a0 1d       	adc	r26, r0
 f56:	08 95       	ret

00000f58 <_exit>:
 f58:	f8 94       	cli

00000f5a <__stop_program>:
 f5a:	ff cf       	rjmp	.-2      	; 0xf5a <__stop_program>
