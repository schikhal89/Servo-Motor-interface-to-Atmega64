
motor_main_exec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000f64  00000ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080011a  0080011a  00001012  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001012  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000250  00000000  00000000  00001032  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a5e  00000000  00000000  00001282  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000026b  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aa6  00000000  00000000  00001f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  000029f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ac  00000000  00000000  00002be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c3  00000000  00000000  00002e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000468  00000000  00000000  00003253  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_5>
  18:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_6>
  1c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_7>
  20:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__vector_8>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e6       	ldi	r30, 0x64	; 100
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	aa e1       	ldi	r26, 0x1A	; 26
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 fe 03 	call	0x7fc	; 0x7fc <main>
  c6:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <dely_ns>:
dely_ns(250);
CLEARBIT(PORTUSED,BIT(2));
}

void dely_ns(unsigned char tim)
{
  ce:	20 91 1a 01 	lds	r18, 0x011A
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <dely_ns+0xc>
	for(j=0;j<tim;j++)
  d6:	9f 5f       	subi	r25, 0xFF	; 255
  d8:	2a e0       	ldi	r18, 0x0A	; 10
  da:	98 17       	cp	r25, r24
  dc:	e0 f3       	brcs	.-8      	; 0xd6 <dely_ns+0x8>
  de:	20 93 1a 01 	sts	0x011A, r18
  e2:	90 93 1b 01 	sts	0x011B, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
  e6:	08 95       	ret

000000e8 <toggleE>:
		
}

void toggleE(void)
{
SETBIT(PORTUSED,BIT(2));
  e8:	da 9a       	sbi	0x1b, 2	; 27
dely_ns(250);
  ea:	8a ef       	ldi	r24, 0xFA	; 250
  ec:	0e 94 67 00 	call	0xce	; 0xce <dely_ns>
CLEARBIT(PORTUSED,BIT(2));
  f0:	da 98       	cbi	0x1b, 2	; 27
}
  f2:	08 95       	ret

000000f4 <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	08 2f       	mov	r16, r24
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	84 70       	andi	r24, 0x04	; 4
  fe:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=((cmd&0xF0));			
 100:	80 2f       	mov	r24, r16
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	8b bb       	out	0x1b, r24	; 27
	toggleE();
 106:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
	PORTUSED=(((cmd&(0x0F))*16));	
 10a:	10 e0       	ldi	r17, 0x00	; 0
 10c:	0f 70       	andi	r16, 0x0F	; 15
 10e:	10 70       	andi	r17, 0x00	; 0
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	00 0f       	add	r16, r16
 114:	11 1f       	adc	r17, r17
 116:	8a 95       	dec	r24
 118:	e1 f7       	brne	.-8      	; 0x112 <lcd_cmd+0x1e>
 11a:	0b bb       	out	0x1b, r16	; 27
	toggleE();
 11c:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
}
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	08 95       	ret

00000126 <lcd_putchar>:

void lcd_putchar(unsigned char sig)
{
 126:	1f 93       	push	r17
 128:	18 2f       	mov	r17, r24
		PORTUSED=0x01;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	8b bb       	out	0x1b, r24	; 27
		CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 12e:	8b b3       	in	r24, 0x1b	; 27
 130:	82 70       	andi	r24, 0x02	; 2
 132:	8b bb       	out	0x1b, r24	; 27
		PORTUSED=(sig&0xF0)|0x01;						
 134:	81 2f       	mov	r24, r17
 136:	80 7f       	andi	r24, 0xF0	; 240
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	8b bb       	out	0x1b, r24	; 27
		toggleE();
 13c:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
		PORTUSED=((sig&(0x0F))*16)|0x01;
 140:	12 95       	swap	r17
 142:	10 7f       	andi	r17, 0xF0	; 240
 144:	11 60       	ori	r17, 0x01	; 1
 146:	1b bb       	out	0x1b, r17	; 27
		toggleE();
 148:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
}
 14c:	1f 91       	pop	r17
 14e:	08 95       	ret

00000150 <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[32])
{
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTUSED=0x01;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	8b bb       	out	0x1b, r24	; 27
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 160:	8b b3       	in	r24, 0x1b	; 27
 162:	82 70       	andi	r24, 0x02	; 2
 164:	8b bb       	out	0x1b, r24	; 27
 166:	10 e0       	ldi	r17, 0x00	; 0
 168:	13 c0       	rjmp	.+38     	; 0x190 <lcd_string+0x40>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 16a:	10 31       	cpi	r17, 0x10	; 16
 16c:	19 f4       	brne	.+6      	; 0x174 <lcd_string+0x24>
				lcd_cmd(LINE2);
 16e:	80 ec       	ldi	r24, 0xC0	; 192
 170:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
			PORTUSED=((str[k])&0xF0)|0x01;
 174:	88 81       	ld	r24, Y
 176:	80 7f       	andi	r24, 0xF0	; 240
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 17c:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
 180:	88 81       	ld	r24, Y
 182:	82 95       	swap	r24
 184:	80 7f       	andi	r24, 0xF0	; 240
 186:	81 60       	ori	r24, 0x01	; 1
 188:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 18a:	0e 94 74 00 	call	0xe8	; 0xe8 <toggleE>
			k++;
 18e:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	PORTUSED=0x01;
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
 190:	e7 01       	movw	r28, r14
 192:	c1 0f       	add	r28, r17
 194:	d1 1d       	adc	r29, r1
 196:	88 81       	ld	r24, Y
 198:	88 23       	and	r24, r24
 19a:	39 f7       	brne	.-50     	; 0x16a <lcd_string+0x1a>
			toggleE();
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
		}
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	ff 90       	pop	r15
 1a4:	ef 90       	pop	r14
 1a6:	08 95       	ret

000001a8 <lcd_gotoxy1>:
	lcd_char(O+48);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 1a8:	80 58       	subi	r24, 0x80	; 128
 1aa:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
}
 1ae:	08 95       	ret

000001b0 <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 1b0:	80 54       	subi	r24, 0x40	; 64
 1b2:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
}
 1b6:	08 95       	ret

000001b8 <lcd_char>:
}

void lcd_char(unsigned char single)
{
	int i;
	if(single =='\t')
 1b8:	89 30       	cpi	r24, 0x09	; 9
 1ba:	21 f4       	brne	.+8      	; 0x1c4 <lcd_char+0xc>
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(single);
 1bc:	0e 94 93 00 	call	0x126	; 0x126 <lcd_putchar>
 1c0:	89 e0       	ldi	r24, 0x09	; 9
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <lcd_char+0x18>
		}
	}
	else if(single=='\n')
 1c4:	8a 30       	cpi	r24, 0x0A	; 10
 1c6:	21 f4       	brne	.+8      	; 0x1d0 <lcd_char+0x18>
	{
		lcd_gotoxy2(0);	
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
 1ce:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 1d0:	0e 94 93 00 	call	0x126	; 0x126 <lcd_putchar>
 1d4:	08 95       	ret

000001d6 <lcd_showvalue>:


}

void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 1d6:	df 92       	push	r13
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	08 2f       	mov	r16, r24
	unsigned char TH=0,H=0,T=0,O=0;
	TH=num/1000;
 1e2:	e8 2f       	mov	r30, r24
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
	H=(num-(TH*1000))/100;
 1e6:	cf 01       	movw	r24, r30
 1e8:	64 e6       	ldi	r22, 0x64	; 100
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	0e 94 9d 04 	call	0x93a	; 0x93a <__divmodhi4>
 1f0:	d6 2e       	mov	r13, r22
	T=(num - (H*100))/10;
 1f2:	26 2f       	mov	r18, r22
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	8c e9       	ldi	r24, 0x9C	; 156
 1f8:	9f ef       	ldi	r25, 0xFF	; 255
 1fa:	28 9f       	mul	r18, r24
 1fc:	70 01       	movw	r14, r0
 1fe:	29 9f       	mul	r18, r25
 200:	f0 0c       	add	r15, r0
 202:	38 9f       	mul	r19, r24
 204:	f0 0c       	add	r15, r0
 206:	11 24       	eor	r1, r1
 208:	c7 01       	movw	r24, r14
 20a:	8e 0f       	add	r24, r30
 20c:	9f 1f       	adc	r25, r31
 20e:	6a e0       	ldi	r22, 0x0A	; 10
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	0e 94 9d 04 	call	0x93a	; 0x93a <__divmodhi4>
 216:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(TH+48);
 218:	80 e3       	ldi	r24, 0x30	; 48
 21a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_char>
	lcd_char(H+48);
 21e:	8d 2d       	mov	r24, r13
 220:	80 5d       	subi	r24, 0xD0	; 208
 222:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_char>
	lcd_char(T+48);
 226:	81 2f       	mov	r24, r17
 228:	80 5d       	subi	r24, 0xD0	; 208
 22a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_char>
	lcd_char(O+48);
 22e:	00 5d       	subi	r16, 0xD0	; 208
 230:	0e 0d       	add	r16, r14
 232:	86 ef       	ldi	r24, 0xF6	; 246
 234:	9f ef       	ldi	r25, 0xFF	; 255
 236:	18 9f       	mul	r17, r24
 238:	10 2d       	mov	r17, r0
 23a:	11 24       	eor	r1, r1
 23c:	81 2f       	mov	r24, r17
 23e:	80 0f       	add	r24, r16
 240:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_char>
}
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	08 95       	ret

00000250 <lcd_exit>:
}
		

void lcd_exit(void)
{
	PORTUSED=save;
 250:	80 91 1c 01 	lds	r24, 0x011C
 254:	8b bb       	out	0x1b, r24	; 27
}
 256:	08 95       	ret

00000258 <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 258:	0a c0       	rjmp	.+20     	; 0x26e <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 25e:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 260:	2f 5f       	subi	r18, 0xFF	; 255
 262:	3f 4f       	sbci	r19, 0xFF	; 255
 264:	4c e0       	ldi	r20, 0x0C	; 12
 266:	2c 3c       	cpi	r18, 0xCC	; 204
 268:	34 07       	cpc	r19, r20
 26a:	c9 f7       	brne	.-14     	; 0x25e <WaitMs+0x6>
 26c:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	a1 f7       	brne	.-24     	; 0x25a <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 272:	08 95       	ret

00000274 <lcd_init>:
void WaitMs(unsigned int ms);


void lcd_init(void)	//init the lcd
{	
	save=PORTUSED;
 274:	8b b3       	in	r24, 0x1b	; 27
 276:	80 93 1c 01 	sts	0x011C, r24
	DDRUSED=0xFF;
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	8a bb       	out	0x1a, r24	; 26
	//DDRB=0xFF;
	WaitMs(15);
 27e:	8f e0       	ldi	r24, 0x0F	; 15
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 2c 01 	call	0x258	; 0x258 <WaitMs>
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
 286:	8b b3       	in	r24, 0x1b	; 27
 288:	84 70       	andi	r24, 0x04	; 4
 28a:	8b bb       	out	0x1b, r24	; 27
	//PORTUSED=0x20;
	lcd_cmd(0x01);
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
	lcd_cmd(0x0F);
 292:	8f e0       	ldi	r24, 0x0F	; 15
 294:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
	lcd_cmd(0x02);
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
	lcd_cmd(LINE1);
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_cmd>
	WaitMs(15);
 2a4:	8f e0       	ldi	r24, 0x0F	; 15
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 2c 01 	call	0x258	; 0x258 <WaitMs>
		
}
 2ac:	08 95       	ret

000002ae <uart_init>:


void uart_init()
{
UBRR1L=103;
 2ae:	87 e6       	ldi	r24, 0x67	; 103
 2b0:	80 93 99 00 	sts	0x0099, r24
UCSR1A=(1<<3)|(1<<4);
 2b4:	88 e1       	ldi	r24, 0x18	; 24
 2b6:	80 93 9b 00 	sts	0x009B, r24
}
 2ba:	08 95       	ret

000002bc <uart_tx>:

void uart_tx(unsigned char data)
{
 2bc:	98 2f       	mov	r25, r24
while(!(UCSR1B&(1<<UDRE1)));
 2be:	80 91 9a 00 	lds	r24, 0x009A
 2c2:	85 ff       	sbrs	r24, 5
 2c4:	fc cf       	rjmp	.-8      	; 0x2be <uart_tx+0x2>
UDR1=data;
 2c6:	90 93 9c 00 	sts	0x009C, r25
}
 2ca:	08 95       	ret

000002cc <uart_rx>:

unsigned char uart_rx(void)
{
while(!(UCSR1B&(1<<RXC1)));
 2cc:	80 91 9a 00 	lds	r24, 0x009A
 2d0:	87 ff       	sbrs	r24, 7
 2d2:	fc cf       	rjmp	.-8      	; 0x2cc <uart_rx>
return UDR1;
 2d4:	80 91 9c 00 	lds	r24, 0x009C
}
 2d8:	08 95       	ret

000002da <uart_str>:


uart_str(unsigned char *data)
{
 2da:	fc 01       	movw	r30, r24
 2dc:	07 c0       	rjmp	.+14     	; 0x2ec <uart_str+0x12>
UCSR1A=(1<<3)|(1<<4);
}

void uart_tx(unsigned char data)
{
while(!(UCSR1B&(1<<UDRE1)));
 2de:	80 91 9a 00 	lds	r24, 0x009A
 2e2:	85 ff       	sbrs	r24, 5
 2e4:	fc cf       	rjmp	.-8      	; 0x2de <uart_str+0x4>


uart_str(unsigned char *data)
{
while((*data) != '\0')	/* print char from str pointer and point to next location */
				uart_tx((*data++));
 2e6:	31 96       	adiw	r30, 0x01	; 1
}

void uart_tx(unsigned char data)
{
while(!(UCSR1B&(1<<UDRE1)));
UDR1=data;
 2e8:	90 93 9c 00 	sts	0x009C, r25
}


uart_str(unsigned char *data)
{
while((*data) != '\0')	/* print char from str pointer and point to next location */
 2ec:	90 81       	ld	r25, Z
 2ee:	99 23       	and	r25, r25
 2f0:	b1 f7       	brne	.-20     	; 0x2de <uart_str+0x4>
				uart_tx((*data++));


}
 2f2:	08 95       	ret

000002f4 <motor_execute_test>:
}

void motor_execute_test(void)
{
	
	for(degree=0;degree<200;degree++)
 2f4:	10 92 23 01 	sts	0x0123, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2f8:	2c ea       	ldi	r18, 0xAC	; 172
 2fa:	38 e0       	ldi	r19, 0x08	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2fc:	4a e1       	ldi	r20, 0x1A	; 26
 2fe:	15 c0       	rjmp	.+42     	; 0x32a <motor_execute_test+0x36>
	{
	PORTG|=(1<<4);
 300:	80 91 65 00 	lds	r24, 0x0065
 304:	80 61       	ori	r24, 0x10	; 16
 306:	80 93 65 00 	sts	0x0065, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 30a:	c9 01       	movw	r24, r18
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <motor_execute_test+0x18>
	_delay_us(555);
	PORTG&=~(1<<4);
 310:	80 91 65 00 	lds	r24, 0x0065
 314:	8f 7e       	andi	r24, 0xEF	; 239
 316:	80 93 65 00 	sts	0x0065, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 31a:	84 2f       	mov	r24, r20
 31c:	8a 95       	dec	r24
 31e:	f1 f7       	brne	.-4      	; 0x31c <motor_execute_test+0x28>
}

void motor_execute_test(void)
{
	
	for(degree=0;degree<200;degree++)
 320:	80 91 23 01 	lds	r24, 0x0123
 324:	8f 5f       	subi	r24, 0xFF	; 255
 326:	80 93 23 01 	sts	0x0123, r24
 32a:	80 91 23 01 	lds	r24, 0x0123
 32e:	88 3c       	cpi	r24, 0xC8	; 200
 330:	38 f3       	brcs	.-50     	; 0x300 <motor_execute_test+0xc>
	_delay_us(555);
	PORTG&=~(1<<4);
	_delay_us(5);
	}
	
}
 332:	08 95       	ret

00000334 <motor_dir_cw>:


void motor_dir_cw(void)
{
 334:	88 e8       	ldi	r24, 0x88	; 136
 336:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 338:	20 e9       	ldi	r18, 0x90	; 144
 33a:	31 e0       	ldi	r19, 0x01	; 1
 33c:	f9 01       	movw	r30, r18
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <motor_dir_cw+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 342:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 344:	d9 f7       	brne	.-10     	; 0x33c <motor_dir_cw+0x8>
	//PORTG=0x00;
	_delay_ms(500);
	PORTG&=~(1<<0);
 346:	80 91 65 00 	lds	r24, 0x0065
 34a:	8e 7f       	andi	r24, 0xFE	; 254
 34c:	80 93 65 00 	sts	0x0065, r24
}
 350:	08 95       	ret

00000352 <motor_dir_ccw>:
void motor_dir_ccw(void)
{
 352:	88 e8       	ldi	r24, 0x88	; 136
 354:	93 e1       	ldi	r25, 0x13	; 19
 356:	20 e9       	ldi	r18, 0x90	; 144
 358:	31 e0       	ldi	r19, 0x01	; 1
 35a:	f9 01       	movw	r30, r18
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <motor_dir_ccw+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 360:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 362:	d9 f7       	brne	.-10     	; 0x35a <motor_dir_ccw+0x8>
	//PORTG=0x00;
	_delay_ms(500);
	PORTG|=(1<<0);
 364:	80 91 65 00 	lds	r24, 0x0065
 368:	81 60       	ori	r24, 0x01	; 1
 36a:	80 93 65 00 	sts	0x0065, r24
}
 36e:	08 95       	ret

00000370 <ext_timer_init>:
	}


void ext_timer_init()
{
EICRB=0x00;
 370:	1a be       	out	0x3a, r1	; 58
EIMSK|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 372:	89 b7       	in	r24, 0x39	; 57
 374:	80 6f       	ori	r24, 0xF0	; 240
 376:	89 bf       	out	0x39, r24	; 57
}
 378:	08 95       	ret

0000037a <uart_tx_num>:
void uart_tx_num(int num)
{
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	df 93       	push	r29
 380:	cf 93       	push	r28
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	2a 97       	sbiw	r28, 0x0a	; 10
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
unsigned char data[10];
sprintf(data,"%d",num);
 392:	00 d0       	rcall	.+0      	; 0x394 <uart_tx_num+0x1a>
 394:	00 d0       	rcall	.+0      	; 0x396 <uart_tx_num+0x1c>
 396:	00 d0       	rcall	.+0      	; 0x398 <uart_tx_num+0x1e>
 398:	ed b7       	in	r30, 0x3d	; 61
 39a:	fe b7       	in	r31, 0x3e	; 62
 39c:	31 96       	adiw	r30, 0x01	; 1
 39e:	8e 01       	movw	r16, r28
 3a0:	0f 5f       	subi	r16, 0xFF	; 255
 3a2:	1f 4f       	sbci	r17, 0xFF	; 255
 3a4:	ad b7       	in	r26, 0x3d	; 61
 3a6:	be b7       	in	r27, 0x3e	; 62
 3a8:	12 96       	adiw	r26, 0x02	; 2
 3aa:	1c 93       	st	X, r17
 3ac:	0e 93       	st	-X, r16
 3ae:	11 97       	sbiw	r26, 0x01	; 1
 3b0:	20 e0       	ldi	r18, 0x00	; 0
 3b2:	31 e0       	ldi	r19, 0x01	; 1
 3b4:	33 83       	std	Z+3, r19	; 0x03
 3b6:	22 83       	std	Z+2, r18	; 0x02
 3b8:	95 83       	std	Z+5, r25	; 0x05
 3ba:	84 83       	std	Z+4, r24	; 0x04
 3bc:	0e 94 c4 04 	call	0x988	; 0x988 <sprintf>
uart_str(data);
 3c0:	8d b7       	in	r24, 0x3d	; 61
 3c2:	9e b7       	in	r25, 0x3e	; 62
 3c4:	06 96       	adiw	r24, 0x06	; 6
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	f8 94       	cli
 3ca:	9e bf       	out	0x3e, r25	; 62
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	8d bf       	out	0x3d, r24	; 61
 3d0:	c8 01       	movw	r24, r16
 3d2:	0e 94 6d 01 	call	0x2da	; 0x2da <uart_str>
}
 3d6:	2a 96       	adiw	r28, 0x0a	; 10
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	f8 94       	cli
 3dc:	de bf       	out	0x3e, r29	; 62
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	cd bf       	out	0x3d, r28	; 61
 3e2:	cf 91       	pop	r28
 3e4:	df 91       	pop	r29
 3e6:	1f 91       	pop	r17
 3e8:	0f 91       	pop	r16
 3ea:	08 95       	ret

000003ec <lcd_num>:
			k++;
		}
}
void lcd_num(int num);
void lcd_num(int num)
{
 3ec:	0f 93       	push	r16
 3ee:	1f 93       	push	r17
 3f0:	df 93       	push	r29
 3f2:	cf 93       	push	r28
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
 3f8:	2a 97       	sbiw	r28, 0x0a	; 10
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	0f be       	out	0x3f, r0	; 63
 402:	cd bf       	out	0x3d, r28	; 61
unsigned char a[10];
sprintf(a,"%d",num);
 404:	00 d0       	rcall	.+0      	; 0x406 <lcd_num+0x1a>
 406:	00 d0       	rcall	.+0      	; 0x408 <lcd_num+0x1c>
 408:	00 d0       	rcall	.+0      	; 0x40a <lcd_num+0x1e>
 40a:	ed b7       	in	r30, 0x3d	; 61
 40c:	fe b7       	in	r31, 0x3e	; 62
 40e:	31 96       	adiw	r30, 0x01	; 1
 410:	8e 01       	movw	r16, r28
 412:	0f 5f       	subi	r16, 0xFF	; 255
 414:	1f 4f       	sbci	r17, 0xFF	; 255
 416:	ad b7       	in	r26, 0x3d	; 61
 418:	be b7       	in	r27, 0x3e	; 62
 41a:	12 96       	adiw	r26, 0x02	; 2
 41c:	1c 93       	st	X, r17
 41e:	0e 93       	st	-X, r16
 420:	11 97       	sbiw	r26, 0x01	; 1
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	31 e0       	ldi	r19, 0x01	; 1
 426:	33 83       	std	Z+3, r19	; 0x03
 428:	22 83       	std	Z+2, r18	; 0x02
 42a:	95 83       	std	Z+5, r25	; 0x05
 42c:	84 83       	std	Z+4, r24	; 0x04
 42e:	0e 94 c4 04 	call	0x988	; 0x988 <sprintf>
lcd_string(a);
 432:	8d b7       	in	r24, 0x3d	; 61
 434:	9e b7       	in	r25, 0x3e	; 62
 436:	06 96       	adiw	r24, 0x06	; 6
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	9e bf       	out	0x3e, r25	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	8d bf       	out	0x3d, r24	; 61
 442:	c8 01       	movw	r24, r16
 444:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>


}
 448:	2a 96       	adiw	r28, 0x0a	; 10
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	de bf       	out	0x3e, r29	; 62
 450:	0f be       	out	0x3f, r0	; 63
 452:	cd bf       	out	0x3d, r28	; 61
 454:	cf 91       	pop	r28
 456:	df 91       	pop	r29
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	08 95       	ret

0000045e <align_ccw>:

}

void align_ccw(void)
	{
		clockwise=0;
 45e:	10 92 21 01 	sts	0x0121, r1
	counterwise=1;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	80 93 22 01 	sts	0x0122, r24
	PORTG=0x00;
 468:	10 92 65 00 	sts	0x0065, r1
	PORTG|=(1<<0);
 46c:	80 91 65 00 	lds	r24, 0x0065
 470:	81 60       	ori	r24, 0x01	; 1
 472:	80 93 65 00 	sts	0x0065, r24

	unsigned char degree;
	PORTC=0x02;
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	85 bb       	out	0x15, r24	; 21
	degree_set_new=eeprom_read_byte(25);
 47a:	89 e1       	ldi	r24, 0x19	; 25
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__eerd_byte_m128>
 482:	80 93 1d 01 	sts	0x011D, r24
    if(degree_set_new>1)     
 486:	80 91 1d 01 	lds	r24, 0x011D
 48a:	82 30       	cpi	r24, 0x02	; 2
 48c:	20 f1       	brcs	.+72     	; 0x4d6 <align_ccw+0x78>
 48e:	20 e0       	ldi	r18, 0x00	; 0
	{	

		for(degree=0;degree<50;degree++)
		{
		PORTC=0xff;
 490:	6f ef       	ldi	r22, 0xFF	; 255
 492:	4c ea       	ldi	r20, 0xAC	; 172
 494:	58 e0       	ldi	r21, 0x08	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 496:	3a e1       	ldi	r19, 0x1A	; 26
 498:	65 bb       	out	0x15, r22	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 49a:	ca 01       	movw	r24, r20
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <align_ccw+0x3e>
		_delay_us(555);
		PORTG|=(1<<4);
 4a0:	80 91 65 00 	lds	r24, 0x0065
 4a4:	80 61       	ori	r24, 0x10	; 16
 4a6:	80 93 65 00 	sts	0x0065, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4aa:	83 2f       	mov	r24, r19
 4ac:	8a 95       	dec	r24
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <align_ccw+0x4e>
		_delay_us(5);
		PORTG&=~(1<<4);
 4b0:	80 91 65 00 	lds	r24, 0x0065
 4b4:	8f 7e       	andi	r24, 0xEF	; 239
 4b6:	80 93 65 00 	sts	0x0065, r24
	PORTC=0x02;
	degree_set_new=eeprom_read_byte(25);
    if(degree_set_new>1)     
	{	

		for(degree=0;degree<50;degree++)
 4ba:	2f 5f       	subi	r18, 0xFF	; 255
 4bc:	22 33       	cpi	r18, 0x32	; 50
 4be:	61 f7       	brne	.-40     	; 0x498 <align_ccw+0x3a>
		_delay_us(555);
		PORTG|=(1<<4);
		_delay_us(5);
		PORTG&=~(1<<4);
		}
	degree_set_new--;
 4c0:	80 91 1d 01 	lds	r24, 0x011D
 4c4:	81 50       	subi	r24, 0x01	; 1
 4c6:	80 93 1d 01 	sts	0x011D, r24
	eeprom_write_byte(25,degree_set_new);
 4ca:	60 91 1d 01 	lds	r22, 0x011D
 4ce:	89 e1       	ldi	r24, 0x19	; 25
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 03 07 	call	0xe06	; 0xe06 <__eewr_byte_m128>
	}
	lcd_gotoxy1(5);
 4d6:	85 e0       	ldi	r24, 0x05	; 5
 4d8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy1>
	lcd_string("    ");
 4dc:	83 e0       	ldi	r24, 0x03	; 3
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
	lcd_gotoxy1(0);
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy1>
	lcd_string("CCW=");
 4ea:	88 e0       	ldi	r24, 0x08	; 8
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
	lcd_num(degree_set_new);
 4f2:	80 91 1d 01 	lds	r24, 0x011D
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_num>
	}
 4fc:	08 95       	ret

000004fe <__vector_5>:
volatile unsigned char flag;

unsigned char clockwise;
	unsigned char counterwise;
ISR(INT4_vect) //CCW
{  
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	0b b6       	in	r0, 0x3b	; 59
 508:	0f 92       	push	r0
 50a:	11 24       	eor	r1, r1
 50c:	2f 93       	push	r18
 50e:	3f 93       	push	r19
 510:	4f 93       	push	r20
 512:	5f 93       	push	r21
 514:	6f 93       	push	r22
 516:	7f 93       	push	r23
 518:	8f 93       	push	r24
 51a:	9f 93       	push	r25
 51c:	af 93       	push	r26
 51e:	bf 93       	push	r27
 520:	ef 93       	push	r30
 522:	ff 93       	push	r31
    flag=0;
 524:	10 92 1e 01 	sts	0x011E, r1
 528:	88 e8       	ldi	r24, 0x88	; 136
 52a:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 52c:	20 e9       	ldi	r18, 0x90	; 144
 52e:	31 e0       	ldi	r19, 0x01	; 1
 530:	f9 01       	movw	r30, r18
 532:	31 97       	sbiw	r30, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <__vector_5+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 536:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 538:	d9 f7       	brne	.-10     	; 0x530 <__vector_5+0x32>
	_delay_ms(500);
	align_ccw();
 53a:	0e 94 2f 02 	call	0x45e	; 0x45e <align_ccw>
    flag=1;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	80 93 1e 01 	sts	0x011E, r24

}
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	bf 91       	pop	r27
 54a:	af 91       	pop	r26
 54c:	9f 91       	pop	r25
 54e:	8f 91       	pop	r24
 550:	7f 91       	pop	r23
 552:	6f 91       	pop	r22
 554:	5f 91       	pop	r21
 556:	4f 91       	pop	r20
 558:	3f 91       	pop	r19
 55a:	2f 91       	pop	r18
 55c:	0f 90       	pop	r0
 55e:	0b be       	out	0x3b, r0	; 59
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <align_cw>:
	PORTG|=(1<<0);
}

void align_cw(void)
{
	PORTG=0x00;
 56a:	10 92 65 00 	sts	0x0065, r1
	clockwise=1;
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	90 93 21 01 	sts	0x0121, r25
	counterwise=0;
 574:	10 92 22 01 	sts	0x0122, r1
	PORTG&=~(1<<0);
 578:	80 91 65 00 	lds	r24, 0x0065
 57c:	8e 7f       	andi	r24, 0xFE	; 254
 57e:	80 93 65 00 	sts	0x0065, r24
	PORTC=0x01;
 582:	95 bb       	out	0x15, r25	; 21

	unsigned char degree;
	degree_set_new=eeprom_read_byte(25);
 584:	89 e1       	ldi	r24, 0x19	; 25
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__eerd_byte_m128>
 58c:	80 93 1d 01 	sts	0x011D, r24
    if(degree_set_new<12)      // keeping 120 in mind
 590:	80 91 1d 01 	lds	r24, 0x011D
 594:	8c 30       	cpi	r24, 0x0C	; 12
 596:	20 f5       	brcc	.+72     	; 0x5e0 <align_cw+0x76>
 598:	20 e0       	ldi	r18, 0x00	; 0
	{
		for(degree=0;degree<50;degree++)
		{
		PORTC=0xff;
 59a:	6f ef       	ldi	r22, 0xFF	; 255
 59c:	4c ea       	ldi	r20, 0xAC	; 172
 59e:	58 e0       	ldi	r21, 0x08	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5a0:	3a e1       	ldi	r19, 0x1A	; 26
 5a2:	65 bb       	out	0x15, r22	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5a4:	ca 01       	movw	r24, r20
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <align_cw+0x3c>
		_delay_us(555);
		PORTG|=(1<<4);
 5aa:	80 91 65 00 	lds	r24, 0x0065
 5ae:	80 61       	ori	r24, 0x10	; 16
 5b0:	80 93 65 00 	sts	0x0065, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5b4:	83 2f       	mov	r24, r19
 5b6:	8a 95       	dec	r24
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <align_cw+0x4c>
		_delay_us(5);
		PORTG&=~(1<<4);
 5ba:	80 91 65 00 	lds	r24, 0x0065
 5be:	8f 7e       	andi	r24, 0xEF	; 239
 5c0:	80 93 65 00 	sts	0x0065, r24

	unsigned char degree;
	degree_set_new=eeprom_read_byte(25);
    if(degree_set_new<12)      // keeping 120 in mind
	{
		for(degree=0;degree<50;degree++)
 5c4:	2f 5f       	subi	r18, 0xFF	; 255
 5c6:	22 33       	cpi	r18, 0x32	; 50
 5c8:	61 f7       	brne	.-40     	; 0x5a2 <align_cw+0x38>
		_delay_us(555);
		PORTG|=(1<<4);
		_delay_us(5);
		PORTG&=~(1<<4);
		}
	degree_set_new++;
 5ca:	80 91 1d 01 	lds	r24, 0x011D
 5ce:	8f 5f       	subi	r24, 0xFF	; 255
 5d0:	80 93 1d 01 	sts	0x011D, r24
	eeprom_write_byte(25,degree_set_new);
 5d4:	60 91 1d 01 	lds	r22, 0x011D
 5d8:	89 e1       	ldi	r24, 0x19	; 25
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 03 07 	call	0xe06	; 0xe06 <__eewr_byte_m128>
	}
	lcd_gotoxy2(5);
 5e0:	85 e0       	ldi	r24, 0x05	; 5
 5e2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
	lcd_string("    ");
 5e6:	83 e0       	ldi	r24, 0x03	; 3
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
	lcd_gotoxy2(0);
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
	lcd_string("CW=");
 5f4:	8d e0       	ldi	r24, 0x0D	; 13
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
	lcd_num(eeprom_read_byte(25));
 5fc:	89 e1       	ldi	r24, 0x19	; 25
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__eerd_byte_m128>
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_num>

}
 60a:	08 95       	ret

0000060c <__vector_6>:
    flag=1;

}

ISR(INT5_vect) // CW
{   flag=0;
 60c:	1f 92       	push	r1
 60e:	0f 92       	push	r0
 610:	0f b6       	in	r0, 0x3f	; 63
 612:	0f 92       	push	r0
 614:	0b b6       	in	r0, 0x3b	; 59
 616:	0f 92       	push	r0
 618:	11 24       	eor	r1, r1
 61a:	2f 93       	push	r18
 61c:	3f 93       	push	r19
 61e:	4f 93       	push	r20
 620:	5f 93       	push	r21
 622:	6f 93       	push	r22
 624:	7f 93       	push	r23
 626:	8f 93       	push	r24
 628:	9f 93       	push	r25
 62a:	af 93       	push	r26
 62c:	bf 93       	push	r27
 62e:	ef 93       	push	r30
 630:	ff 93       	push	r31
 632:	10 92 1e 01 	sts	0x011E, r1
 636:	88 e8       	ldi	r24, 0x88	; 136
 638:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 63a:	20 e9       	ldi	r18, 0x90	; 144
 63c:	31 e0       	ldi	r19, 0x01	; 1
 63e:	f9 01       	movw	r30, r18
 640:	31 97       	sbiw	r30, 0x01	; 1
 642:	f1 f7       	brne	.-4      	; 0x640 <__vector_6+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 644:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 646:	d9 f7       	brne	.-10     	; 0x63e <__vector_6+0x32>
	_delay_ms(500);
	align_cw();
 648:	0e 94 b5 02 	call	0x56a	; 0x56a <align_cw>
    flag=1;
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	80 93 1e 01 	sts	0x011E, r24
}
 652:	ff 91       	pop	r31
 654:	ef 91       	pop	r30
 656:	bf 91       	pop	r27
 658:	af 91       	pop	r26
 65a:	9f 91       	pop	r25
 65c:	8f 91       	pop	r24
 65e:	7f 91       	pop	r23
 660:	6f 91       	pop	r22
 662:	5f 91       	pop	r21
 664:	4f 91       	pop	r20
 666:	3f 91       	pop	r19
 668:	2f 91       	pop	r18
 66a:	0f 90       	pop	r0
 66c:	0b be       	out	0x3b, r0	; 59
 66e:	0f 90       	pop	r0
 670:	0f be       	out	0x3f, r0	; 63
 672:	0f 90       	pop	r0
 674:	1f 90       	pop	r1
 676:	18 95       	reti

00000678 <motor_execute>:
	lcd_num(eeprom_read_byte(25));
	

	}
void motor_execute(void)
{cli();
 678:	af 92       	push	r10
 67a:	bf 92       	push	r11
 67c:	cf 92       	push	r12
 67e:	df 92       	push	r13
 680:	ef 92       	push	r14
 682:	ff 92       	push	r15
 684:	0f 93       	push	r16
 686:	1f 93       	push	r17
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	f8 94       	cli
	unsigned char degree_exec;
	unsigned char degree_exec_ccw;
	
	unsigned char variance;
	
	degree_set_new=eeprom_read_byte(25);
 68e:	89 e1       	ldi	r24, 0x19	; 25
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__eerd_byte_m128>
 696:	80 93 1d 01 	sts	0x011D, r24
	lcd_gotoxy1(6);
	lcd_string("EX=");
	lcd_num(degree_set_new);
	degree_exec=10-degree_set_new;
	PORTC=0xaf;*/
    for(degree_exec_cw=degree_set_new;degree_exec_cw<13;) // replace 12 for 120deg
 69a:	10 91 1d 01 	lds	r17, 0x011D
    	{
        PORTC=0x33;
 69e:	53 e3       	ldi	r21, 0x33	; 51
 6a0:	a5 2e       	mov	r10, r21
 6a2:	4c ea       	ldi	r20, 0xAC	; 172
 6a4:	c4 2e       	mov	r12, r20
 6a6:	48 e0       	ldi	r20, 0x08	; 8
 6a8:	d4 2e       	mov	r13, r20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 6aa:	3a e1       	ldi	r19, 0x1A	; 26
 6ac:	b3 2e       	mov	r11, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6ae:	20 e8       	ldi	r18, 0x80	; 128
 6b0:	e2 2e       	mov	r14, r18
 6b2:	2e e3       	ldi	r18, 0x3E	; 62
 6b4:	f2 2e       	mov	r15, r18
            
            degree_exec_cw=eeprom_read_byte(25);
            lcd_gotoxy2(13);
            lcd_num(degree_exec_cw);
            _delay_ms(300);
            PORTC=0x01;
 6b6:	c0 e9       	ldi	r28, 0x90	; 144
 6b8:	d1 e0       	ldi	r29, 0x01	; 1
 6ba:	01 e0       	ldi	r16, 0x01	; 1
 6bc:	52 c0       	rjmp	.+164    	; 0x762 <motor_execute+0xea>
	lcd_num(degree_set_new);
	degree_exec=10-degree_set_new;
	PORTC=0xaf;*/
    for(degree_exec_cw=degree_set_new;degree_exec_cw<13;) // replace 12 for 120deg
    	{
        PORTC=0x33;
 6be:	a5 ba       	out	0x15, r10	; 21
        motor_dir_cw();
 6c0:	0e 94 9a 01 	call	0x334	; 0x334 <motor_dir_cw>
        for(degree=0;degree<50;degree++)
 6c4:	10 92 23 01 	sts	0x0123, r1
 6c8:	16 c0       	rjmp	.+44     	; 0x6f6 <motor_execute+0x7e>
            {cli();
 6ca:	f8 94       	cli
            PORTG|=(1<<4);
 6cc:	80 91 65 00 	lds	r24, 0x0065
 6d0:	80 61       	ori	r24, 0x10	; 16
 6d2:	80 93 65 00 	sts	0x0065, r24
 6d6:	c6 01       	movw	r24, r12
 6d8:	01 97       	sbiw	r24, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <motor_execute+0x60>
            _delay_us(555);
            PORTG&=~(1<<4);
 6dc:	80 91 65 00 	lds	r24, 0x0065
 6e0:	8f 7e       	andi	r24, 0xEF	; 239
 6e2:	80 93 65 00 	sts	0x0065, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 6e6:	8b 2d       	mov	r24, r11
 6e8:	8a 95       	dec	r24
 6ea:	f1 f7       	brne	.-4      	; 0x6e8 <motor_execute+0x70>
	PORTC=0xaf;*/
    for(degree_exec_cw=degree_set_new;degree_exec_cw<13;) // replace 12 for 120deg
    	{
        PORTC=0x33;
        motor_dir_cw();
        for(degree=0;degree<50;degree++)
 6ec:	80 91 23 01 	lds	r24, 0x0123
 6f0:	8f 5f       	subi	r24, 0xFF	; 255
 6f2:	80 93 23 01 	sts	0x0123, r24
 6f6:	80 91 23 01 	lds	r24, 0x0123
 6fa:	82 33       	cpi	r24, 0x32	; 50
 6fc:	30 f3       	brcs	.-52     	; 0x6ca <motor_execute+0x52>
            _delay_us(555);
            PORTG&=~(1<<4);
            _delay_us(5);
            
            }
            degree_exec_cw++;
 6fe:	1f 5f       	subi	r17, 0xFF	; 255
            eeprom_write_byte(25,degree_exec_cw);
 700:	89 e1       	ldi	r24, 0x19	; 25
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	61 2f       	mov	r22, r17
 706:	0e 94 03 07 	call	0xe06	; 0xe06 <__eewr_byte_m128>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 70a:	c7 01       	movw	r24, r14
 70c:	01 97       	sbiw	r24, 0x01	; 1
 70e:	f1 f7       	brne	.-4      	; 0x70c <motor_execute+0x94>
             
             //sei();
            _delay_ms(4);
           
            if (flag==1)
 710:	80 91 1e 01 	lds	r24, 0x011E
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	a1 f4       	brne	.+40     	; 0x740 <motor_execute+0xc8>
            {
            
            degree_exec_cw=eeprom_read_byte(25);
 718:	89 e1       	ldi	r24, 0x19	; 25
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__eerd_byte_m128>
 720:	18 2f       	mov	r17, r24
            lcd_gotoxy2(13);
 722:	8d e0       	ldi	r24, 0x0D	; 13
 724:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
            lcd_num(degree_exec_cw);
 728:	81 2f       	mov	r24, r17
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_num>
 730:	88 eb       	ldi	r24, 0xB8	; 184
 732:	9b e0       	ldi	r25, 0x0B	; 11
 734:	fe 01       	movw	r30, r28
 736:	31 97       	sbiw	r30, 0x01	; 1
 738:	f1 f7       	brne	.-4      	; 0x736 <motor_execute+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 73a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 73c:	d9 f7       	brne	.-10     	; 0x734 <motor_execute+0xbc>
            _delay_ms(300);
            PORTC=0x01;
 73e:	05 bb       	out	0x15, r16	; 21
            }
            
        //_delay_ms(240000);
        lcd_gotoxy1(10);
 740:	8a e0       	ldi	r24, 0x0A	; 10
 742:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy1>
        lcd_string("   ");
 746:	81 e1       	ldi	r24, 0x11	; 17
 748:	91 e0       	ldi	r25, 0x01	; 1
 74a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
        lcd_gotoxy1(10);
 74e:	8a e0       	ldi	r24, 0x0A	; 10
 750:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy1>
        lcd_num(eeprom_read_byte(25));
 754:	89 e1       	ldi	r24, 0x19	; 25
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__eerd_byte_m128>
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_num>
	lcd_gotoxy1(6);
	lcd_string("EX=");
	lcd_num(degree_set_new);
	degree_exec=10-degree_set_new;
	PORTC=0xaf;*/
    for(degree_exec_cw=degree_set_new;degree_exec_cw<13;) // replace 12 for 120deg
 762:	1d 30       	cpi	r17, 0x0D	; 13
 764:	08 f4       	brcc	.+2      	; 0x768 <motor_execute+0xf0>
 766:	ab cf       	rjmp	.-170    	; 0x6be <motor_execute+0x46>
 768:	1d e0       	ldi	r17, 0x0D	; 13
        
        
    
   
    for(degree_exec_ccw=13;degree_exec_ccw>1;)
    {   PORTC=0x77;
 76a:	97 e7       	ldi	r25, 0x77	; 119
 76c:	f9 2e       	mov	r15, r25
 76e:	cc ea       	ldi	r28, 0xAC	; 172
 770:	d8 e0       	ldi	r29, 0x08	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 772:	0a e1       	ldi	r16, 0x1A	; 26
 774:	f5 ba       	out	0x15, r15	; 21
        //cli();
        motor_dir_ccw();
 776:	0e 94 a9 01 	call	0x352	; 0x352 <motor_dir_ccw>
        for(degree=0;degree<50;degree++)
 77a:	10 92 23 01 	sts	0x0123, r1
 77e:	15 c0       	rjmp	.+42     	; 0x7aa <motor_execute+0x132>
        {
            PORTG|=(1<<4);
 780:	80 91 65 00 	lds	r24, 0x0065
 784:	80 61       	ori	r24, 0x10	; 16
 786:	80 93 65 00 	sts	0x0065, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 78a:	ce 01       	movw	r24, r28
 78c:	01 97       	sbiw	r24, 0x01	; 1
 78e:	f1 f7       	brne	.-4      	; 0x78c <motor_execute+0x114>
            _delay_us(555);
            PORTG&=~(1<<4);
 790:	80 91 65 00 	lds	r24, 0x0065
 794:	8f 7e       	andi	r24, 0xEF	; 239
 796:	80 93 65 00 	sts	0x0065, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 79a:	80 2f       	mov	r24, r16
 79c:	8a 95       	dec	r24
 79e:	f1 f7       	brne	.-4      	; 0x79c <motor_execute+0x124>
   
    for(degree_exec_ccw=13;degree_exec_ccw>1;)
    {   PORTC=0x77;
        //cli();
        motor_dir_ccw();
        for(degree=0;degree<50;degree++)
 7a0:	80 91 23 01 	lds	r24, 0x0123
 7a4:	8f 5f       	subi	r24, 0xFF	; 255
 7a6:	80 93 23 01 	sts	0x0123, r24
 7aa:	80 91 23 01 	lds	r24, 0x0123
 7ae:	82 33       	cpi	r24, 0x32	; 50
 7b0:	38 f3       	brcs	.-50     	; 0x780 <motor_execute+0x108>
            PORTG|=(1<<4);
            _delay_us(555);
            PORTG&=~(1<<4);
            _delay_us(5);
        }
        degree_exec_ccw--;
 7b2:	11 50       	subi	r17, 0x01	; 1
        eeprom_write_byte(25,degree_exec_ccw);
 7b4:	89 e1       	ldi	r24, 0x19	; 25
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	61 2f       	mov	r22, r17
 7ba:	0e 94 03 07 	call	0xe06	; 0xe06 <__eewr_byte_m128>
        lcd_gotoxy1(10);
 7be:	8a e0       	ldi	r24, 0x0A	; 10
 7c0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy1>
        lcd_string("   ");
 7c4:	81 e1       	ldi	r24, 0x11	; 17
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
        lcd_gotoxy1(10);
 7cc:	8a e0       	ldi	r24, 0x0A	; 10
 7ce:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_gotoxy1>
        lcd_num(eeprom_read_byte(25));
 7d2:	89 e1       	ldi	r24, 0x19	; 25
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__eerd_byte_m128>
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_num>
        }*/
        
        
    
   
    for(degree_exec_ccw=13;degree_exec_ccw>1;)
 7e0:	11 30       	cpi	r17, 0x01	; 1
 7e2:	41 f6       	brne	.-112    	; 0x774 <motor_execute+0xfc>
        lcd_num(eeprom_read_byte(25));
        //sei();
    }


sei();
 7e4:	78 94       	sei
}
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	1f 91       	pop	r17
 7ec:	0f 91       	pop	r16
 7ee:	ff 90       	pop	r15
 7f0:	ef 90       	pop	r14
 7f2:	df 90       	pop	r13
 7f4:	cf 90       	pop	r12
 7f6:	bf 90       	pop	r11
 7f8:	af 90       	pop	r10
 7fa:	08 95       	ret

000007fc <main>:
EIMSK|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
}


void main()
{
 7fc:	1f 93       	push	r17

DDRC=0xff;
 7fe:	1f ef       	ldi	r17, 0xFF	; 255
 800:	14 bb       	out	0x14, r17	; 20
DDRE&=~((1<<4)|(1<<5)|(1<<6)); // External Interrupt Enable
 802:	82 b1       	in	r24, 0x02	; 2
 804:	8f 78       	andi	r24, 0x8F	; 143
 806:	82 b9       	out	0x02, r24	; 2
PORTE|=(1<<4)|(1<<5)|(1<<6);
 808:	83 b1       	in	r24, 0x03	; 3
 80a:	80 67       	ori	r24, 0x70	; 112
 80c:	83 b9       	out	0x03, r24	; 3
lcd_init();
 80e:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_init>
DDRC=0xff;
 812:	14 bb       	out	0x14, r17	; 20
DDRG|=(1<<0)|(1<<4);
 814:	80 91 64 00 	lds	r24, 0x0064
 818:	81 61       	ori	r24, 0x11	; 17
 81a:	80 93 64 00 	sts	0x0064, r24
DDRD&=~(1<<6);
 81e:	8e 98       	cbi	0x11, 6	; 17
PORTD=(1<<6);
 820:	80 e4       	ldi	r24, 0x40	; 64
 822:	82 bb       	out	0x12, r24	; 18
PORTG&=~(1<<0);
 824:	80 91 65 00 	lds	r24, 0x0065
 828:	8e 7f       	andi	r24, 0xFE	; 254
 82a:	80 93 65 00 	sts	0x0065, r24
sei();
 82e:	78 94       	sei
	}


void ext_timer_init()
{
EICRB=0x00;
 830:	1a be       	out	0x3a, r1	; 58
EIMSK|=(1<<4)|(1<<5)|(1<<6)|(1<<7);
 832:	89 b7       	in	r24, 0x39	; 57
 834:	80 6f       	ori	r24, 0xF0	; 240
 836:	89 bf       	out	0x39, r24	; 57
PORTD=(1<<6);
PORTG&=~(1<<0);
sei();
ext_timer_init();
unsigned char data;
motor_execute();
 838:	0e 94 3c 03 	call	0x678	; 0x678 <motor_execute>
 83c:	ff cf       	rjmp	.-2      	; 0x83c <main+0x40>

0000083e <__vector_8>:
	lcd_num(eeprom_read_byte(25));

	}

ISR(INT7_vect)
	{
 83e:	1f 92       	push	r1
 840:	0f 92       	push	r0
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	0f 92       	push	r0
 846:	0b b6       	in	r0, 0x3b	; 59
 848:	0f 92       	push	r0
 84a:	11 24       	eor	r1, r1
 84c:	2f 93       	push	r18
 84e:	3f 93       	push	r19
 850:	4f 93       	push	r20
 852:	5f 93       	push	r21
 854:	6f 93       	push	r22
 856:	7f 93       	push	r23
 858:	8f 93       	push	r24
 85a:	9f 93       	push	r25
 85c:	af 93       	push	r26
 85e:	bf 93       	push	r27
 860:	ef 93       	push	r30
 862:	ff 93       	push	r31
	lcd_gotoxy2(10);
 864:	8a e0       	ldi	r24, 0x0A	; 10
 866:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
	lcd_string("  ");
 86a:	85 e1       	ldi	r24, 0x15	; 21
 86c:	91 e0       	ldi	r25, 0x01	; 1
 86e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
	lcd_gotoxy2(10);
 872:	8a e0       	ldi	r24, 0x0A	; 10
 874:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
	lcd_num(eeprom_read_byte(25));
 878:	89 e1       	ldi	r24, 0x19	; 25
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__eerd_byte_m128>
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_num>
	

	}
 886:	ff 91       	pop	r31
 888:	ef 91       	pop	r30
 88a:	bf 91       	pop	r27
 88c:	af 91       	pop	r26
 88e:	9f 91       	pop	r25
 890:	8f 91       	pop	r24
 892:	7f 91       	pop	r23
 894:	6f 91       	pop	r22
 896:	5f 91       	pop	r21
 898:	4f 91       	pop	r20
 89a:	3f 91       	pop	r19
 89c:	2f 91       	pop	r18
 89e:	0f 90       	pop	r0
 8a0:	0b be       	out	0x3b, r0	; 59
 8a2:	0f 90       	pop	r0
 8a4:	0f be       	out	0x3f, r0	; 63
 8a6:	0f 90       	pop	r0
 8a8:	1f 90       	pop	r1
 8aa:	18 95       	reti

000008ac <__vector_7>:
	_delay_ms(500);
	align_cw();
    flag=1;
}
ISR(INT6_vect) // Setting degree_exec=0
{
 8ac:	1f 92       	push	r1
 8ae:	0f 92       	push	r0
 8b0:	0f b6       	in	r0, 0x3f	; 63
 8b2:	0f 92       	push	r0
 8b4:	0b b6       	in	r0, 0x3b	; 59
 8b6:	0f 92       	push	r0
 8b8:	11 24       	eor	r1, r1
 8ba:	2f 93       	push	r18
 8bc:	3f 93       	push	r19
 8be:	4f 93       	push	r20
 8c0:	5f 93       	push	r21
 8c2:	6f 93       	push	r22
 8c4:	7f 93       	push	r23
 8c6:	8f 93       	push	r24
 8c8:	9f 93       	push	r25
 8ca:	af 93       	push	r26
 8cc:	bf 93       	push	r27
 8ce:	ef 93       	push	r30
 8d0:	ff 93       	push	r31
 8d2:	88 e8       	ldi	r24, 0x88	; 136
 8d4:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 8d6:	20 e9       	ldi	r18, 0x90	; 144
 8d8:	31 e0       	ldi	r19, 0x01	; 1
 8da:	f9 01       	movw	r30, r18
 8dc:	31 97       	sbiw	r30, 0x01	; 1
 8de:	f1 f7       	brne	.-4      	; 0x8dc <__vector_7+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8e2:	d9 f7       	brne	.-10     	; 0x8da <__vector_7+0x2e>
	_delay_ms(500);
	PORTC=0xf2;
 8e4:	82 ef       	ldi	r24, 0xF2	; 242
 8e6:	85 bb       	out	0x15, r24	; 21
	eeprom_write_byte(25,1);
 8e8:	89 e1       	ldi	r24, 0x19	; 25
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	61 e0       	ldi	r22, 0x01	; 1
 8ee:	0e 94 03 07 	call	0xe06	; 0xe06 <__eewr_byte_m128>
	lcd_gotoxy2(5);
 8f2:	85 e0       	ldi	r24, 0x05	; 5
 8f4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
	lcd_string("  ");
 8f8:	85 e1       	ldi	r24, 0x15	; 21
 8fa:	91 e0       	ldi	r25, 0x01	; 1
 8fc:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_string>
	lcd_gotoxy2(5);
 900:	85 e0       	ldi	r24, 0x05	; 5
 902:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy2>
	lcd_num(eeprom_read_byte(25));
 906:	89 e1       	ldi	r24, 0x19	; 25
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__eerd_byte_m128>
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_num>

	}
 914:	ff 91       	pop	r31
 916:	ef 91       	pop	r30
 918:	bf 91       	pop	r27
 91a:	af 91       	pop	r26
 91c:	9f 91       	pop	r25
 91e:	8f 91       	pop	r24
 920:	7f 91       	pop	r23
 922:	6f 91       	pop	r22
 924:	5f 91       	pop	r21
 926:	4f 91       	pop	r20
 928:	3f 91       	pop	r19
 92a:	2f 91       	pop	r18
 92c:	0f 90       	pop	r0
 92e:	0b be       	out	0x3b, r0	; 59
 930:	0f 90       	pop	r0
 932:	0f be       	out	0x3f, r0	; 63
 934:	0f 90       	pop	r0
 936:	1f 90       	pop	r1
 938:	18 95       	reti

0000093a <__divmodhi4>:
 93a:	97 fb       	bst	r25, 7
 93c:	09 2e       	mov	r0, r25
 93e:	07 26       	eor	r0, r23
 940:	0a d0       	rcall	.+20     	; 0x956 <__divmodhi4_neg1>
 942:	77 fd       	sbrc	r23, 7
 944:	04 d0       	rcall	.+8      	; 0x94e <__divmodhi4_neg2>
 946:	0c d0       	rcall	.+24     	; 0x960 <__udivmodhi4>
 948:	06 d0       	rcall	.+12     	; 0x956 <__divmodhi4_neg1>
 94a:	00 20       	and	r0, r0
 94c:	1a f4       	brpl	.+6      	; 0x954 <__divmodhi4_exit>

0000094e <__divmodhi4_neg2>:
 94e:	70 95       	com	r23
 950:	61 95       	neg	r22
 952:	7f 4f       	sbci	r23, 0xFF	; 255

00000954 <__divmodhi4_exit>:
 954:	08 95       	ret

00000956 <__divmodhi4_neg1>:
 956:	f6 f7       	brtc	.-4      	; 0x954 <__divmodhi4_exit>
 958:	90 95       	com	r25
 95a:	81 95       	neg	r24
 95c:	9f 4f       	sbci	r25, 0xFF	; 255
 95e:	08 95       	ret

00000960 <__udivmodhi4>:
 960:	aa 1b       	sub	r26, r26
 962:	bb 1b       	sub	r27, r27
 964:	51 e1       	ldi	r21, 0x11	; 17
 966:	07 c0       	rjmp	.+14     	; 0x976 <__udivmodhi4_ep>

00000968 <__udivmodhi4_loop>:
 968:	aa 1f       	adc	r26, r26
 96a:	bb 1f       	adc	r27, r27
 96c:	a6 17       	cp	r26, r22
 96e:	b7 07       	cpc	r27, r23
 970:	10 f0       	brcs	.+4      	; 0x976 <__udivmodhi4_ep>
 972:	a6 1b       	sub	r26, r22
 974:	b7 0b       	sbc	r27, r23

00000976 <__udivmodhi4_ep>:
 976:	88 1f       	adc	r24, r24
 978:	99 1f       	adc	r25, r25
 97a:	5a 95       	dec	r21
 97c:	a9 f7       	brne	.-22     	; 0x968 <__udivmodhi4_loop>
 97e:	80 95       	com	r24
 980:	90 95       	com	r25
 982:	bc 01       	movw	r22, r24
 984:	cd 01       	movw	r24, r26
 986:	08 95       	ret

00000988 <sprintf>:
 988:	0f 93       	push	r16
 98a:	1f 93       	push	r17
 98c:	df 93       	push	r29
 98e:	cf 93       	push	r28
 990:	cd b7       	in	r28, 0x3d	; 61
 992:	de b7       	in	r29, 0x3e	; 62
 994:	2e 97       	sbiw	r28, 0x0e	; 14
 996:	0f b6       	in	r0, 0x3f	; 63
 998:	f8 94       	cli
 99a:	de bf       	out	0x3e, r29	; 62
 99c:	0f be       	out	0x3f, r0	; 63
 99e:	cd bf       	out	0x3d, r28	; 61
 9a0:	0d 89       	ldd	r16, Y+21	; 0x15
 9a2:	1e 89       	ldd	r17, Y+22	; 0x16
 9a4:	86 e0       	ldi	r24, 0x06	; 6
 9a6:	8c 83       	std	Y+4, r24	; 0x04
 9a8:	1a 83       	std	Y+2, r17	; 0x02
 9aa:	09 83       	std	Y+1, r16	; 0x01
 9ac:	8f ef       	ldi	r24, 0xFF	; 255
 9ae:	9f e7       	ldi	r25, 0x7F	; 127
 9b0:	9e 83       	std	Y+6, r25	; 0x06
 9b2:	8d 83       	std	Y+5, r24	; 0x05
 9b4:	9e 01       	movw	r18, r28
 9b6:	27 5e       	subi	r18, 0xE7	; 231
 9b8:	3f 4f       	sbci	r19, 0xFF	; 255
 9ba:	ce 01       	movw	r24, r28
 9bc:	01 96       	adiw	r24, 0x01	; 1
 9be:	6f 89       	ldd	r22, Y+23	; 0x17
 9c0:	78 8d       	ldd	r23, Y+24	; 0x18
 9c2:	a9 01       	movw	r20, r18
 9c4:	0e 94 f5 04 	call	0x9ea	; 0x9ea <vfprintf>
 9c8:	2f 81       	ldd	r18, Y+7	; 0x07
 9ca:	38 85       	ldd	r19, Y+8	; 0x08
 9cc:	02 0f       	add	r16, r18
 9ce:	13 1f       	adc	r17, r19
 9d0:	f8 01       	movw	r30, r16
 9d2:	10 82       	st	Z, r1
 9d4:	2e 96       	adiw	r28, 0x0e	; 14
 9d6:	0f b6       	in	r0, 0x3f	; 63
 9d8:	f8 94       	cli
 9da:	de bf       	out	0x3e, r29	; 62
 9dc:	0f be       	out	0x3f, r0	; 63
 9de:	cd bf       	out	0x3d, r28	; 61
 9e0:	cf 91       	pop	r28
 9e2:	df 91       	pop	r29
 9e4:	1f 91       	pop	r17
 9e6:	0f 91       	pop	r16
 9e8:	08 95       	ret

000009ea <vfprintf>:
 9ea:	2f 92       	push	r2
 9ec:	3f 92       	push	r3
 9ee:	4f 92       	push	r4
 9f0:	5f 92       	push	r5
 9f2:	6f 92       	push	r6
 9f4:	7f 92       	push	r7
 9f6:	8f 92       	push	r8
 9f8:	9f 92       	push	r9
 9fa:	af 92       	push	r10
 9fc:	bf 92       	push	r11
 9fe:	cf 92       	push	r12
 a00:	df 92       	push	r13
 a02:	ef 92       	push	r14
 a04:	ff 92       	push	r15
 a06:	0f 93       	push	r16
 a08:	1f 93       	push	r17
 a0a:	df 93       	push	r29
 a0c:	cf 93       	push	r28
 a0e:	cd b7       	in	r28, 0x3d	; 61
 a10:	de b7       	in	r29, 0x3e	; 62
 a12:	2b 97       	sbiw	r28, 0x0b	; 11
 a14:	0f b6       	in	r0, 0x3f	; 63
 a16:	f8 94       	cli
 a18:	de bf       	out	0x3e, r29	; 62
 a1a:	0f be       	out	0x3f, r0	; 63
 a1c:	cd bf       	out	0x3d, r28	; 61
 a1e:	3c 01       	movw	r6, r24
 a20:	2b 01       	movw	r4, r22
 a22:	5a 01       	movw	r10, r20
 a24:	fc 01       	movw	r30, r24
 a26:	17 82       	std	Z+7, r1	; 0x07
 a28:	16 82       	std	Z+6, r1	; 0x06
 a2a:	83 81       	ldd	r24, Z+3	; 0x03
 a2c:	81 fd       	sbrc	r24, 1
 a2e:	03 c0       	rjmp	.+6      	; 0xa36 <vfprintf+0x4c>
 a30:	6f ef       	ldi	r22, 0xFF	; 255
 a32:	7f ef       	ldi	r23, 0xFF	; 255
 a34:	c6 c1       	rjmp	.+908    	; 0xdc2 <vfprintf+0x3d8>
 a36:	9a e0       	ldi	r25, 0x0A	; 10
 a38:	89 2e       	mov	r8, r25
 a3a:	1e 01       	movw	r2, r28
 a3c:	08 94       	sec
 a3e:	21 1c       	adc	r2, r1
 a40:	31 1c       	adc	r3, r1
 a42:	f3 01       	movw	r30, r6
 a44:	23 81       	ldd	r18, Z+3	; 0x03
 a46:	f2 01       	movw	r30, r4
 a48:	23 fd       	sbrc	r18, 3
 a4a:	85 91       	lpm	r24, Z+
 a4c:	23 ff       	sbrs	r18, 3
 a4e:	81 91       	ld	r24, Z+
 a50:	2f 01       	movw	r4, r30
 a52:	88 23       	and	r24, r24
 a54:	09 f4       	brne	.+2      	; 0xa58 <vfprintf+0x6e>
 a56:	b2 c1       	rjmp	.+868    	; 0xdbc <vfprintf+0x3d2>
 a58:	85 32       	cpi	r24, 0x25	; 37
 a5a:	39 f4       	brne	.+14     	; 0xa6a <vfprintf+0x80>
 a5c:	23 fd       	sbrc	r18, 3
 a5e:	85 91       	lpm	r24, Z+
 a60:	23 ff       	sbrs	r18, 3
 a62:	81 91       	ld	r24, Z+
 a64:	2f 01       	movw	r4, r30
 a66:	85 32       	cpi	r24, 0x25	; 37
 a68:	29 f4       	brne	.+10     	; 0xa74 <vfprintf+0x8a>
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	b3 01       	movw	r22, r6
 a6e:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 a72:	e7 cf       	rjmp	.-50     	; 0xa42 <vfprintf+0x58>
 a74:	98 2f       	mov	r25, r24
 a76:	ff 24       	eor	r15, r15
 a78:	ee 24       	eor	r14, r14
 a7a:	99 24       	eor	r9, r9
 a7c:	ff e1       	ldi	r31, 0x1F	; 31
 a7e:	ff 15       	cp	r31, r15
 a80:	d0 f0       	brcs	.+52     	; 0xab6 <vfprintf+0xcc>
 a82:	9b 32       	cpi	r25, 0x2B	; 43
 a84:	69 f0       	breq	.+26     	; 0xaa0 <vfprintf+0xb6>
 a86:	9c 32       	cpi	r25, 0x2C	; 44
 a88:	28 f4       	brcc	.+10     	; 0xa94 <vfprintf+0xaa>
 a8a:	90 32       	cpi	r25, 0x20	; 32
 a8c:	59 f0       	breq	.+22     	; 0xaa4 <vfprintf+0xba>
 a8e:	93 32       	cpi	r25, 0x23	; 35
 a90:	91 f4       	brne	.+36     	; 0xab6 <vfprintf+0xcc>
 a92:	0e c0       	rjmp	.+28     	; 0xab0 <vfprintf+0xc6>
 a94:	9d 32       	cpi	r25, 0x2D	; 45
 a96:	49 f0       	breq	.+18     	; 0xaaa <vfprintf+0xc0>
 a98:	90 33       	cpi	r25, 0x30	; 48
 a9a:	69 f4       	brne	.+26     	; 0xab6 <vfprintf+0xcc>
 a9c:	41 e0       	ldi	r20, 0x01	; 1
 a9e:	24 c0       	rjmp	.+72     	; 0xae8 <vfprintf+0xfe>
 aa0:	52 e0       	ldi	r21, 0x02	; 2
 aa2:	f5 2a       	or	r15, r21
 aa4:	84 e0       	ldi	r24, 0x04	; 4
 aa6:	f8 2a       	or	r15, r24
 aa8:	28 c0       	rjmp	.+80     	; 0xafa <vfprintf+0x110>
 aaa:	98 e0       	ldi	r25, 0x08	; 8
 aac:	f9 2a       	or	r15, r25
 aae:	25 c0       	rjmp	.+74     	; 0xafa <vfprintf+0x110>
 ab0:	e0 e1       	ldi	r30, 0x10	; 16
 ab2:	fe 2a       	or	r15, r30
 ab4:	22 c0       	rjmp	.+68     	; 0xafa <vfprintf+0x110>
 ab6:	f7 fc       	sbrc	r15, 7
 ab8:	29 c0       	rjmp	.+82     	; 0xb0c <vfprintf+0x122>
 aba:	89 2f       	mov	r24, r25
 abc:	80 53       	subi	r24, 0x30	; 48
 abe:	8a 30       	cpi	r24, 0x0A	; 10
 ac0:	70 f4       	brcc	.+28     	; 0xade <vfprintf+0xf4>
 ac2:	f6 fe       	sbrs	r15, 6
 ac4:	05 c0       	rjmp	.+10     	; 0xad0 <vfprintf+0xe6>
 ac6:	98 9c       	mul	r9, r8
 ac8:	90 2c       	mov	r9, r0
 aca:	11 24       	eor	r1, r1
 acc:	98 0e       	add	r9, r24
 ace:	15 c0       	rjmp	.+42     	; 0xafa <vfprintf+0x110>
 ad0:	e8 9c       	mul	r14, r8
 ad2:	e0 2c       	mov	r14, r0
 ad4:	11 24       	eor	r1, r1
 ad6:	e8 0e       	add	r14, r24
 ad8:	f0 e2       	ldi	r31, 0x20	; 32
 ada:	ff 2a       	or	r15, r31
 adc:	0e c0       	rjmp	.+28     	; 0xafa <vfprintf+0x110>
 ade:	9e 32       	cpi	r25, 0x2E	; 46
 ae0:	29 f4       	brne	.+10     	; 0xaec <vfprintf+0x102>
 ae2:	f6 fc       	sbrc	r15, 6
 ae4:	6b c1       	rjmp	.+726    	; 0xdbc <vfprintf+0x3d2>
 ae6:	40 e4       	ldi	r20, 0x40	; 64
 ae8:	f4 2a       	or	r15, r20
 aea:	07 c0       	rjmp	.+14     	; 0xafa <vfprintf+0x110>
 aec:	9c 36       	cpi	r25, 0x6C	; 108
 aee:	19 f4       	brne	.+6      	; 0xaf6 <vfprintf+0x10c>
 af0:	50 e8       	ldi	r21, 0x80	; 128
 af2:	f5 2a       	or	r15, r21
 af4:	02 c0       	rjmp	.+4      	; 0xafa <vfprintf+0x110>
 af6:	98 36       	cpi	r25, 0x68	; 104
 af8:	49 f4       	brne	.+18     	; 0xb0c <vfprintf+0x122>
 afa:	f2 01       	movw	r30, r4
 afc:	23 fd       	sbrc	r18, 3
 afe:	95 91       	lpm	r25, Z+
 b00:	23 ff       	sbrs	r18, 3
 b02:	91 91       	ld	r25, Z+
 b04:	2f 01       	movw	r4, r30
 b06:	99 23       	and	r25, r25
 b08:	09 f0       	breq	.+2      	; 0xb0c <vfprintf+0x122>
 b0a:	b8 cf       	rjmp	.-144    	; 0xa7c <vfprintf+0x92>
 b0c:	89 2f       	mov	r24, r25
 b0e:	85 54       	subi	r24, 0x45	; 69
 b10:	83 30       	cpi	r24, 0x03	; 3
 b12:	18 f0       	brcs	.+6      	; 0xb1a <vfprintf+0x130>
 b14:	80 52       	subi	r24, 0x20	; 32
 b16:	83 30       	cpi	r24, 0x03	; 3
 b18:	38 f4       	brcc	.+14     	; 0xb28 <vfprintf+0x13e>
 b1a:	44 e0       	ldi	r20, 0x04	; 4
 b1c:	50 e0       	ldi	r21, 0x00	; 0
 b1e:	a4 0e       	add	r10, r20
 b20:	b5 1e       	adc	r11, r21
 b22:	5f e3       	ldi	r21, 0x3F	; 63
 b24:	59 83       	std	Y+1, r21	; 0x01
 b26:	0f c0       	rjmp	.+30     	; 0xb46 <vfprintf+0x15c>
 b28:	93 36       	cpi	r25, 0x63	; 99
 b2a:	31 f0       	breq	.+12     	; 0xb38 <vfprintf+0x14e>
 b2c:	93 37       	cpi	r25, 0x73	; 115
 b2e:	79 f0       	breq	.+30     	; 0xb4e <vfprintf+0x164>
 b30:	93 35       	cpi	r25, 0x53	; 83
 b32:	09 f0       	breq	.+2      	; 0xb36 <vfprintf+0x14c>
 b34:	56 c0       	rjmp	.+172    	; 0xbe2 <vfprintf+0x1f8>
 b36:	20 c0       	rjmp	.+64     	; 0xb78 <vfprintf+0x18e>
 b38:	f5 01       	movw	r30, r10
 b3a:	80 81       	ld	r24, Z
 b3c:	89 83       	std	Y+1, r24	; 0x01
 b3e:	42 e0       	ldi	r20, 0x02	; 2
 b40:	50 e0       	ldi	r21, 0x00	; 0
 b42:	a4 0e       	add	r10, r20
 b44:	b5 1e       	adc	r11, r21
 b46:	61 01       	movw	r12, r2
 b48:	01 e0       	ldi	r16, 0x01	; 1
 b4a:	10 e0       	ldi	r17, 0x00	; 0
 b4c:	12 c0       	rjmp	.+36     	; 0xb72 <vfprintf+0x188>
 b4e:	f5 01       	movw	r30, r10
 b50:	c0 80       	ld	r12, Z
 b52:	d1 80       	ldd	r13, Z+1	; 0x01
 b54:	f6 fc       	sbrc	r15, 6
 b56:	03 c0       	rjmp	.+6      	; 0xb5e <vfprintf+0x174>
 b58:	6f ef       	ldi	r22, 0xFF	; 255
 b5a:	7f ef       	ldi	r23, 0xFF	; 255
 b5c:	02 c0       	rjmp	.+4      	; 0xb62 <vfprintf+0x178>
 b5e:	69 2d       	mov	r22, r9
 b60:	70 e0       	ldi	r23, 0x00	; 0
 b62:	42 e0       	ldi	r20, 0x02	; 2
 b64:	50 e0       	ldi	r21, 0x00	; 0
 b66:	a4 0e       	add	r10, r20
 b68:	b5 1e       	adc	r11, r21
 b6a:	c6 01       	movw	r24, r12
 b6c:	0e 94 1b 07 	call	0xe36	; 0xe36 <strnlen>
 b70:	8c 01       	movw	r16, r24
 b72:	5f e7       	ldi	r21, 0x7F	; 127
 b74:	f5 22       	and	r15, r21
 b76:	14 c0       	rjmp	.+40     	; 0xba0 <vfprintf+0x1b6>
 b78:	f5 01       	movw	r30, r10
 b7a:	c0 80       	ld	r12, Z
 b7c:	d1 80       	ldd	r13, Z+1	; 0x01
 b7e:	f6 fc       	sbrc	r15, 6
 b80:	03 c0       	rjmp	.+6      	; 0xb88 <vfprintf+0x19e>
 b82:	6f ef       	ldi	r22, 0xFF	; 255
 b84:	7f ef       	ldi	r23, 0xFF	; 255
 b86:	02 c0       	rjmp	.+4      	; 0xb8c <vfprintf+0x1a2>
 b88:	69 2d       	mov	r22, r9
 b8a:	70 e0       	ldi	r23, 0x00	; 0
 b8c:	42 e0       	ldi	r20, 0x02	; 2
 b8e:	50 e0       	ldi	r21, 0x00	; 0
 b90:	a4 0e       	add	r10, r20
 b92:	b5 1e       	adc	r11, r21
 b94:	c6 01       	movw	r24, r12
 b96:	0e 94 10 07 	call	0xe20	; 0xe20 <strnlen_P>
 b9a:	8c 01       	movw	r16, r24
 b9c:	50 e8       	ldi	r21, 0x80	; 128
 b9e:	f5 2a       	or	r15, r21
 ba0:	f3 fe       	sbrs	r15, 3
 ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <vfprintf+0x1c8>
 ba4:	1a c0       	rjmp	.+52     	; 0xbda <vfprintf+0x1f0>
 ba6:	80 e2       	ldi	r24, 0x20	; 32
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	b3 01       	movw	r22, r6
 bac:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 bb0:	ea 94       	dec	r14
 bb2:	8e 2d       	mov	r24, r14
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	08 17       	cp	r16, r24
 bb8:	19 07       	cpc	r17, r25
 bba:	a8 f3       	brcs	.-22     	; 0xba6 <vfprintf+0x1bc>
 bbc:	0e c0       	rjmp	.+28     	; 0xbda <vfprintf+0x1f0>
 bbe:	f6 01       	movw	r30, r12
 bc0:	f7 fc       	sbrc	r15, 7
 bc2:	85 91       	lpm	r24, Z+
 bc4:	f7 fe       	sbrs	r15, 7
 bc6:	81 91       	ld	r24, Z+
 bc8:	6f 01       	movw	r12, r30
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	b3 01       	movw	r22, r6
 bce:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 bd2:	e1 10       	cpse	r14, r1
 bd4:	ea 94       	dec	r14
 bd6:	01 50       	subi	r16, 0x01	; 1
 bd8:	10 40       	sbci	r17, 0x00	; 0
 bda:	01 15       	cp	r16, r1
 bdc:	11 05       	cpc	r17, r1
 bde:	79 f7       	brne	.-34     	; 0xbbe <vfprintf+0x1d4>
 be0:	ea c0       	rjmp	.+468    	; 0xdb6 <vfprintf+0x3cc>
 be2:	94 36       	cpi	r25, 0x64	; 100
 be4:	11 f0       	breq	.+4      	; 0xbea <vfprintf+0x200>
 be6:	99 36       	cpi	r25, 0x69	; 105
 be8:	69 f5       	brne	.+90     	; 0xc44 <vfprintf+0x25a>
 bea:	f7 fe       	sbrs	r15, 7
 bec:	08 c0       	rjmp	.+16     	; 0xbfe <vfprintf+0x214>
 bee:	f5 01       	movw	r30, r10
 bf0:	20 81       	ld	r18, Z
 bf2:	31 81       	ldd	r19, Z+1	; 0x01
 bf4:	42 81       	ldd	r20, Z+2	; 0x02
 bf6:	53 81       	ldd	r21, Z+3	; 0x03
 bf8:	84 e0       	ldi	r24, 0x04	; 4
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	0a c0       	rjmp	.+20     	; 0xc12 <vfprintf+0x228>
 bfe:	f5 01       	movw	r30, r10
 c00:	80 81       	ld	r24, Z
 c02:	91 81       	ldd	r25, Z+1	; 0x01
 c04:	9c 01       	movw	r18, r24
 c06:	44 27       	eor	r20, r20
 c08:	37 fd       	sbrc	r19, 7
 c0a:	40 95       	com	r20
 c0c:	54 2f       	mov	r21, r20
 c0e:	82 e0       	ldi	r24, 0x02	; 2
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	a8 0e       	add	r10, r24
 c14:	b9 1e       	adc	r11, r25
 c16:	9f e6       	ldi	r25, 0x6F	; 111
 c18:	f9 22       	and	r15, r25
 c1a:	57 ff       	sbrs	r21, 7
 c1c:	09 c0       	rjmp	.+18     	; 0xc30 <vfprintf+0x246>
 c1e:	50 95       	com	r21
 c20:	40 95       	com	r20
 c22:	30 95       	com	r19
 c24:	21 95       	neg	r18
 c26:	3f 4f       	sbci	r19, 0xFF	; 255
 c28:	4f 4f       	sbci	r20, 0xFF	; 255
 c2a:	5f 4f       	sbci	r21, 0xFF	; 255
 c2c:	e0 e8       	ldi	r30, 0x80	; 128
 c2e:	fe 2a       	or	r15, r30
 c30:	ca 01       	movw	r24, r20
 c32:	b9 01       	movw	r22, r18
 c34:	a1 01       	movw	r20, r2
 c36:	2a e0       	ldi	r18, 0x0A	; 10
 c38:	30 e0       	ldi	r19, 0x00	; 0
 c3a:	0e 94 52 07 	call	0xea4	; 0xea4 <__ultoa_invert>
 c3e:	d8 2e       	mov	r13, r24
 c40:	d2 18       	sub	r13, r2
 c42:	40 c0       	rjmp	.+128    	; 0xcc4 <vfprintf+0x2da>
 c44:	95 37       	cpi	r25, 0x75	; 117
 c46:	29 f4       	brne	.+10     	; 0xc52 <vfprintf+0x268>
 c48:	1f 2d       	mov	r17, r15
 c4a:	1f 7e       	andi	r17, 0xEF	; 239
 c4c:	2a e0       	ldi	r18, 0x0A	; 10
 c4e:	30 e0       	ldi	r19, 0x00	; 0
 c50:	1d c0       	rjmp	.+58     	; 0xc8c <vfprintf+0x2a2>
 c52:	1f 2d       	mov	r17, r15
 c54:	19 7f       	andi	r17, 0xF9	; 249
 c56:	9f 36       	cpi	r25, 0x6F	; 111
 c58:	61 f0       	breq	.+24     	; 0xc72 <vfprintf+0x288>
 c5a:	90 37       	cpi	r25, 0x70	; 112
 c5c:	20 f4       	brcc	.+8      	; 0xc66 <vfprintf+0x27c>
 c5e:	98 35       	cpi	r25, 0x58	; 88
 c60:	09 f0       	breq	.+2      	; 0xc64 <vfprintf+0x27a>
 c62:	ac c0       	rjmp	.+344    	; 0xdbc <vfprintf+0x3d2>
 c64:	0f c0       	rjmp	.+30     	; 0xc84 <vfprintf+0x29a>
 c66:	90 37       	cpi	r25, 0x70	; 112
 c68:	39 f0       	breq	.+14     	; 0xc78 <vfprintf+0x28e>
 c6a:	98 37       	cpi	r25, 0x78	; 120
 c6c:	09 f0       	breq	.+2      	; 0xc70 <vfprintf+0x286>
 c6e:	a6 c0       	rjmp	.+332    	; 0xdbc <vfprintf+0x3d2>
 c70:	04 c0       	rjmp	.+8      	; 0xc7a <vfprintf+0x290>
 c72:	28 e0       	ldi	r18, 0x08	; 8
 c74:	30 e0       	ldi	r19, 0x00	; 0
 c76:	0a c0       	rjmp	.+20     	; 0xc8c <vfprintf+0x2a2>
 c78:	10 61       	ori	r17, 0x10	; 16
 c7a:	14 fd       	sbrc	r17, 4
 c7c:	14 60       	ori	r17, 0x04	; 4
 c7e:	20 e1       	ldi	r18, 0x10	; 16
 c80:	30 e0       	ldi	r19, 0x00	; 0
 c82:	04 c0       	rjmp	.+8      	; 0xc8c <vfprintf+0x2a2>
 c84:	14 fd       	sbrc	r17, 4
 c86:	16 60       	ori	r17, 0x06	; 6
 c88:	20 e1       	ldi	r18, 0x10	; 16
 c8a:	32 e0       	ldi	r19, 0x02	; 2
 c8c:	17 ff       	sbrs	r17, 7
 c8e:	08 c0       	rjmp	.+16     	; 0xca0 <vfprintf+0x2b6>
 c90:	f5 01       	movw	r30, r10
 c92:	60 81       	ld	r22, Z
 c94:	71 81       	ldd	r23, Z+1	; 0x01
 c96:	82 81       	ldd	r24, Z+2	; 0x02
 c98:	93 81       	ldd	r25, Z+3	; 0x03
 c9a:	44 e0       	ldi	r20, 0x04	; 4
 c9c:	50 e0       	ldi	r21, 0x00	; 0
 c9e:	08 c0       	rjmp	.+16     	; 0xcb0 <vfprintf+0x2c6>
 ca0:	f5 01       	movw	r30, r10
 ca2:	80 81       	ld	r24, Z
 ca4:	91 81       	ldd	r25, Z+1	; 0x01
 ca6:	bc 01       	movw	r22, r24
 ca8:	80 e0       	ldi	r24, 0x00	; 0
 caa:	90 e0       	ldi	r25, 0x00	; 0
 cac:	42 e0       	ldi	r20, 0x02	; 2
 cae:	50 e0       	ldi	r21, 0x00	; 0
 cb0:	a4 0e       	add	r10, r20
 cb2:	b5 1e       	adc	r11, r21
 cb4:	a1 01       	movw	r20, r2
 cb6:	0e 94 52 07 	call	0xea4	; 0xea4 <__ultoa_invert>
 cba:	d8 2e       	mov	r13, r24
 cbc:	d2 18       	sub	r13, r2
 cbe:	8f e7       	ldi	r24, 0x7F	; 127
 cc0:	f8 2e       	mov	r15, r24
 cc2:	f1 22       	and	r15, r17
 cc4:	f6 fe       	sbrs	r15, 6
 cc6:	0b c0       	rjmp	.+22     	; 0xcde <vfprintf+0x2f4>
 cc8:	5e ef       	ldi	r21, 0xFE	; 254
 cca:	f5 22       	and	r15, r21
 ccc:	d9 14       	cp	r13, r9
 cce:	38 f4       	brcc	.+14     	; 0xcde <vfprintf+0x2f4>
 cd0:	f4 fe       	sbrs	r15, 4
 cd2:	07 c0       	rjmp	.+14     	; 0xce2 <vfprintf+0x2f8>
 cd4:	f2 fc       	sbrc	r15, 2
 cd6:	05 c0       	rjmp	.+10     	; 0xce2 <vfprintf+0x2f8>
 cd8:	8f ee       	ldi	r24, 0xEF	; 239
 cda:	f8 22       	and	r15, r24
 cdc:	02 c0       	rjmp	.+4      	; 0xce2 <vfprintf+0x2f8>
 cde:	1d 2d       	mov	r17, r13
 ce0:	01 c0       	rjmp	.+2      	; 0xce4 <vfprintf+0x2fa>
 ce2:	19 2d       	mov	r17, r9
 ce4:	f4 fe       	sbrs	r15, 4
 ce6:	0d c0       	rjmp	.+26     	; 0xd02 <vfprintf+0x318>
 ce8:	fe 01       	movw	r30, r28
 cea:	ed 0d       	add	r30, r13
 cec:	f1 1d       	adc	r31, r1
 cee:	80 81       	ld	r24, Z
 cf0:	80 33       	cpi	r24, 0x30	; 48
 cf2:	19 f4       	brne	.+6      	; 0xcfa <vfprintf+0x310>
 cf4:	99 ee       	ldi	r25, 0xE9	; 233
 cf6:	f9 22       	and	r15, r25
 cf8:	08 c0       	rjmp	.+16     	; 0xd0a <vfprintf+0x320>
 cfa:	1f 5f       	subi	r17, 0xFF	; 255
 cfc:	f2 fe       	sbrs	r15, 2
 cfe:	05 c0       	rjmp	.+10     	; 0xd0a <vfprintf+0x320>
 d00:	03 c0       	rjmp	.+6      	; 0xd08 <vfprintf+0x31e>
 d02:	8f 2d       	mov	r24, r15
 d04:	86 78       	andi	r24, 0x86	; 134
 d06:	09 f0       	breq	.+2      	; 0xd0a <vfprintf+0x320>
 d08:	1f 5f       	subi	r17, 0xFF	; 255
 d0a:	0f 2d       	mov	r16, r15
 d0c:	f3 fc       	sbrc	r15, 3
 d0e:	14 c0       	rjmp	.+40     	; 0xd38 <vfprintf+0x34e>
 d10:	f0 fe       	sbrs	r15, 0
 d12:	0f c0       	rjmp	.+30     	; 0xd32 <vfprintf+0x348>
 d14:	1e 15       	cp	r17, r14
 d16:	10 f0       	brcs	.+4      	; 0xd1c <vfprintf+0x332>
 d18:	9d 2c       	mov	r9, r13
 d1a:	0b c0       	rjmp	.+22     	; 0xd32 <vfprintf+0x348>
 d1c:	9d 2c       	mov	r9, r13
 d1e:	9e 0c       	add	r9, r14
 d20:	91 1a       	sub	r9, r17
 d22:	1e 2d       	mov	r17, r14
 d24:	06 c0       	rjmp	.+12     	; 0xd32 <vfprintf+0x348>
 d26:	80 e2       	ldi	r24, 0x20	; 32
 d28:	90 e0       	ldi	r25, 0x00	; 0
 d2a:	b3 01       	movw	r22, r6
 d2c:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 d30:	1f 5f       	subi	r17, 0xFF	; 255
 d32:	1e 15       	cp	r17, r14
 d34:	c0 f3       	brcs	.-16     	; 0xd26 <vfprintf+0x33c>
 d36:	04 c0       	rjmp	.+8      	; 0xd40 <vfprintf+0x356>
 d38:	1e 15       	cp	r17, r14
 d3a:	10 f4       	brcc	.+4      	; 0xd40 <vfprintf+0x356>
 d3c:	e1 1a       	sub	r14, r17
 d3e:	01 c0       	rjmp	.+2      	; 0xd42 <vfprintf+0x358>
 d40:	ee 24       	eor	r14, r14
 d42:	04 ff       	sbrs	r16, 4
 d44:	0f c0       	rjmp	.+30     	; 0xd64 <vfprintf+0x37a>
 d46:	80 e3       	ldi	r24, 0x30	; 48
 d48:	90 e0       	ldi	r25, 0x00	; 0
 d4a:	b3 01       	movw	r22, r6
 d4c:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 d50:	02 ff       	sbrs	r16, 2
 d52:	1d c0       	rjmp	.+58     	; 0xd8e <vfprintf+0x3a4>
 d54:	01 fd       	sbrc	r16, 1
 d56:	03 c0       	rjmp	.+6      	; 0xd5e <vfprintf+0x374>
 d58:	88 e7       	ldi	r24, 0x78	; 120
 d5a:	90 e0       	ldi	r25, 0x00	; 0
 d5c:	0e c0       	rjmp	.+28     	; 0xd7a <vfprintf+0x390>
 d5e:	88 e5       	ldi	r24, 0x58	; 88
 d60:	90 e0       	ldi	r25, 0x00	; 0
 d62:	0b c0       	rjmp	.+22     	; 0xd7a <vfprintf+0x390>
 d64:	80 2f       	mov	r24, r16
 d66:	86 78       	andi	r24, 0x86	; 134
 d68:	91 f0       	breq	.+36     	; 0xd8e <vfprintf+0x3a4>
 d6a:	01 ff       	sbrs	r16, 1
 d6c:	02 c0       	rjmp	.+4      	; 0xd72 <vfprintf+0x388>
 d6e:	8b e2       	ldi	r24, 0x2B	; 43
 d70:	01 c0       	rjmp	.+2      	; 0xd74 <vfprintf+0x38a>
 d72:	80 e2       	ldi	r24, 0x20	; 32
 d74:	f7 fc       	sbrc	r15, 7
 d76:	8d e2       	ldi	r24, 0x2D	; 45
 d78:	90 e0       	ldi	r25, 0x00	; 0
 d7a:	b3 01       	movw	r22, r6
 d7c:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 d80:	06 c0       	rjmp	.+12     	; 0xd8e <vfprintf+0x3a4>
 d82:	80 e3       	ldi	r24, 0x30	; 48
 d84:	90 e0       	ldi	r25, 0x00	; 0
 d86:	b3 01       	movw	r22, r6
 d88:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 d8c:	9a 94       	dec	r9
 d8e:	d9 14       	cp	r13, r9
 d90:	c0 f3       	brcs	.-16     	; 0xd82 <vfprintf+0x398>
 d92:	da 94       	dec	r13
 d94:	f1 01       	movw	r30, r2
 d96:	ed 0d       	add	r30, r13
 d98:	f1 1d       	adc	r31, r1
 d9a:	80 81       	ld	r24, Z
 d9c:	90 e0       	ldi	r25, 0x00	; 0
 d9e:	b3 01       	movw	r22, r6
 da0:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 da4:	dd 20       	and	r13, r13
 da6:	a9 f7       	brne	.-22     	; 0xd92 <vfprintf+0x3a8>
 da8:	06 c0       	rjmp	.+12     	; 0xdb6 <vfprintf+0x3cc>
 daa:	80 e2       	ldi	r24, 0x20	; 32
 dac:	90 e0       	ldi	r25, 0x00	; 0
 dae:	b3 01       	movw	r22, r6
 db0:	0e 94 26 07 	call	0xe4c	; 0xe4c <fputc>
 db4:	ea 94       	dec	r14
 db6:	ee 20       	and	r14, r14
 db8:	c1 f7       	brne	.-16     	; 0xdaa <vfprintf+0x3c0>
 dba:	43 ce       	rjmp	.-890    	; 0xa42 <vfprintf+0x58>
 dbc:	f3 01       	movw	r30, r6
 dbe:	66 81       	ldd	r22, Z+6	; 0x06
 dc0:	77 81       	ldd	r23, Z+7	; 0x07
 dc2:	cb 01       	movw	r24, r22
 dc4:	2b 96       	adiw	r28, 0x0b	; 11
 dc6:	0f b6       	in	r0, 0x3f	; 63
 dc8:	f8 94       	cli
 dca:	de bf       	out	0x3e, r29	; 62
 dcc:	0f be       	out	0x3f, r0	; 63
 dce:	cd bf       	out	0x3d, r28	; 61
 dd0:	cf 91       	pop	r28
 dd2:	df 91       	pop	r29
 dd4:	1f 91       	pop	r17
 dd6:	0f 91       	pop	r16
 dd8:	ff 90       	pop	r15
 dda:	ef 90       	pop	r14
 ddc:	df 90       	pop	r13
 dde:	cf 90       	pop	r12
 de0:	bf 90       	pop	r11
 de2:	af 90       	pop	r10
 de4:	9f 90       	pop	r9
 de6:	8f 90       	pop	r8
 de8:	7f 90       	pop	r7
 dea:	6f 90       	pop	r6
 dec:	5f 90       	pop	r5
 dee:	4f 90       	pop	r4
 df0:	3f 90       	pop	r3
 df2:	2f 90       	pop	r2
 df4:	08 95       	ret

00000df6 <__eerd_byte_m128>:
 df6:	e1 99       	sbic	0x1c, 1	; 28
 df8:	fe cf       	rjmp	.-4      	; 0xdf6 <__eerd_byte_m128>
 dfa:	9f bb       	out	0x1f, r25	; 31
 dfc:	8e bb       	out	0x1e, r24	; 30
 dfe:	e0 9a       	sbi	0x1c, 0	; 28
 e00:	99 27       	eor	r25, r25
 e02:	8d b3       	in	r24, 0x1d	; 29
 e04:	08 95       	ret

00000e06 <__eewr_byte_m128>:
 e06:	26 2f       	mov	r18, r22

00000e08 <__eewr_r18_m128>:
 e08:	e1 99       	sbic	0x1c, 1	; 28
 e0a:	fe cf       	rjmp	.-4      	; 0xe08 <__eewr_r18_m128>
 e0c:	9f bb       	out	0x1f, r25	; 31
 e0e:	8e bb       	out	0x1e, r24	; 30
 e10:	2d bb       	out	0x1d, r18	; 29
 e12:	0f b6       	in	r0, 0x3f	; 63
 e14:	f8 94       	cli
 e16:	e2 9a       	sbi	0x1c, 2	; 28
 e18:	e1 9a       	sbi	0x1c, 1	; 28
 e1a:	0f be       	out	0x3f, r0	; 63
 e1c:	01 96       	adiw	r24, 0x01	; 1
 e1e:	08 95       	ret

00000e20 <strnlen_P>:
 e20:	fc 01       	movw	r30, r24
 e22:	05 90       	lpm	r0, Z+
 e24:	61 50       	subi	r22, 0x01	; 1
 e26:	70 40       	sbci	r23, 0x00	; 0
 e28:	01 10       	cpse	r0, r1
 e2a:	d8 f7       	brcc	.-10     	; 0xe22 <strnlen_P+0x2>
 e2c:	80 95       	com	r24
 e2e:	90 95       	com	r25
 e30:	8e 0f       	add	r24, r30
 e32:	9f 1f       	adc	r25, r31
 e34:	08 95       	ret

00000e36 <strnlen>:
 e36:	fc 01       	movw	r30, r24
 e38:	61 50       	subi	r22, 0x01	; 1
 e3a:	70 40       	sbci	r23, 0x00	; 0
 e3c:	01 90       	ld	r0, Z+
 e3e:	01 10       	cpse	r0, r1
 e40:	d8 f7       	brcc	.-10     	; 0xe38 <strnlen+0x2>
 e42:	80 95       	com	r24
 e44:	90 95       	com	r25
 e46:	8e 0f       	add	r24, r30
 e48:	9f 1f       	adc	r25, r31
 e4a:	08 95       	ret

00000e4c <fputc>:
 e4c:	0f 93       	push	r16
 e4e:	1f 93       	push	r17
 e50:	cf 93       	push	r28
 e52:	df 93       	push	r29
 e54:	8c 01       	movw	r16, r24
 e56:	eb 01       	movw	r28, r22
 e58:	8b 81       	ldd	r24, Y+3	; 0x03
 e5a:	81 ff       	sbrs	r24, 1
 e5c:	1b c0       	rjmp	.+54     	; 0xe94 <fputc+0x48>
 e5e:	82 ff       	sbrs	r24, 2
 e60:	0d c0       	rjmp	.+26     	; 0xe7c <fputc+0x30>
 e62:	2e 81       	ldd	r18, Y+6	; 0x06
 e64:	3f 81       	ldd	r19, Y+7	; 0x07
 e66:	8c 81       	ldd	r24, Y+4	; 0x04
 e68:	9d 81       	ldd	r25, Y+5	; 0x05
 e6a:	28 17       	cp	r18, r24
 e6c:	39 07       	cpc	r19, r25
 e6e:	64 f4       	brge	.+24     	; 0xe88 <fputc+0x3c>
 e70:	e8 81       	ld	r30, Y
 e72:	f9 81       	ldd	r31, Y+1	; 0x01
 e74:	01 93       	st	Z+, r16
 e76:	f9 83       	std	Y+1, r31	; 0x01
 e78:	e8 83       	st	Y, r30
 e7a:	06 c0       	rjmp	.+12     	; 0xe88 <fputc+0x3c>
 e7c:	e8 85       	ldd	r30, Y+8	; 0x08
 e7e:	f9 85       	ldd	r31, Y+9	; 0x09
 e80:	80 2f       	mov	r24, r16
 e82:	09 95       	icall
 e84:	89 2b       	or	r24, r25
 e86:	31 f4       	brne	.+12     	; 0xe94 <fputc+0x48>
 e88:	8e 81       	ldd	r24, Y+6	; 0x06
 e8a:	9f 81       	ldd	r25, Y+7	; 0x07
 e8c:	01 96       	adiw	r24, 0x01	; 1
 e8e:	9f 83       	std	Y+7, r25	; 0x07
 e90:	8e 83       	std	Y+6, r24	; 0x06
 e92:	02 c0       	rjmp	.+4      	; 0xe98 <fputc+0x4c>
 e94:	0f ef       	ldi	r16, 0xFF	; 255
 e96:	1f ef       	ldi	r17, 0xFF	; 255
 e98:	c8 01       	movw	r24, r16
 e9a:	df 91       	pop	r29
 e9c:	cf 91       	pop	r28
 e9e:	1f 91       	pop	r17
 ea0:	0f 91       	pop	r16
 ea2:	08 95       	ret

00000ea4 <__ultoa_invert>:
 ea4:	fa 01       	movw	r30, r20
 ea6:	aa 27       	eor	r26, r26
 ea8:	28 30       	cpi	r18, 0x08	; 8
 eaa:	51 f1       	breq	.+84     	; 0xf00 <__ultoa_invert+0x5c>
 eac:	20 31       	cpi	r18, 0x10	; 16
 eae:	81 f1       	breq	.+96     	; 0xf10 <__ultoa_invert+0x6c>
 eb0:	e8 94       	clt
 eb2:	6f 93       	push	r22
 eb4:	6e 7f       	andi	r22, 0xFE	; 254
 eb6:	6e 5f       	subi	r22, 0xFE	; 254
 eb8:	7f 4f       	sbci	r23, 0xFF	; 255
 eba:	8f 4f       	sbci	r24, 0xFF	; 255
 ebc:	9f 4f       	sbci	r25, 0xFF	; 255
 ebe:	af 4f       	sbci	r26, 0xFF	; 255
 ec0:	b1 e0       	ldi	r27, 0x01	; 1
 ec2:	3e d0       	rcall	.+124    	; 0xf40 <__ultoa_invert+0x9c>
 ec4:	b4 e0       	ldi	r27, 0x04	; 4
 ec6:	3c d0       	rcall	.+120    	; 0xf40 <__ultoa_invert+0x9c>
 ec8:	67 0f       	add	r22, r23
 eca:	78 1f       	adc	r23, r24
 ecc:	89 1f       	adc	r24, r25
 ece:	9a 1f       	adc	r25, r26
 ed0:	a1 1d       	adc	r26, r1
 ed2:	68 0f       	add	r22, r24
 ed4:	79 1f       	adc	r23, r25
 ed6:	8a 1f       	adc	r24, r26
 ed8:	91 1d       	adc	r25, r1
 eda:	a1 1d       	adc	r26, r1
 edc:	6a 0f       	add	r22, r26
 ede:	71 1d       	adc	r23, r1
 ee0:	81 1d       	adc	r24, r1
 ee2:	91 1d       	adc	r25, r1
 ee4:	a1 1d       	adc	r26, r1
 ee6:	20 d0       	rcall	.+64     	; 0xf28 <__ultoa_invert+0x84>
 ee8:	09 f4       	brne	.+2      	; 0xeec <__ultoa_invert+0x48>
 eea:	68 94       	set
 eec:	3f 91       	pop	r19
 eee:	2a e0       	ldi	r18, 0x0A	; 10
 ef0:	26 9f       	mul	r18, r22
 ef2:	11 24       	eor	r1, r1
 ef4:	30 19       	sub	r19, r0
 ef6:	30 5d       	subi	r19, 0xD0	; 208
 ef8:	31 93       	st	Z+, r19
 efa:	de f6       	brtc	.-74     	; 0xeb2 <__ultoa_invert+0xe>
 efc:	cf 01       	movw	r24, r30
 efe:	08 95       	ret
 f00:	46 2f       	mov	r20, r22
 f02:	47 70       	andi	r20, 0x07	; 7
 f04:	40 5d       	subi	r20, 0xD0	; 208
 f06:	41 93       	st	Z+, r20
 f08:	b3 e0       	ldi	r27, 0x03	; 3
 f0a:	0f d0       	rcall	.+30     	; 0xf2a <__ultoa_invert+0x86>
 f0c:	c9 f7       	brne	.-14     	; 0xf00 <__ultoa_invert+0x5c>
 f0e:	f6 cf       	rjmp	.-20     	; 0xefc <__ultoa_invert+0x58>
 f10:	46 2f       	mov	r20, r22
 f12:	4f 70       	andi	r20, 0x0F	; 15
 f14:	40 5d       	subi	r20, 0xD0	; 208
 f16:	4a 33       	cpi	r20, 0x3A	; 58
 f18:	18 f0       	brcs	.+6      	; 0xf20 <__ultoa_invert+0x7c>
 f1a:	49 5d       	subi	r20, 0xD9	; 217
 f1c:	31 fd       	sbrc	r19, 1
 f1e:	40 52       	subi	r20, 0x20	; 32
 f20:	41 93       	st	Z+, r20
 f22:	02 d0       	rcall	.+4      	; 0xf28 <__ultoa_invert+0x84>
 f24:	a9 f7       	brne	.-22     	; 0xf10 <__ultoa_invert+0x6c>
 f26:	ea cf       	rjmp	.-44     	; 0xefc <__ultoa_invert+0x58>
 f28:	b4 e0       	ldi	r27, 0x04	; 4
 f2a:	a6 95       	lsr	r26
 f2c:	97 95       	ror	r25
 f2e:	87 95       	ror	r24
 f30:	77 95       	ror	r23
 f32:	67 95       	ror	r22
 f34:	ba 95       	dec	r27
 f36:	c9 f7       	brne	.-14     	; 0xf2a <__ultoa_invert+0x86>
 f38:	00 97       	sbiw	r24, 0x00	; 0
 f3a:	61 05       	cpc	r22, r1
 f3c:	71 05       	cpc	r23, r1
 f3e:	08 95       	ret
 f40:	9b 01       	movw	r18, r22
 f42:	ac 01       	movw	r20, r24
 f44:	0a 2e       	mov	r0, r26
 f46:	06 94       	lsr	r0
 f48:	57 95       	ror	r21
 f4a:	47 95       	ror	r20
 f4c:	37 95       	ror	r19
 f4e:	27 95       	ror	r18
 f50:	ba 95       	dec	r27
 f52:	c9 f7       	brne	.-14     	; 0xf46 <__ultoa_invert+0xa2>
 f54:	62 0f       	add	r22, r18
 f56:	73 1f       	adc	r23, r19
 f58:	84 1f       	adc	r24, r20
 f5a:	95 1f       	adc	r25, r21
 f5c:	a0 1d       	adc	r26, r0
 f5e:	08 95       	ret

00000f60 <_exit>:
 f60:	f8 94       	cli

00000f62 <__stop_program>:
 f62:	ff cf       	rjmp	.-2      	; 0xf62 <__stop_program>
